package org.phomellolitepos.printer;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Matrix;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.RemoteException;
import android.print.PrintAttributes;
import android.print.PrintDocumentAdapter;
import android.print.PrintJob;
import android.print.PrintJobId;
import android.print.PrintManager;
import android.provider.MediaStore;
import androidx.annotation.RequiresApi;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;


import com.basewin.aidl.OnPrinterListener;
import com.basewin.define.FontsType;
import com.basewin.services.PrinterBinder;

import com.basewin.services.ServiceManager;
import com.hoin.btsdk.BluetoothService;
import com.hoin.btsdk.PrintPic;
import com.iposprinter.iposprinterservice.IPosPrinterCallback;
import com.itextpdf.text.pdf.codec.Base64;

import java.io.ByteArrayOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import a1088sdk.PrnDspA1088Activity;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.phomellolitepos.Adapter.MyAdapter;
import org.phomellolitepos.Adapter.PdfDocumentAdapter;
import org.phomellolitepos.Main2Activity;
import org.phomellolitepos.MainActivity;

import org.phomellolitepos.ParkingIndustryActivity;
import org.phomellolitepos.PayCollectionListActivity;
import org.phomellolitepos.PaymentActivity;
import org.phomellolitepos.PaymentCollection_MainScreen;
import org.phomellolitepos.R;
import org.phomellolitepos.ReceptDetailActivity;
import org.phomellolitepos.RetailActivity;
import org.phomellolitepos.Retail_IndustryActivity;
import org.phomellolitepos.Util.DateUtill;
import org.phomellolitepos.Util.Globals;
import org.phomellolitepos.database.Bank;
import org.phomellolitepos.database.Contact;
import org.phomellolitepos.database.Database;
import org.phomellolitepos.database.Item;
import org.phomellolitepos.database.Lite_POS_Registration;
import org.phomellolitepos.database.Order_Detail;
import org.phomellolitepos.database.Order_Detail_Tax;
import org.phomellolitepos.database.Order_Payment;
import org.phomellolitepos.database.Order_Tax;
import org.phomellolitepos.database.Orders;
import org.phomellolitepos.database.Pay_Collection;
import org.phomellolitepos.database.Payment;
import org.phomellolitepos.database.Table;
import org.phomellolitepos.database.User;
import org.phomellolitepos.database.Tax_Master;
import org.phomellolitepos.utils.HandlerUtils;
import org.phomellolitepos.utils.TimerCountTools;

import woyou.aidlservice.jiuiv5.ICallback;
import woyou.aidlservice.jiuiv5.IWoyouService;

@SuppressLint({"ShowToast", "DefaultLocale"})
public class PrintLayout extends PrnDspA1088Activity {
    private ArrayList<String> mylist = new ArrayList<String>();
    private ListView lv;
    private int reprint;
    private MyAdapter adp;
    private ProgressDialog dialog;
    private String strOrderNo = "";
    String pos_flag;
    int scale;
    //private String PrinterType = "";
    //private Settings settings;
    private boolean iswifi = false;
    private int order, noofPrint = 0, lang = 0, pos = 0;
    private ArrayList<String> orderTypeArr;
    private int flag = 1;
    String decimal_check, qty_decimal_check;
    private IWoyouService woyouService;
    private TextView info;
    private byte[] inputCommand;
    private final int RUNNABLE_LENGHT = 11;
    private Random random = new Random();
    private ICallback callback = null;
    Database db;
    SQLiteDatabase database;
    private static final int REQUEST_CONNECT_DEVICE = 1;
    private static final int REQUEST_ENABLE_BT = 2;
    BluetoothService mService = null;
    Lite_POS_Registration lite_pos_registration;
    ProgressDialog progressDialog;
    LongOperation tsk;
    String strflag;
    String StrorderType;
    User user;
    Item item;
    String Time;
    Date currentDate;
    String id, opr, strOldCrAmt = "0";
    String ck_project_type;
    String strflagbtn;
    private static final String TAG = "PrinterTestDemo";
    private TimerCountTools timeTools;
    JSONObject printJson = new JSONObject();;
    private PrinterListener printer_callback = new PrinterListener();
    public static PrinterBinder printer;
    private ServiceConnection connService = new ServiceConnection() {

        @Override
        public void onServiceDisconnected(ComponentName name) {
            woyouService = null;
        }

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            woyouService = IWoyouService.Stub.asInterface(service);
        }
    };
    private final int MSG_TEST = 1;
    private long printCount = 0;
    @SuppressLint("HandlerLeak")
    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            if (msg.what == MSG_TEST) {
                //testAll();
                long mm = MemInfo.getmem_UNUSED(PrintLayout.this);
                if (mm < 100) {
                    handler.sendEmptyMessageDelayed(MSG_TEST, 20000);
                } else {
                    handler.sendEmptyMessageDelayed(MSG_TEST, 800);
                }
                Log.i(TAG, "testAll: " + printCount + " Memory: " + mm);
            }
        }
    };

    /*定义打印机状态*/
    private final int PRINTER_NORMAL = 0;
    private final int PRINTER_PAPERLESS = 1;
    private final int PRINTER_THP_HIGH_TEMPERATURE = 2;
    private final int PRINTER_MOTOR_HIGH_TEMPERATURE = 3;
    private final int PRINTER_IS_BUSY = 4;
    private final int PRINTER_ERROR_UNKNOWN = 5;
    /*打印机当前状态*/
    private int printerStatus = 0;

    /*定义状态广播*/
    private final String PRINTER_NORMAL_ACTION = "com.iposprinter.iposprinterservice.NORMAL_ACTION";
    private final String PRINTER_PAPERLESS_ACTION = "com.iposprinter.iposprinterservice.PAPERLESS_ACTION";
    private final String PRINTER_PAPEREXISTS_ACTION = "com.iposprinter.iposprinterservice.PAPEREXISTS_ACTION";
    private final String PRINTER_THP_HIGHTEMP_ACTION = "com.iposprinter.iposprinterservice.THP_HIGHTEMP_ACTION";
    private final String PRINTER_THP_NORMALTEMP_ACTION = "com.iposprinter.iposprinterservice.THP_NORMALTEMP_ACTION";
    private final String PRINTER_MOTOR_HIGHTEMP_ACTION = "com.iposprinter.iposprinterservice.MOTOR_HIGHTEMP_ACTION";
    private final String PRINTER_BUSY_ACTION = "com.iposprinter.iposprinterservice.BUSY_ACTION";
    private final String PRINTER_CURRENT_TASK_PRINT_COMPLETE_ACTION = "com.iposprinter.iposprinterservice.CURRENT_TASK_PRINT_COMPLETE_ACTION";

    /*定义消息*/
//    private final int MSG_TEST                               = 1;
    private final int MSG_IS_NORMAL = 2;
    private final int MSG_IS_BUSY = 3;
    private final int MSG_PAPER_LESS = 4;
    private final int MSG_PAPER_EXISTS = 5;
    private final int MSG_THP_HIGH_TEMP = 6;
    private final int MSG_THP_TEMP_NORMAL = 7;
    private final int MSG_MOTOR_HIGH_TEMP = 8;
    private final int MSG_MOTOR_HIGH_TEMP_INIT_PRINTER = 9;
    private final int MSG_CURRENT_TASK_PRINT_COMPLETE = 10;

    /*循环打印类型*/
    private final int MULTI_THREAD_LOOP_PRINT = 1;
    private final int INPUT_CONTENT_LOOP_PRINT = 2;
    private final int DEMO_LOOP_PRINT = 3;
    private final int PRINT_DRIVER_ERROR_TEST = 4;
    private final int DEFAULT_LOOP_PRINT = 0;

    //循环打印标志位
    private int loopPrintFlag = DEFAULT_LOOP_PRINT;
    private byte loopContent = 0x00;
    private int printDriverTestCount = 0;


    private com.iposprinter.iposprinterservice.IPosPrinterService mIPosPrinterService;
    private IPosPrinterCallback callbackPPT8555 = null;

    private HandlerUtils.MyHandler handlerPPT8555;

    /**
     * 消息处理
     */
    private HandlerUtils.IHandlerIntent iHandlerIntent = new HandlerUtils.IHandlerIntent() {
        @Override
        public void handlerIntent(Message msg) {
            switch (msg.what) {
                case MSG_TEST:
                    break;
                case MSG_IS_NORMAL:
                    if (getPrinterStatus() == PRINTER_NORMAL) {
//                        loopPrint(loopPrintFlag);
                    }
                    break;
                case MSG_IS_BUSY:
                   // Toast.makeText(PrintLayout.this, "Printer Is Working", Toast.LENGTH_SHORT).show();
                    break;
                case MSG_PAPER_LESS:
                    loopPrintFlag = DEFAULT_LOOP_PRINT;
                    Toast.makeText(PrintLayout.this, "Out Of Paper", Toast.LENGTH_SHORT).show();
                    break;
                case MSG_PAPER_EXISTS:
                    Toast.makeText(PrintLayout.this, "Exists Paper", Toast.LENGTH_SHORT).show();
                    break;
                case MSG_THP_HIGH_TEMP:
                    //Toast.makeText(PrintLayout.this, "Printer High Temp Alarm", Toast.LENGTH_SHORT).show();
                    break;
                case MSG_MOTOR_HIGH_TEMP:
                    loopPrintFlag = DEFAULT_LOOP_PRINT;
//                    Toast.makeText(PrintLayout.this, R.string.motor_high_temp_alarm, Toast.LENGTH_SHORT).show();
                    handlerPPT8555.sendEmptyMessageDelayed(MSG_MOTOR_HIGH_TEMP_INIT_PRINTER, 180000);  //马达高温报警，等待3分钟后复位打印机
                    break;
                case MSG_MOTOR_HIGH_TEMP_INIT_PRINTER:
                    printerInit();
                    break;
                case MSG_CURRENT_TASK_PRINT_COMPLETE:
//                    Toast.makeText(PrintLayout.this, R.string.printer_current_task_print_complete, Toast.LENGTH_SHORT).show();
                    break;
                default:
                    break;
            }
        }
    };

    private BroadcastReceiver IPosPrinterStatusListener = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (action == null) {
                Log.d(TAG, "IPosPrinterStatusListener onReceive action = null");
                return;
            }
            Log.d(TAG, "IPosPrinterStatusListener action = " + action);
            if (action.equals(PRINTER_NORMAL_ACTION)) {
                handlerPPT8555.sendEmptyMessageDelayed(MSG_IS_NORMAL, 0);
            } else if (action.equals(PRINTER_PAPERLESS_ACTION)) {
                handlerPPT8555.sendEmptyMessageDelayed(MSG_PAPER_LESS, 0);
            } else if (action.equals(PRINTER_BUSY_ACTION)) {
                handlerPPT8555.sendEmptyMessageDelayed(MSG_IS_BUSY, 0);
            } else if (action.equals(PRINTER_PAPEREXISTS_ACTION)) {
                handlerPPT8555.sendEmptyMessageDelayed(MSG_PAPER_EXISTS, 0);
            } else if (action.equals(PRINTER_THP_HIGHTEMP_ACTION)) {
                handlerPPT8555.sendEmptyMessageDelayed(MSG_THP_HIGH_TEMP, 0);
            } else if (action.equals(PRINTER_THP_NORMALTEMP_ACTION)) {
                handlerPPT8555.sendEmptyMessageDelayed(MSG_THP_TEMP_NORMAL, 0);
            } else if (action.equals(PRINTER_MOTOR_HIGHTEMP_ACTION))  //此时当前任务会继续打印，完成当前任务后，请等待2分钟以上时间，继续下一个打印任务
            {
                handlerPPT8555.sendEmptyMessageDelayed(MSG_MOTOR_HIGH_TEMP, 0);
            } else if (action.equals(PRINTER_CURRENT_TASK_PRINT_COMPLETE_ACTION)) {
                handlerPPT8555.sendEmptyMessageDelayed(MSG_CURRENT_TASK_PRINT_COMPLETE, 0);
            } else {
                handlerPPT8555.sendEmptyMessageDelayed(MSG_TEST, 0);
            }
        }
    };

    /**
     * 绑定服务实例
     */
    private ServiceConnection connectService = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            mIPosPrinterService = com.iposprinter.iposprinterservice.IPosPrinterService.Stub.asInterface(service);
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            mIPosPrinterService = null;
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        this.setFinishOnTouchOutside(false);
        setContentView(R.layout.activity_print_layout);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        handlerPPT8555 = new HandlerUtils.MyHandler(iHandlerIntent);
        callbackPPT8555 = new IPosPrinterCallback.Stub() {

            @Override
            public void onRunResult(final boolean isSuccess) throws RemoteException {
                Log.i(TAG, "result:" + isSuccess + "\n");
            }

            @Override
            public void onReturnString(final String value) throws RemoteException {
                Log.i(TAG, "result:" + value + "\n");
            }
        };
         currentDate = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Time = sdf.format(currentDate);
        try {
            currentDate = sdf.parse(Time);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        //绑定服务
        Intent intent = new Intent();
        intent.setPackage("com.iposprinter.iposprinterservice");
        intent.setAction("com.iposprinter.iposprinterservice.IPosPrintService");
//        startService(intent);
        bindService(intent, connectService, Context.BIND_AUTO_CREATE);

        //注册打印机状态接收器
        IntentFilter printerStatusFilter = new IntentFilter();
        printerStatusFilter.addAction(PRINTER_NORMAL_ACTION);
        printerStatusFilter.addAction(PRINTER_PAPERLESS_ACTION);
        printerStatusFilter.addAction(PRINTER_PAPEREXISTS_ACTION);
        printerStatusFilter.addAction(PRINTER_THP_HIGHTEMP_ACTION);
        printerStatusFilter.addAction(PRINTER_THP_NORMALTEMP_ACTION);
        printerStatusFilter.addAction(PRINTER_MOTOR_HIGHTEMP_ACTION);
        printerStatusFilter.addAction(PRINTER_BUSY_ACTION);
        registerReceiver(IPosPrinterStatusListener, printerStatusFilter);

        final Button b = (Button) findViewById(R.id.button1);


        intent = getIntent();
        id = intent.getStringExtra("id");
        opr = intent.getStringExtra("opr");
        if (opr == null || opr.equals("")) {
            opr = "other";
        }
        db = new Database(getApplicationContext());
        database = db.getWritableDatabase();

        lv = (ListView) findViewById(R.id.listView1);
           if(Globals.objLPR.getIndustry_Type().equals("4")){
               lv.setVisibility(View.GONE);
           }
           else{
               lv.setVisibility(View.VISIBLE);
           }



        switch (Globals.objsettings.get_Default_Ordertype()) {
            case "1":
                StrorderType="deliver";
                break;
            case "2":
                StrorderType="drive_thrue";
                break;
            case "3":
                StrorderType="pick_up";
                break;
            case "4":
                StrorderType="take_out";
                break;
            case "5":
                StrorderType="dine_ine";
                break;
            default:
                StrorderType="deliver";
                break;
        }

        lite_pos_registration = Lite_POS_Registration.getRegistration(getApplicationContext(), database, db, "");

        if(Globals.objLPR.getIndustry_Type().equals("4")){
            mService = ParkingIndustryActivity.mService;
        }
        else if(Globals.objLPR.getIndustry_Type().equals("3")){
            mService = PaymentCollection_MainScreen.mService;
        }
        else {
            if (Globals.objsettings.get_Home_Layout().equals("0")) {
                mService = MainActivity.mService;
            } else {
                mService = Main2Activity.mService;
            }
        }


        strOrderNo = getIntent().getStringExtra("strOrderNo");
        strflag = getIntent().getStringExtra("flag");
        pos_flag= getIntent().getStringExtra("posflag");
        if(Globals.objLPR.getIndustry_Type().equals("4")) {
            strflagbtn = getIntent().getStringExtra("strflag");
        }
        if (strflag == null) {
            strflag = "Add";
        }

        callback = new ICallback.Stub() {

            @Override
            public void onRunResult(final boolean success) throws RemoteException {
            }

            @Override
            public void onReturnString(final String value) throws RemoteException {
                Log.i(TAG, "printlength:" + value + "\n");
            }

            @Override
            public void onRaiseException(int code, final String msg) throws RemoteException {
                Log.i(TAG, "onRaiseException: " + msg);
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {

                    }
                });
            }
        };
        Intent intent_1 = new Intent();
        intent_1.setPackage("woyou.aidlservice.jiuiv5");
        intent_1.setAction("woyou.aidlservice.jiuiv5.IWoyouService");
        startService(intent_1);
        bindService(intent_1, connService, Context.BIND_AUTO_CREATE);
        if(Globals.objLPR.getIndustry_Type().equals("4")){
            if (Globals.PrinterType.equals("5")) {

                ServiceManager.getInstence().init(PrintLayout.this);

            }
        }
        else {
            if (Globals.PrinterType.equals("7")) {

                ServiceManager.getInstence().init(PrintLayout.this);

            }
        }
        final Orders orders = Orders.getOrders(PrintLayout.this, database, "WHERE order_code = '" + strOrderNo + "'");
        final ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(PrintLayout.this,
                "WHERE order_code = '" + strOrderNo + "'", database);
        final Order_Detail order_detail1 = Order_Detail.getOrder_Detail(PrintLayout.this, "WHERE order_code = '" + strOrderNo + "'",database);
        final Order_Payment order_payment = Order_Payment.getOrder_Payment(PrintLayout.this, "WHERE order_code = '" + strOrderNo + "'",database);

        try {
            decimal_check = Globals.objLPD.getDecimal_Place();
            qty_decimal_check = Globals.objsettings.get_Qty_Decimal();
        } catch (Exception ex) {
            decimal_check = "";
        }
        try {
            scale = Integer.parseInt(Globals.objsettings.get_Scale());
        } catch (Exception ex) {
            scale = 0;
        }
        lite_pos_registration = Lite_POS_Registration.getRegistration(getApplicationContext(), database, db, "");
        ck_project_type = lite_pos_registration.getproject_id();

if(!Globals.objLPR.getIndustry_Type().equals("4")) {
    mylist = getlist(orders, order_detail);
    if (mylist != null) {
        adp = new MyAdapter(getApplicationContext(), mylist);
    }
    lv.setAdapter(adp);

    try {
        tsk = new LongOperation();
        tsk.execute();
        Thread thread1 = new Thread() {
            public void run() {
                try {
                    tsk.get(6000, TimeUnit.MILLISECONDS); // set time in
                } catch (Exception e) {
                    tsk.cancel(true);
                    iswifi = false;
                    if (dialog.isShowing()) {
                        dialog.dismiss();
                    }
                }
            }
        };
        thread1.start();
    } catch (Exception ex) {
    }
}
            if (Globals.objsettings.get_Is_Print_Dialog_Show().equals("true")) {

                if(Globals.objLPR.getIndustry_Type().equals("4")){
                    b.setVisibility(View.GONE);

                }


                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        try {

                                b.performClick();

                        } catch (Exception e) {

                        }
                    }
                }, 500);

            }


        b.setOnClickListener(new OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
            @Override
            public void onClick(View arg0) {
                try {
                    // Print Wifi



                    if (iswifi) {
                        Thread thread = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    performOperationEn();

                               } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        });

                        thread.start();


                        if (strflag.equals("RDA")) {
                            Globals.strContact_Code = "";
                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = 0;
                            Globals.strOldCrAmt = "0";
                            Globals.strZoneName="";
                            Globals.table_name="";
                            Globals.strorderType="";
                            Globals.setEmpty();
                            Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                            intent.putExtra("order_code", strOrderNo);
                            startActivity(intent);
                            finish();
                        } else if (opr.equals("PayCollection")) {
                            Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                            startActivity(intent);
                            finish();
                        } else {
                            if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.strZoneName="";
                                Globals.table_name="";
                                Globals.strorderType="";
                                Globals.setEmpty();
                                Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                startActivity(intent);
                                finish();
                            } else {
                                if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = 0;
                                    Globals.strOldCrAmt = "0";
                                    Globals.strZoneName="";
                                    Globals.table_name="";
                                    Globals.strorderType="";
                                    Globals.setEmpty();
                                    Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = 0;
                                    Globals.strOldCrAmt = "0";
                                    Globals.strZoneName="";
                                    Globals.table_name="";
                                    Globals.strorderType="";
                                    Globals.setEmpty();
                                    Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else {
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = 0;
                                    Globals.strOldCrAmt = "0";
                                    Globals.strZoneName="";
                                    Globals.table_name="";
                                    Globals.strorderType="";
                                    Globals.setEmpty();
                                    Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                    startActivity(intent);
                                    finish();
                                }
                            }
                        }
                    }
                    else if (Globals.PrinterType.equals("2")) {


                    }

                    else if (Globals.PrinterType.equals("1")) {

                        if(Globals.objLPR.getIndustry_Type().equals("4")){
                            mobile_pos_parking(orders,order_detail1,order_payment);
                        }
                        else {
                            mobile_pos(orders, order_detail);

                        }
                        if (strflag.equals("RDA")) {
                            Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                            intent.putExtra("order_code", strOrderNo);
                            startActivity(intent);
                            finish();
                        } else if (opr.equals("PayCollection")) {
                            Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                            startActivity(intent);
                            finish();
                        } else {

                            if(Globals.objLPR.getIndustry_Type().equals("4")){
                                finish();
                            }
                           else if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                startActivity(intent);
                                finish();
                            }
                            else {
                                if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                    Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else {
                                    Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                    startActivity(intent);
                                    finish();
                                }
                            }
                        }
//                    PrintLayout.this.finish();
                    }

                    else if (Globals.PrinterType.equals("9")) {

                        mobile_pos(orders, order_detail);

                        if (strflag.equals("RDA")) {
                            Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                            intent.putExtra("order_code", strOrderNo);
                            startActivity(intent);
                            finish();
                        } else if (opr.equals("PayCollection")) {
                            Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                            startActivity(intent);
                            finish();
                        } else {
                            if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                startActivity(intent);
                                finish();
                            } else {
                                if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                    Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else {
                                    Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                    startActivity(intent);
                                    finish();
                                }
                            }
                        }
//                    PrintLayout.this.finish();
                    }



                    else if (Globals.PrinterType.equals("7")) {

                        if(Globals.objLPR.getIndustry_Type().equals("4")){
                            String path= Globals.folder + Globals.pdffolder
                                    + "/" + strOrderNo+"80mm"+ ".pdf";
                            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                                PrintManager printManager = (PrintManager) PrintLayout.this.getSystemService(PRINT_SERVICE);
                                try {
                                    PrintDocumentAdapter printAdapter = new PdfDocumentAdapter(PrintLayout.this, path);
                                    String jobName = getApplicationContext().getString(R.string.app_name) + " Document";

                                    PrintJob printJob = printManager.print(jobName, printAdapter, new PrintAttributes.Builder().build());

                                    PrintJobId printJobId = printJob.getId();

                                } catch (Exception e) {
                                    Log.e("", e.getMessage());
                                }
                            }

                        }
                        else {
                            ppt8527(orders, order_detail);
                        }

                        if (strflag.equals("RDA")) {

                            Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                            intent.putExtra("order_code", strOrderNo);
                            startActivity(intent);
                            finish();
                        } else if (opr.equals("PayCollection")) {
                            Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                            startActivity(intent);
                            finish();
                        } else {
                            if(Globals.objLPR.getIndustry_Type().equals("4")){
                                Intent intent = new Intent(PrintLayout.this, ParkingIndustryActivity.class);
                                startActivity(intent);
                                finish();

                            }
                            else if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                startActivity(intent);
                                finish();
                            }
                            else {
                                if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                    Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else {
                                    Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                    startActivity(intent);
                                    finish();
                                }
                            }
                        }
                    } else if (Globals.PrinterType.equals("6")) {
                        if(Globals.objLPR.getIndustry_Type().equals("4")){
                            ppt8555_parking(orders, order_detail1,order_payment);
                        }
                        else {
                            PHAPOS(orders, order_detail);

                        }
                        if (strflag.equals("RDA")) {
                            Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                            intent.putExtra("order_code", strOrderNo);
                            startActivity(intent);
                            finish();
                        } else if (opr.equals("PayCollection")) {
                            Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                            startActivity(intent);
                            finish();
                        } else {
                            if(Globals.objLPR.getIndustry_Type().equals("4")){
                                finish();
                            }
                           else if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                startActivity(intent);
                                finish();
                            }
                            else {
                                if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                    Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else {
                                    Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                    startActivity(intent);
                                    finish();
                                }
                            }
                        }
                    } else if (Globals.PrinterType.equals("3")) {
                        String result = "";
                        if(Globals.objLPR.getIndustry_Type().equals("4")){
                            result= bluetooth_56_parking(orders, order_detail1,order_payment);

                        }
                        else {
                            result = bluetooth_56(orders, order_detail);
                        }
                        if (result.equals("1")) {
                            if (strflag.equals("RDA")) {
                                Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                                intent.putExtra("order_code", strOrderNo);
                                startActivity(intent);
                                finish();
                            } else if (opr.equals("PayCollection")) {
                                Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                                startActivity(intent);
                                finish();
                            } else {
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";

                                if(Globals.objLPR.getIndustry_Type().equals("4")){
                                    Intent intent = new Intent(PrintLayout.this, ParkingIndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                }
                                else if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                }
                                else {
                                    if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                        Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                        Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else {
                                        Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                        startActivity(intent);
                                        finish();
                                    }
                                }
                            }
                        } else {
                            Toast.makeText(getApplicationContext(), "Bluetooth printer is not selected", Toast.LENGTH_SHORT).show();
                            if (strflag.equals("RDA")) {
                                Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                                intent.putExtra("order_code", strOrderNo);
                                startActivity(intent);
                                finish();
                            } else if (opr.equals("PayCollection")) {
                                Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                                startActivity(intent);
                                finish();
                            } else {
                                if(Globals.objLPR.getIndustry_Type().equals("4")){
                                    Intent intent = new Intent(PrintLayout.this, ParkingIndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                }
                                else if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                }
                                else {
                                    if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                        Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                        Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else {
                                        Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                        startActivity(intent);
                                        finish();
                                    }
                                }
                            }
                        }
                    } else if (Globals.PrinterType.equals("4")) {
                        String result = "";
if(Globals.objLPR.getIndustry_Type().equals("4")){
    result =bluetooth_80_parking(orders, order_detail1,order_payment);

}
else {
    result = bluetooth_80(orders, order_detail);
}
                        if (result.equals("1")) {
                            if (strflag.equals("RDA")) {
                                Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                                intent.putExtra("order_code", strOrderNo);
                                startActivity(intent);
                                finish();
                            } else if (opr.equals("PayCollection")) {
                                Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                                startActivity(intent);
                                finish();
                            } else {
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                if(Globals.objLPR.getIndustry_Type().equals("4")){
                                    Intent intent = new Intent(PrintLayout.this, ParkingIndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                }
                               else if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                }
                                else {
                                    if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                        Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                        Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else {
                                        Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                        startActivity(intent);
                                        finish();
                                    }
                                }
                            }
                        } else {
                            Toast.makeText(getApplicationContext(), "Bluetooth printer is not selected", Toast.LENGTH_SHORT).show();
                            if (strflag.equals("RDA")) {
                                Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                                intent.putExtra("order_code", strOrderNo);
                                startActivity(intent);
                                finish();
                            } else if (opr.equals("PayCollection")) {
                                Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                                startActivity(intent);
                                finish();
                            } else {
                                if(Globals.objLPR.getIndustry_Type().equals("4")){
                                    Intent intent = new Intent(PrintLayout.this, ParkingIndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                }
                               else if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                }
                                else {
                                    if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                        Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                        Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else {
                                        Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                        startActivity(intent);
                                        finish();
                                    }
                                }
                            }
                        }

                    } else if (Globals.PrinterType.equals("5")) {
                        String result = "";
                        if(Globals.objLPR.getIndustry_Type().equals("4")){
                            ppt8527_parking(orders,order_detail1,order_payment);
                        }
                        else {

                            result = bluetooth_100(orders, order_detail);
                        }
                        if (result.equals("1")) {
                            if (strflag.equals("RDA")) {
                                Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                                intent.putExtra("order_code", strOrderNo);
                                startActivity(intent);
                                finish();
                            } else if (opr.equals("PayCollection")) {
                                Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                                startActivity(intent);
                                finish();
                            } else {
                                if(Globals.objLPR.getIndustry_Type().equals("4")){
                                    finish();
                                }
                               else if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                }
                                else {
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = 0;
                                    Globals.strOldCrAmt = "0";
                                    if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                        Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                        Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else {
                                        Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                        startActivity(intent);
                                        finish();
                                    }
                                }
                        }
                        } else {
                            Toast.makeText(getApplicationContext(), "Bluetooth printer is not selected", Toast.LENGTH_SHORT).show();
                            if (strflag.equals("RDA")) {
                                Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                                intent.putExtra("order_code", strOrderNo);
                                startActivity(intent);
                                finish();
                            } else if (opr.equals("PayCollection")) {
                                Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                                startActivity(intent);
                                finish();
                            } else {
                                if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else {
                                    if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                        Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                        Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else {
                                        Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                        startActivity(intent);
                                        finish();
                                    }
                                }
                            }
                        }

                    } else if (Globals.PrinterType.equals("8")) {
                        try {

                                ppt8555(orders, order_detail);



                        } catch (Exception e) {

                        }

                        if (strflag.equals("RDA")) {
                            Intent intent = new Intent(PrintLayout.this, ReceptDetailActivity.class);
                            intent.putExtra("order_code", strOrderNo);
                            startActivity(intent);
                            finish();
                        } else if (opr.equals("PayCollection")) {
                            Intent intent = new Intent(PrintLayout.this, PayCollectionListActivity.class);
                            startActivity(intent);
                            finish();
                        } else {
                            if(Globals.objLPR.getIndustry_Type().equals("4")){

                                finish();
                            }
                            else {
                                if (Globals.objLPR.getIndustry_Type().equals("2")) {
                                    Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
                                    startActivity(intent);
                                    finish();
                                } else {
                                    if (Globals.objsettings.get_Home_Layout().equals("0")) {
                                        Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else if (Globals.objsettings.get_Home_Layout().equals("2")) {
                                        Intent intent = new Intent(PrintLayout.this, RetailActivity.class);
                                        startActivity(intent);
                                        finish();
                                    } else {
                                        Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                                        startActivity(intent);
                                        finish();
                                    }
                                }
                            }
                        }
//                    PrintLayout.this.finish();
                    }
                    else if(Globals.PrinterType.equals("10")) {
                       /* final File file = new File(Globals.folder + Globals.pdffolder
                                + "/" + strOrderNo + ".pdf");*/
                   /*   Intent intent = new Intent(PrintLayout.this, PdfWebView.class);
                        intent.putExtra("order_code", strOrderNo);
                        startActivity(intent);*/
                        String path= Globals.folder + Globals.pdffolder
                                + "/" + strOrderNo + ".pdf";
                        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                            PrintManager printManager = (PrintManager) PrintLayout.this.getSystemService(PRINT_SERVICE);
                            try {
                                PrintDocumentAdapter printAdapter = new PdfDocumentAdapter(PrintLayout.this, path);
                                String jobName = getApplicationContext().getString(R.string.app_name) + " Document";

                                PrintJob printJob = printManager.print(jobName, printAdapter, new PrintAttributes.Builder().build());
                                PrintJobId printJobId = printJob.getId();

                            } catch (Exception e) {
                                Log.e("", e.getMessage());
                            }
                        }

                       /* Intent intent = new Intent(PrintLayout.this, PdfWebView.class);
                        intent.putExtra("order_code", strOrderNo);
                        startActivity(intent);*/

                    }
                    else if(Globals.PrinterType.equals("11")) {
                       /* final File file = new File(Globals.folder + Globals.pdffolder
                                + "/" + strOrderNo + ".pdf");*/
                   /*   Intent intent = new Intent(PrintLayout.this, PdfWebView.class);
                        intent.putExtra("order_code", strOrderNo);
                        startActivity(intent);*/
                        String path= Globals.folder + Globals.pdffolder
                                + "/" + strOrderNo+"80mm"+ ".pdf";
                        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                            PrintManager printManager = (PrintManager) PrintLayout.this.getSystemService(PRINT_SERVICE);
                            try {
                                PrintDocumentAdapter printAdapter = new PdfDocumentAdapter(PrintLayout.this, path);
                                String jobName = getApplicationContext().getString(R.string.app_name) + " Document";

                                PrintJob printJob = printManager.print(jobName, printAdapter, new PrintAttributes.Builder().build());

                                PrintJobId printJobId = printJob.getId();

                            } catch (Exception e) {
                                Log.e("", e.getMessage());
                            }
                        }

                       /* Intent intent = new Intent(PrintLayout.this, PdfWebView.class);
                        intent.putExtra("order_code", strOrderNo);
                        startActivity(intent);*/

                    }
                    else {
                        Toast.makeText(PrintLayout.this, R.string.chkpriset, Toast.LENGTH_SHORT).show();
                    }
                } catch (Exception e) {

                }
            }

        });
    }

    private void ppt8555(Orders orders,  ArrayList<Order_Detail> order_detail) {


        if (Globals.objsettings.get_Print_Lang().equals("0")) {
            // English
/*            if( (Globals.objsettings.get_Print_Memo().equals("1")) && (Globals.objsettings.get_Print_Memo().equals("0"))) {
                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            String strString = "";
                            int strLength = 12;
                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                String Print_type = "0";
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);


                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                                try {
                                    if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().equals("0")) {
                                    } else {
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                        // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                } catch (Exception ex) {
                                }
                                if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().equals("0")) {
                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo + ":" + Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                //mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                ArrayList<String> arrayList = new ArrayList<String>();
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (order_payment_array.size() > 0) {

                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        arrayList.add(order_payment_array.get(i).get_payment_id());
                                    }
                                    strString = Globals.myRequiredString("Invoice Type" , strLength);
                                    if (arrayList.contains("1") && arrayList.contains("5")) {

                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : Credit/Cash\n", "ST", 24, callbackPPT8555);
                                    } else {
                                        if (arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : Credit\n", "ST", 24, callbackPPT8555);
                                        } else if (arrayList.contains("1")) {
                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : Cash\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                }

                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (Globals.strIsBarcodePrint.equals("true")) {
                                    mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                }
                                strString = Globals.myRequiredString(Globals.PrintInvNo , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString(Globals.PrintInvDate , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(0,10).toString() + "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString("Invoice Time" , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(11,19).toString() + "\n", "ST", 24, callbackPPT8555);

                                strString = Globals.myRequiredString(Globals.PrintDeviceID , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);

                                user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                strString = Globals.myRequiredString(Globals.PrintCashier , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString+ " : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);

                                if (orders.get_contact_code().equals("") || orders.get_contact_code().equals("0")) {

                                } else {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                    strString = Globals.myRequiredString("Customer", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (contact.get_gstin().length() > 0) {
                                        strString = Globals.myRequiredString("Customer GST No", strLength);
                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                    }
                                }

//                                if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {
//
//                                } else {
//                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
//                                    strString = Globals.myRequiredString("Customer", strLength);
//                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
//                                    if (contact.get_gstin().length() > 0) {
//                                        strString = Globals.myRequiredString("Customer GST No", strLength);
//                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
//
//                                    }
//                                }



                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                int count = 0;
                                Double itemFinalTax = 0d;
                                while (count < order_detail.size()) {
0.
                                    String strItemCode = order_detail.get(count).get_item_code();

                                    String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");

                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;
                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                    Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                    String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "         " + sale_price + "      " + line_total + "\n", "ST", 24, callbackPPT8555);
                                    String discnt = "";
                                    String disLbl = "";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                            discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                            disLbl = "Dis :";
                                        }
                                        if (disLbl.length() > 0) {
                                            strString = Globals.myRequiredString(disLbl, strLength);


                                            mIPosPrinterService.printSpecifiedTypeText(strString +":" +discnt + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.objsettings.get_HSN_print().equals("true")) {
                                        item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                    if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                        Tax_Master tax_master = null;
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                            itemFinalTax += valueFinal;
                                            strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                            mIPosPrinterService.printSpecifiedTypeText(strString + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);

                                        }
                                    }
                                    count++;
                                }
                                strLength = 12;

                                strString = Globals.myRequiredString("Total Item", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString("Item Qty", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                String subtotal = "";
                                String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                Cursor cursor1 = database.rawQuery(strTableQry, null);
                                Tax_Master tax_master;
                                while (cursor1.moveToNext()) {
                                    subtotal = cursor1.getString(0);
                                }

                                subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                                strString = Globals.myRequiredString("Subtotal", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + subtotal + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                int iTemp =0;
                                if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                    strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                            "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                            "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                    cursor1 = database.rawQuery(strTableQry, null);

                                    while (cursor1.moveToNext()) {
                                        iTemp +=1;
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                        String strPaymentName = Globals.myRequiredString(tax_master.get_tax_name(), strLength);
                                        strString = Globals.myRequiredString(strPaymentName, strLength);

                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    }
                                    if(iTemp > 0)
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }

                                String discount = "0";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                } else {
                                    discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        strString = Globals.myRequiredString("Discount", strLength);
                                        // mIPosPrinterService.printSpecifiedTypeText("Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + discount + "\n", "ST", 24, callbackPPT8555);
                                    }
                                }
                                String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                strString = Globals.myRequiredString("Total", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                String total_tax;
                                total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                if (Double.parseDouble(total_tax) > 0d) {
                                    strString = Globals.myRequiredString("Total Tax", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                    String name = "", value = "";
                                    if (cursor.moveToFirst()) {
                                        do {
                                            name = cursor.getString(0);
                                            value = cursor.getString(1);
                                            strString = Globals.myRequiredString(name, strLength);
                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        } while (cursor.moveToNext());
                                    }
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                strString = Globals.myRequiredString("Net Amt ", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                strString = Globals.myRequiredString("Tender", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                strString = Globals.myRequiredString("Change", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + change_amount + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);


                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objsettings.get_Footer_Text() + "\n", "ST", 24, 1, callbackPPT8555);

                                }


                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                //bitmapRecycle(bitmap);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            }

                            Globals.strContact_Name ="";
                            Globals.strContact_Code = "";

                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = "";
                            Globals.strOldCrAmt = "0";
                            Globals.setEmpty();
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }

                    }
                });
            } else {*/
                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            String strString = "";
                            int strLength = 14;
                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                String Print_type = "0";
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);

                                Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                if (bitmap != null) {
                                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                    bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                    bitmap = getResizedBitmap(bitmap, 80, 120);
                                    mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                }
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                if(Globals.objLPR.getShort_companyname().isEmpty()) {
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);

                                }
                                else{
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getShort_companyname() + "\n", "ST", 24, 1, callbackPPT8555);

                                }
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);

                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().equals("0")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().equals("0")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo + ":" + Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                }
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    //mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();

                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }
                                        strString = Globals.myRequiredString("Invoice Type", strLength);
                                        if (arrayList.contains("1") && arrayList.contains("5")) {

                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : Credit/Cash\n", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText(strString + " : Credit\n", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {
                                                mIPosPrinterService.printSpecifiedTypeText(strString + " : Cash\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                }
                                strString = Globals.myRequiredString(Globals.PrintInvNo , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString(Globals.PrintInvDate , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(0,11).toString() + "\n", "ST", 24, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString("Invoice Time", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(12, 20).toString() + "\n", "ST", 24, callbackPPT8555);

                                    strString = Globals.myRequiredString(Globals.PrintDeviceID, strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);

                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    strString = Globals.myRequiredString(Globals.PrintCashier, strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);

                                    if (orders.get_contact_code().equals("") || orders.get_contact_code().equals("0")) {

                                    } else {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                        strString = Globals.myRequiredString("Customer", strLength);
                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            strString = Globals.myRequiredString("Customer GSTIN", strLength);
                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                        }
                                    }


//                                if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {
//
//                                } else {
//                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
//                                    strString = Globals.myRequiredString("Customer", strLength);
//                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
//                                    if (contact.get_gstin().length() > 0) {
//                                        strString = Globals.myRequiredString("Customer GST No", strLength);
//                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
//
//                                    }
//                                }

                                }
                                if(Globals.strorderType.equals("")){


                                    if(orders.get_order_type_id().equals("5")) {
                                        Globals.strorderType="Dine-In";                                    }
                                    strString = Globals.myRequiredString("OrderType" , strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + Globals.strorderType + "\n", "ST", 24, callbackPPT8555);
                                }
                                else {
                                    strString = Globals.myRequiredString("OrderType", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.strorderType + "\n", "ST", 24, callbackPPT8555);
                                }
                                if( Globals.strorderType.equals("Dine-In")) {
                                    Table table = Table.getTable(getApplicationContext(), database, db, " WHERE table_code='" + orders.get_table_code() + "'");
                                    if(table!=null) {

                                        Globals.table_code = table.get_table_code();
                                        Globals.table_name = table.get_table_name();
                                        Globals.strZoneName = table.getZone_name();

                                    strString = Globals.myRequiredString("Table No", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.table_name + "\n", "ST", 24, callbackPPT8555);
                                    strString = Globals.myRequiredString("Zone", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.strZoneName + "\n", "ST", 24, callbackPPT8555);
                                } }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                int count = 0;
                                Double itemFinalTax = 0d;
                                while (count < order_detail.size()) {

                                    String strItemCode = order_detail.get(count).get_item_code();
                                    item = Item.getItem(getApplicationContext(),"where item_code ='"+ strItemCode+"'",database,db);
                                    String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");

                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;
                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);

                                    item=Item.getItem(getApplicationContext(),"WHERE item_code='"+ strItemCode +"' ",database,db);
                                    if(item!=null) {
                                        String ismodifier = item.getIs_modifier();
                                        if (ismodifier.equals("1")) {
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName +  "  (M)"+"\n", "ST", 24, callbackPPT8555);

                                        }
                                        else{
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName +  "\n", "ST", 24, callbackPPT8555);

                                        }
                                    }
                                    Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                    String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "         " + sale_price + "      " + line_total + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                        String discnt = "";
                                        String disLbl = "";

                                        String strHSNLbl = "", HSNValue = "", strLBlDis = "";
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            HSNValue = item.get_hsn_sac_code();
                                            strHSNLbl = "HSN Code :";

                                        }


                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                            strLBlDis = "";
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {

                                                if(item.get_is_inclusive_tax().equals("1")) {
                                                    double saleprice=Double.parseDouble(order_detail.get(count).get_sale_price())-Double.parseDouble(order_detail.get(count).get_tax());
                                                    Double dis =saleprice - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    strLBlDis = "Discount";
                                                }
                                                else{
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    strLBlDis = "Discount";
                                                }
                                            } else {
                                                strLBlDis = "";
                                            }

                                        }
                                        if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("false")) {

                                        } else if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("true")) {
                                            if(HSNValue!="") {
                                                strString = Globals.myRequiredString(strHSNLbl, strLength);
                                                mIPosPrinterService.printSpecifiedTypeText(strString + "         " + HSNValue+ "\n", "ST", 24, callbackPPT8555);

                                            }

                                        } else if (Globals.strIsDiscountPrint.equals("true") && Globals.objsettings.get_HSN_print().equals("false")) {
                                            String strdiscount;
                                            strLength = 23;
                                            if(discnt!="") {
                                                strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                                mIPosPrinterService.printSpecifiedTypeText(strdiscount + discnt + "\n", "ST", 24, callbackPPT8555);

                                                //mylist.add(strdiscount + discnt + "\n");
                                            }
                                        } else {
                                            // HSN Code : A34455  Discount :
                                            if(HSNValue!="" || discnt!="") {
                                                strLength=9;
                                                strString = Globals.myRequiredString(strHSNLbl, strLength);
                                                String strdiscount;

                                                strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                                mIPosPrinterService.printSpecifiedTypeText(strString + "" + HSNValue + "  " + strdiscount + ":" + discnt + "\n", "ST", 24, callbackPPT8555);

                                            }
                                        }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                          //  if(item.get_is_inclusive_tax().equals("0")) {
                                                Tax_Master tax_master = null;
                                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                    itemFinalTax += valueFinal;
                                                    strLength = 23;
                                                    strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                                    mIPosPrinterService.printSpecifiedTypeText(strString + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                }
                                           // }
                                        }

            /*                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis";
                                            }
                                            if (!discnt.equals("")) {
                                                strLength = 23;
                                                strString = Globals.myRequiredString(disLbl, strLength);

                                                mIPosPrinterService.printSpecifiedTypeText(strString + discnt + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            strLength = 24;
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                           if(!item.get_hsn_sac_code().equals("")) {
                                               strString = Globals.myRequiredString("HSN Code :", strLength);

                                               mIPosPrinterService.printSpecifiedTypeText(strString + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                           }
                                           }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                strLength = 23;
                                                strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                                mIPosPrinterService.printSpecifiedTypeText(strString + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }*/
                                    }
                                    count++;
                                }
                                strLength = 12;
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString("Total Item", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    strString = Globals.myRequiredString("Item Qty", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    strString = Globals.myRequiredString("Subtotal", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + subtotal + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    int iTemp = 0;
                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            iTemp += 1;
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            String strPaymentName = Globals.myRequiredString(tax_master.get_tax_name(), strLength);
                                            mIPosPrinterService.printSpecifiedTypeText(strPaymentName + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        if (iTemp > 0)
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        double disct=0d;
                                        if (Globals.strIsDenominationPrint.equals("true")) {
                                            disct = Globals.Denomination(Double.parseDouble(orders.get_total_discount() + ""), scale, decimal_check);
                                        }
                                        else{
                                            disct=Double.parseDouble(orders.get_total_discount() + "");
                                        }
                                        discount=String.valueOf(disct);
                                       // discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            strString = Globals.myRequiredString("Discount", strLength);
                                            // mIPosPrinterService.printSpecifiedTypeText("Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);


                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : " + discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal)) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    strString = Globals.myRequiredString("Total", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        strString = Globals.myRequiredString("Total Tax", strLength);
                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                      //  mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                strString = Globals.myRequiredString(name, strLength);
                                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }
                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                strString = Globals.myRequiredString("Net Amt ", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                strString = Globals.myRequiredString("Tender", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                strString = Globals.myRequiredString("Change", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + change_amount + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                if (order_payment_array.size() > 0) {
                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                        String name = "";
                                        if (payment != null) {
                                            name = payment.get_payment_name();
                                            strString = Globals.myRequiredString(name, strLength);
                                            mIPosPrinterService.printSpecifiedTypeText("\n"+strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check), "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("\n--------------------------------\n", "ST", 24, callbackPPT8555);
                                }


                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objsettings.get_Footer_Text() + "\n", "ST", 24, 1, callbackPPT8555);

                                }

                              //  mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                //bitmapRecycle(bitmap);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            }

                            Globals.strContact_Name ="";
                            Globals.strContact_Code = "";

                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = 0;
                            Globals.strOldCrAmt = "0";
                            Globals.strorderType="";
                            Globals.table_name="";
                            Globals.strZoneName="";
                            Globals.setEmpty();
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }

                    }
                });
           // }
        } else if (Globals.objsettings.get_Print_Lang().equals("1")) {
   /*         if (Globals.objsettings.get_Print_Memo().equals("1")) {
                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            String strString = "";
                            int strLength = 12;
                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                String Print_type = "0";
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);


                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                                try {
                                    if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().equals("0")) {
                                    } else {
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                        // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                } catch (Exception ex) {
                                }
                                if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().equals("0")) {
                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo + ":" + Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                //mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                ArrayList<String> arrayList = new ArrayList<String>();
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (order_payment_array.size() > 0) {

                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        arrayList.add(order_payment_array.get(i).get_payment_id());
                                    }
                                    strString = Globals.myRequiredString("Invoice Type" , strLength);
                                    if (arrayList.contains("1") && arrayList.contains("5")) {

                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : Credit/Cash\n", "ST", 24, callbackPPT8555);
                                    } else {
                                        if (arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : Credit\n", "ST", 24, callbackPPT8555);
                                        } else if (arrayList.contains("1")) {
                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : Cash\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                }

                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (Globals.strIsBarcodePrint.equals("true")) {
                                    mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                }
                                strString = Globals.myRequiredString(Globals.PrintInvNo , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString(Globals.PrintInvDate , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(0,10).toString() + "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString("Invoice Time" , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(11,19).toString() + "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString(Globals.PrintDeviceID , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);

                                user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                strString = Globals.myRequiredString(Globals.PrintCashier , strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString+ " : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);

                                if (orders.get_contact_code().equals("") || orders.get_contact_code().equals("0")) {

                                } else {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                    strString = Globals.myRequiredString("Customer", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (contact.get_gstin().length() > 0) {
                                        strString = Globals.myRequiredString("Customer GST No", strLength);
                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                    }
                                }

//                                if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {
//
//                                } else {
//                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
//                                    strString = Globals.myRequiredString("Customer", strLength);
//                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
//                                    if (contact.get_gstin().length() > 0) {
//                                        strString = Globals.myRequiredString("Customer GST No", strLength);
//                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
//
//                                    }
//                                }



                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                int count = 0;
                                Double itemFinalTax = 0d;
                                while (count < order_detail.size()) {

                                    String strItemCode = order_detail.get(count).get_item_code();

                                    String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");

                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;
                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                    Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                    String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "         " + sale_price + "      " + line_total + "\n", "ST", 24, callbackPPT8555);
                                    String discnt = "";
                                    String disLbl = "";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                            discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                            disLbl = "Dis :";
                                        }
                                        if (disLbl.length() > 0) {
                                            mIPosPrinterService.printSpecifiedTypeText(disLbl + discnt + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.objsettings.get_HSN_print().equals("true")) {
                                        item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                    if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                        Tax_Master tax_master = null;
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                            itemFinalTax += valueFinal;
                                            strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                            mIPosPrinterService.printSpecifiedTypeText(strString + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    count++;
                                }
                                strLength = 12;
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                strString = Globals.myRequiredString("Total Item", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString("Item Qty", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                String subtotal = "";
                                String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                Cursor cursor1 = database.rawQuery(strTableQry, null);
                                Tax_Master tax_master;
                                while (cursor1.moveToNext()) {
                                    subtotal = cursor1.getString(0);
                                }

                                subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                                strString = Globals.myRequiredString("Subtotal", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + subtotal + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                int iTemp =0;
                                if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                    strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                            "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                            "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                    cursor1 = database.rawQuery(strTableQry, null);

                                    while (cursor1.moveToNext()) {
                                        iTemp +=1;
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                        String strPaymentName = Globals.myRequiredString(tax_master.get_tax_name(), strLength);
                                        strString = Globals.myRequiredString(strPaymentName, strLength);

                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    }
                                    if(iTemp > 0)
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }

                                String discount = "0";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                } else {
                                    discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        strString = Globals.myRequiredString("Discount", strLength);
                                        // mIPosPrinterService.printSpecifiedTypeText("Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + discount + "\n", "ST", 24, callbackPPT8555);
                                    }
                                }
                                String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                strString = Globals.myRequiredString("Total", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                String total_tax;
                                total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                if (Double.parseDouble(total_tax) > 0d) {
                                    strString = Globals.myRequiredString("Total Tax", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                    String name = "", value = "";
                                    if (cursor.moveToFirst()) {
                                        do {
                                            name = cursor.getString(0);
                                            value = cursor.getString(1);
                                            strString = Globals.myRequiredString(name, strLength);
                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        } while (cursor.moveToNext());
                                    }
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                strString = Globals.myRequiredString("Net Amt ", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                strString = Globals.myRequiredString("Tender", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                strString = Globals.myRequiredString("Change", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + change_amount + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);


                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objsettings.get_Footer_Text() + "\n", "ST", 24, 1, callbackPPT8555);

                                }


                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                //bitmapRecycle(bitmap);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            }

                            Globals.strContact_Name ="";
                            Globals.strContact_Code = "";

                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = "";
                            Globals.strOldCrAmt = "0";
                            Globals.setEmpty();
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }

                    }
                });
            } else {*/
                // For Both
                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            String strString = "";
                            int strLength = 14;
                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                String strPOSNo = "لحم.";
                                String strGSTNo = Globals.GSTLbl;
                                String strOrderNum = "رقم الطلب" ;
                                String strOrderDate = "تاريخ الطلب" ;
                                String strCashier = "أمين الصندوق" ;
                                String Print_type = "0";
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                if (bitmap != null) {
                                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                    bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                    bitmap = getResizedBitmap(bitmap, 80, 120);
                                    mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                }

                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);

                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(strGSTNo, "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                }
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();

                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }
                                        strString = Globals.myRequiredString("نوع الفاتورة", strLength);

                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText(strString + ": الائتمان / النقدية", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {

                                                mIPosPrinterService.printSpecifiedTypeText(strString + ": الائتمان / النقدية", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {

                                                mIPosPrinterService.printSpecifiedTypeText(strString + ": النقدية", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                }
                               /* strString = Globals.myRequiredString(strOrderNum, strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString  + " : " +"\n", "ST", 24, callbackPPT8555);*/
                                strString = Globals.myRequiredString("رقم الفاتورة" , strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString + " : "  +strOrderNo+ "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString(strOrderDate, strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString + " : "+DateUtill.PaternDate1(orders.get_order_date()).substring(0,11) + "\n" , "ST", 24, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString("وقت الفاتورة", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(12, 20) + "\n", "ST", 24, callbackPPT8555);
                                    //   mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                    strString = Globals.myRequiredString("معرف الجهاز", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    strString = Globals.myRequiredString(strCashier, strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myRequiredString(user.get_name(), strLength) + "\n", "ST", 24, callbackPPT8555);
                                    //strString = Globals.myRequiredString(user.get_name(), strLength);

                                    //  mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        strString = Globals.myRequiredString(contact.get_name(), strLength);

                                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } else {
                                        if (orders.get_contact_code().equals("") || orders.get_contact_code().equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                            strString = Globals.myRequiredString(contact.get_name(), strLength);

                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : " + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Customer GSTIN. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }
                                }

                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("الكمية       السعر       مجموع\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                int count = 0;
                                Double itemFinalTax = 0d;
                                while (count < order_detail.size()) {

                                    String strItemCode = order_detail.get(count).get_item_code();
// need to update code here if it sav in arabic


                                    String strItemName = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");


                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;
                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                    item=Item.getItem(getApplicationContext(),"WHERE item_code='"+ strItemCode +"' ",database,db);
                                    if(item!=null) {
                                        String ismodifier = item.getIs_modifier();
                                        if (ismodifier.equals("1")) {

                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + " (M)" + "\n", "ST", 24, callbackPPT8555);

                                        }
                                        else{
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                        }
                                    }
                                    Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                    String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "       " + sale_price + "       " + line_total + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.objsettings.get_Print_Memo().equals("0")) {

                                        String discnt = "";
                                        String disLbl = "";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            strLength = 23;
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis ";
                                            }
                                            if(!discnt.equals("")) {
                                                strString = Globals.myRequiredString(disLbl, strLength);

                                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            strLength = 24;
                                            if(!item.get_hsn_sac_code().equals("")) {
                                                strString = Globals.myRequiredString("HSN Code", strLength);

                                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                             }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);
                                                strLength = 23;
                                                mIPosPrinterService.printSpecifiedTypeText(strString + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }
                                    count++;
                                }
                                strLength=14;
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString("مجموع البند", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + " :" + orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    //   mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    strString = Globals.myRequiredString("البند الكمية", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + " :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    // mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    strString = Globals.myRequiredString("المجموع الفرعي", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + " :" + subtotal + "\n", "ST", 24, callbackPPT8555);
                                    // mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);
                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);

                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            strString = Globals.myRequiredString("خصم", strLength);

                                            mIPosPrinterService.printSpecifiedTypeText(strString + " :" + discount + "\n", "ST", 24, callbackPPT8555);
                                            // mIPosPrinterService.printSpecifiedTypeText(discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    strString = Globals.myRequiredString("مجموع", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + " :" + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    //  mIPosPrinterService.printSpecifiedTypeText(tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        strString = Globals.myRequiredString("مجموع الضريبة", strLength);

                                        mIPosPrinterService.printSpecifiedTypeText(strString + " :" + total_tax + "\n", "ST", 24, callbackPPT8555);
                                        //  mIPosPrinterService.printSpecifiedTypeText(total_tax + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                strString = Globals.myRequiredString(name, strLength);

                                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }
                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                strString = Globals.myRequiredString("ليس مكتب", strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString + " :" + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                //   mIPosPrinterService.printSpecifiedTypeText(net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                strString = Globals.myRequiredString("مناقصة", strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString + " :" + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                //   mIPosPrinterService.printSpecifiedTypeText(tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                strString = Globals.myRequiredString("يتغيرون", strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString + " :" + change_amount + "\n", "ST", 24, callbackPPT8555);
                                // mIPosPrinterService.printSpecifiedTypeText(change_amount + "\n", "ST", 24, callbackPPT8555);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    if (order_payment_array.size() > 0) {
                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                            String name = "";
                                            if (payment != null) {


                                                name = payment.get_payment_name();
                                                strString = Globals.myRequiredString(name, strLength);
                                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check), "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("\n--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

          /*                      if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                    if (ck_project_type.equals("standalone")) {
                                        JSONObject jsonObject = new JSONObject();
                                        if (Globals.strContact_Code.equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                        } else {
                                            Double showAmount = 0d;
//
                                            try {
                                                String strCreditAmt = "", strDeditAmount = "";
                                                Double creditAmount = 0d,
                                                        debitAmount = 0d;
                                                Cursor cursor = null;

                                                String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                cursor = database.rawQuery(strQry1, null);
                                                while (cursor.moveToNext()) {
                                                    strCreditAmt = cursor.getString(0);

                                                }
                                                creditAmount = Double.parseDouble(strCreditAmt);

                                                String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                cursor = database.rawQuery(strQry2, null);
                                                while (cursor.moveToNext()) {
                                                    strDeditAmount = cursor.getString(0);

                                                }
                                                debitAmount = Double.parseDouble(strDeditAmount);
                                                showAmount = debitAmount + creditAmount;
                                            } catch (Exception ex) {
                                            }
                                            double abs1 = Math.abs(showAmount);
                                            if (showAmount > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                            }
                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {

                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = cursor1.getString(0);

                                                }
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }
                                            Double strBalance = abs1 - Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        }
                                    } else {

                                        JSONObject jsonObject = new JSONObject();

                                        if (Globals.strContact_Code.equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                        } else {
                                            String curAmount = "";
                                            try {
                                                strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);
                                                if (cursor1.moveToFirst()) {
                                                    do {
                                                        curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    } while (cursor1.moveToNext());
                                                }
                                            } catch (Exception ex) {
                                                curAmount = "0";
                                            }
                                            double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                            double abs1 = Math.abs(ab);
                                            if (ab > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {
                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                }

                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                            }
                                            if (strCur.equals("")) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }

                                            Double strBalance = ab + Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                }*/

                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.objsettings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                }

                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                             mIPosPrinterService.PrintSpecFormatText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24,1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                bitmapRecycle(bitmap);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            }
                            Globals.strContact_Code = "";
                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = 0;
                            Globals.strOldCrAmt = "0";
                            Globals.setEmpty();
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                });

        } else {
   /*         if (Globals.objsettings.get_Print_Memo().equals("1")) {
                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                            String Print_type = "0";

                            mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("Order : " + orders.get_order_code() + "\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                            if (orders.get_table_code().equals("")) {
                            } else {
                                mIPosPrinterService.printSpecifiedTypeText("Table : " + orders.get_table_code(), "ST", 24, callbackPPT8555);
                            }

                            ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                            if (order_detail.size() > 0) {
                                Double total = 0d;

                                mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                for (int i = 0; i < order_detail.size(); i++) {
                                    total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                    Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                    mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8) + "X" + order_detail.get(i).get_quantity() + "     " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check), "ST", 24, callbackPPT8555);

                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Total Amount : " + Globals.myNumberFormat2Price(total, decimal_check), "ST", 24, callbackPPT8555);
                            }

                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } else {*/
                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            String strString = "";
                            int strLength = 14;
                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                String strPOSNo = "Device ID/لحم." + " ";
                                String strGSTNo = Globals.GSTLbl + " ";
                                String strOrderNum = "Invoice Number/رقم الطلب" + "  ";
                                String strOrderDate = "Invoice Date/تاريخ الطلب" + "  ";
                                String strCashier = "Salesperson/أمين الصندوق" + " ";
                                String Print_type = "0";
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                if (bitmap != null) {
                                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                    bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                    bitmap = getResizedBitmap(bitmap, 80, 120);
                                    mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                }

                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {

                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(strGSTNo, "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                }
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();

                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }

                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: النقدية\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                }
                                mIPosPrinterService.printSpecifiedTypeText(strOrderNum + "\n", "ST", 24, callbackPPT8555);

                                mIPosPrinterService.printSpecifiedTypeText(strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                strString = Globals.myRequiredString(strOrderDate, strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()).substring(0,11) + "\n", "ST", 24, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString("Invoice Tiime/وقت الفاتورة", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + "\n", "ST", 24, callbackPPT8555);

                                    mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()).substring(12, 20) + "\n", "ST", 24, callbackPPT8555);
                                    strString = Globals.myRequiredString("Device ID/معرف الجهاز", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);

                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    mIPosPrinterService.printSpecifiedTypeText(strCashier + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        strString = Globals.myRequiredString("Customer/زبون", strLength);

                                        mIPosPrinterService.printSpecifiedTypeText(strString + "\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            strString = Globals.myRequiredString("Customer GSTIN/رقم GSTIN للعميل\n", strLength);

                                            mIPosPrinterService.printSpecifiedTypeText(strString + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } else {
                                        if (orders.get_contact_code().equals("") || orders.get_contact_code().equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                            strString = Globals.myRequiredString("Customer/زبون", strLength);

                                            mIPosPrinterService.printSpecifiedTypeText(strString + "\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                strString = Globals.myRequiredString("Customer GSTIN/رقم GSTIN للعميل\n", strLength);

                                                mIPosPrinterService.printSpecifiedTypeText(strString + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Qty       Price        Total", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText(" الكمية       السعر       مجموع", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                int count = 0;
                                Double itemFinalTax = 0d;
                                while (count < order_detail.size()) {

                                    String strItemCode = order_detail.get(count).get_item_code();

                                    String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");
                                    String strItemName_l = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");

                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;
                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);

                                    item=Item.getItem(getApplicationContext(),"WHERE item_code='"+ strItemCode +"' ",database,db);
                                    if(item!=null) {
                                        String ismodifier = item.getIs_modifier();
                                        if (ismodifier.equals("1")) {

                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + " (M)" +"\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName_l + " (M)" +"\n", "ST", 24, callbackPPT8555);

                                        }

                                        else{
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName_l + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                    String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "         " + sale_price + "      " + line_total + "\n", "ST", 24, callbackPPT8555);

                                    //mIPosPrinterService.printSpecifiedTypeText(line_total + "         " + sale_price + "      " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                        String discnt = "";
                                        String disLbl = "";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis ";
                                            }
                                            if(!discnt.equals("")) {
                                                strString = Globals.myRequiredString(disLbl, strLength);

                                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            if(!item.get_hsn_sac_code().equals("")) {
                                                strString = Globals.myRequiredString("HSN Code :", strLength);
                                                mIPosPrinterService.printSpecifiedTypeText(strString + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                                mIPosPrinterService.printSpecifiedTypeText(strString + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }
                                    count++;
                                }

                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString("Total Item/مجموع البند:", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    strString = Globals.myRequiredString("Item Quantity/البند الكمية:", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    strString = Globals.myRequiredString("Subtotal/المجموع الفرعي:", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString, "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                            mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);

                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            //  mIPosPrinterService.printSpecifiedTypeText("Discount/خصم :" + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                            strString = Globals.myRequiredString("Discount/خصم :", strLength);

                                            mIPosPrinterService.printSpecifiedTypeText(strString + discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";

                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    strString = Globals.myRequiredString("Total/مجموع :", strLength);

                                    mIPosPrinterService.printSpecifiedTypeText(strString + "\n" + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    //mIPosPrinterService.printSpecifiedTypeText(tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        strString = Globals.myRequiredString("Total Tax/مجموع الضريبة :", strLength);

                                        mIPosPrinterService.printSpecifiedTypeText(strString + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(total_tax + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                strString = Globals.myRequiredString(name, strLength);

                                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }
                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                strString = Globals.myRequiredString("Net Amt/ليس مكتب :", strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString+"\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText(net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                strString = Globals.myRequiredString("Tender/مناقصة :", strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString+"\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText(tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                strString = Globals.myRequiredString("Change/يتغيرون :", strLength);

                                mIPosPrinterService.printSpecifiedTypeText(strString+"\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText(change_amount + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    strString = Globals.myRequiredString(name, strLength);

                                                    mIPosPrinterService.printSpecifiedTypeText( "\n"+strString+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check), "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("\n--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }
                               /* if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                    if (ck_project_type.equals("standalone")) {
                                        JSONObject jsonObject = new JSONObject();
                                        if (Globals.strContact_Code.equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                        } else {
                                            Double showAmount = 0d;
//
                                            try {
                                                String strCreditAmt = "", strDeditAmount = "";
                                                Double creditAmount = 0d,
                                                        debitAmount = 0d;
                                                Cursor cursor = null;

                                                String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                cursor = database.rawQuery(strQry1, null);
                                                while (cursor.moveToNext()) {
                                                    strCreditAmt = cursor.getString(0);

                                                }
                                                creditAmount = Double.parseDouble(strCreditAmt);

                                                String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                cursor = database.rawQuery(strQry2, null);
                                                while (cursor.moveToNext()) {
                                                    strDeditAmount = cursor.getString(0);

                                                }
                                                debitAmount = Double.parseDouble(strDeditAmount);
                                                showAmount = debitAmount + creditAmount;
                                            } catch (Exception ex) {
                                            }
                                            double abs1 = Math.abs(showAmount);
                                            if (showAmount > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                            }
                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {

                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = cursor1.getString(0);

                                                }
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }
                                            Double strBalance = abs1 - Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        }
                                    } else {

                                        JSONObject jsonObject = new JSONObject();

                                        if (Globals.strContact_Code.equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                        } else {
                                            String curAmount = "";
                                            try {
                                                strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);
                                                if (cursor1.moveToFirst()) {
                                                    do {
                                                        curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    } while (cursor1.moveToNext());
                                                }
                                            } catch (Exception ex) {
                                                curAmount = "0";
                                            }
                                            double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                            double abs1 = Math.abs(ab);
                                            if (ab > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {
                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                }

                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                            }
                                            if (strCur.equals("")) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }

                                            Double strBalance = ab + Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                }*/

                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.objsettings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, 1,callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                bitmapRecycle(bitmap);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            }
                            Globals.strContact_Code = "";
                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = 0;
                            Globals.strOldCrAmt = "0";
                            Globals.setEmpty();
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }

                    }
                });
            }



    }


    private void ppt8555_old(final Orders orders, final ArrayList<Order_Detail> order_detail) {

        // Check Decimal
        // Check Language
        // Check Type


        //
        if (decimal_check.equals("2")) {
            if (Globals.objsettings.get_Print_Lang().equals("0")) {
                // English
                if (Globals.objsettings.get_Print_Memo().equals("1")) {
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                String Print_type = "0";

                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Order : " + orders.get_order_code() + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                if (orders.get_table_code().equals("")) {
                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText("Table : " + orders.get_table_code(), "ST", 24, callbackPPT8555);
                                }

                                ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                if (order_detail.size() > 0) {
                                    Double total = 0d;

                                    mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    for (int i = 0; i < order_detail.size(); i++) {
                                        total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                        Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8) + "X" + order_detail.get(i).get_quantity() + "     " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check), "ST", 24, callbackPPT8555);

                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Amount : " + Globals.myNumberFormat2Price(total, decimal_check), "ST", 24, callbackPPT8555);
                                }

                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } else {
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                    String Print_type = "0";
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                    if (bitmap != null) {
                                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                        bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                        bitmap = getResizedBitmap(bitmap, 80, 120);
                                        mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo + ":" + Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    //mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }

                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit\n", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvNo + " : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvDate + " : " + DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintCashier + " : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } else {
                                        if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                            mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                            }
                                        }
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    int count = 0;
                                    Double itemFinalTax = 0d;
                                    while (count < order_detail.size()) {

                                        String strItemCode = order_detail.get(count).get_item_code();

                                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");

                                        String sale_price;
                                        Double dDisAfterSalePrice = 0d;
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                        String line_total;
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                        Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                        String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "         " + sale_price + "      " + line_total + "\n", "ST", 24, callbackPPT8555);
                                        String discnt = "";
                                        String disLbl = "";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis :";
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText(disLbl + " : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        count++;
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Item       :" + orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Quantity    :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText("Subtotal      :" + subtotal + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("Discount : " + discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Total : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        mIPosPrinterService.printSpecifiedTypeText("Total Tax : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                mIPosPrinterService.printSpecifiedTypeText(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    String net_amount;
                                    net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                    String strCurrency;
                                    if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                        strCurrency = "";
                                    } else {
                                        strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("Net Amt : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String tender;
                                    tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Tender  : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String change_amount;
                                    change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Change  : " + change_amount + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                      order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                    if (false) {
                                        if (ck_project_type.equals("standalone")) {
                                            JSONObject jsonObject = new JSONObject();
                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                Double showAmount = 0d;
//
                                                try {
                                                    String strCreditAmt = "", strDeditAmount = "";
                                                    Double creditAmount = 0d,
                                                            debitAmount = 0d;
                                                    Cursor cursor = null;

                                                    String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                    cursor = database.rawQuery(strQry1, null);
                                                    while (cursor.moveToNext()) {
                                                        strCreditAmt = cursor.getString(0);

                                                    }
                                                    creditAmount = Double.parseDouble(strCreditAmt);

                                                    String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                    cursor = database.rawQuery(strQry2, null);
                                                    while (cursor.moveToNext()) {
                                                        strDeditAmount = cursor.getString(0);

                                                    }
                                                    debitAmount = Double.parseDouble(strDeditAmount);
                                                    showAmount = debitAmount + creditAmount;
                                                } catch (Exception ex) {
                                                }
                                                double abs1 = Math.abs(showAmount);
                                                if (showAmount > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                }
                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {

                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = cursor1.getString(0);

                                                    }
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }
                                                Double strBalance = abs1 - Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                            }
                                        } else {

                                            JSONObject jsonObject = new JSONObject();

                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                String curAmount = "";
                                                try {
                                                    strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        } while (cursor1.moveToNext());
                                                    }
                                                } catch (Exception ex) {
                                                    curAmount = "0";
                                                }
                                                double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                double abs1 = Math.abs(ab);
                                                if (ab > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {
                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    }

                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }
                                                if (strCur.equals("")) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }

                                                Double strBalance = ab + Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objsettings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    bitmapRecycle(bitmap);
                                    mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                                }
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.setEmpty();
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }

                        }
                    });
                }
            } else if (Globals.objsettings.get_Print_Lang().equals("1")) {
                if (Globals.objsettings.get_Print_Memo().equals("1")) {
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                String Print_type = "0";

                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("Order : " + orders.get_order_code() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                if (orders.get_table_code().equals("")) {
                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText("Table : " + orders.get_table_code(), "ST", 24, callbackPPT8555);
                                }

                                ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                if (order_detail.size() > 0) {
                                    Double total = 0d;

                                    mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    for (int i = 0; i < order_detail.size(); i++) {
                                        total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                        Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8) + "X" + order_detail.get(i).get_quantity() + "     " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check), "ST", 24, callbackPPT8555);

                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Amount : " + Globals.myNumberFormat2Price(total, decimal_check), "ST", 24, callbackPPT8555);
                                }

                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } else {
                    // For Both
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                    String strPOSNo = "لحم." + " ";
                                    String strGSTNo = Globals.GSTLbl + " ";
                                    String strOrderNum = "رقم الطلب" + "  ";
                                    String strOrderDate = "تاريخ الطلب" + "  ";
                                    String strCashier = "أمين الصندوق" + " ";
                                    String Print_type = "0";
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                    if (bitmap != null) {
                                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                        bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                        bitmap = getResizedBitmap(bitmap, 80, 120);
                                        mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);

                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            //  mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(strGSTNo, "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }

                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {

                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {

                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: النقدية\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText(strOrderNum + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(strOrderDate + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    mIPosPrinterService.printSpecifiedTypeText(strCashier + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } else {
                                        if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                            mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("الكمية       السعر       مجموع", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    int count = 0;
                                    Double itemFinalTax = 0d;
                                    while (count < order_detail.size()) {

                                        String strItemCode = order_detail.get(count).get_item_code();
// need to update code here if it sav in arabic


                                        String strItemName = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");


                                        String sale_price;
                                        Double dDisAfterSalePrice = 0d;
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                        String line_total;
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                        Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                        String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText(line_total + "         " + sale_price + "      " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String discnt = "";
                                        String disLbl = "";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis :";
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText(disLbl + " : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        count++;
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("مجموع البند:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("البند الكمية:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText("المجموع الفرعي:", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            mIPosPrinterService.printSpecifiedTypeText("خصم" + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("مجموع:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        mIPosPrinterService.printSpecifiedTypeText("مجموع الضريبة:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(total_tax + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                mIPosPrinterService.printSpecifiedTypeText(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    String net_amount;
                                    net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                    String strCurrency;
                                    if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                        strCurrency = "";
                                    } else {
                                        strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("ليس مكتب:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String tender;
                                    tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("مناقصة:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String change_amount;
                                    change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("يتغيرون:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(change_amount + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    if (order_payment_array.size() > 0) {
                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                            String name = "";
                                            if (payment != null) {
                                                name = payment.get_payment_name();
                                                mIPosPrinterService.printSpecifiedTypeText(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

                                    if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                        if (ck_project_type.equals("standalone")) {
                                            JSONObject jsonObject = new JSONObject();
                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                Double showAmount = 0d;
//
                                                try {
                                                    String strCreditAmt = "", strDeditAmount = "";
                                                    Double creditAmount = 0d,
                                                            debitAmount = 0d;
                                                    Cursor cursor = null;

                                                    String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                    cursor = database.rawQuery(strQry1, null);
                                                    while (cursor.moveToNext()) {
                                                        strCreditAmt = cursor.getString(0);

                                                    }
                                                    creditAmount = Double.parseDouble(strCreditAmt);

                                                    String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                    cursor = database.rawQuery(strQry2, null);
                                                    while (cursor.moveToNext()) {
                                                        strDeditAmount = cursor.getString(0);

                                                    }
                                                    debitAmount = Double.parseDouble(strDeditAmount);
                                                    showAmount = debitAmount + creditAmount;
                                                } catch (Exception ex) {
                                                }
                                                double abs1 = Math.abs(showAmount);
                                                if (showAmount > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                }
                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {

                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = cursor1.getString(0);

                                                    }
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }
                                                Double strBalance = abs1 - Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                            }
                                        } else {

                                            JSONObject jsonObject = new JSONObject();

                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                String curAmount = "";
                                                try {
                                                    strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        } while (cursor1.moveToNext());
                                                    }
                                                } catch (Exception ex) {
                                                    curAmount = "0";
                                                }
                                                double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                double abs1 = Math.abs(ab);
                                                if (ab > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {
                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    }

                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }
                                                if (strCur.equals("")) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }

                                                Double strBalance = ab + Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objsettings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    bitmapRecycle(bitmap);
                                    mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                                }
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.setEmpty();
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                }
            } else {
                if (Globals.objsettings.get_Print_Memo().equals("1")) {
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                String Print_type = "0";

                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Order : " + orders.get_order_code() + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                if (orders.get_table_code().equals("")) {
                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText("Table : " + orders.get_table_code(), "ST", 24, callbackPPT8555);
                                }

                                ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                if (order_detail.size() > 0) {
                                    Double total = 0d;

                                    mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    for (int i = 0; i < order_detail.size(); i++) {
                                        total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                        Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8) + "X" + order_detail.get(i).get_quantity() + "     " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check), "ST", 24, callbackPPT8555);

                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Amount : " + Globals.myNumberFormat2Price(total, decimal_check), "ST", 24, callbackPPT8555);
                                }

                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } else {
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                    String strPOSNo = "Device ID/لحم." + " ";
                                    String strGSTNo = Globals.GSTLbl + " ";
                                    String strOrderNum = "Invoice Number/رقم الطلب" + "  ";
                                    String strOrderDate = "Invoice Date/تاريخ الطلب" + "  ";
                                    String strCashier = "Salesperson/أمين الصندوق" + " ";
                                    String Print_type = "0";
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                    if (bitmap != null) {
                                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                        bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                        bitmap = getResizedBitmap(bitmap, 80, 120);
                                        mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(strGSTNo, "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }

                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: النقدية\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText(strOrderNum + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(strOrderDate + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    mIPosPrinterService.printSpecifiedTypeText(strCashier + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        mIPosPrinterService.printSpecifiedTypeText("Customer/زبون\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } else {
                                        if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                            mIPosPrinterService.printSpecifiedTypeText("Customer/زبون\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total       Price        Qty\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("الكمية       السعر       مجموع", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    int count = 0;
                                    Double itemFinalTax = 0d;
                                    while (count < order_detail.size()) {

                                        String strItemCode = order_detail.get(count).get_item_code();

                                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");
                                        String strItemName_l = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");

                                        String sale_price;
                                        Double dDisAfterSalePrice = 0d;
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                        String line_total;
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strItemName_l + "\n", "ST", 24, callbackPPT8555);

                                        Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                        String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText(line_total + "         " + sale_price + "      " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String discnt = "";
                                        String disLbl = "";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis :";
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText(disLbl + " : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        count++;
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Item/مجموع البند:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Quantity/البند الكمية:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText("Subtotal/المجموع الفرعي:", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Discount/خصم" + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Total/مجموع:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        mIPosPrinterService.printSpecifiedTypeText("Total Tax/مجموع الضريبة:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(total_tax + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                mIPosPrinterService.printSpecifiedTypeText(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    String net_amount;
                                    net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                    String strCurrency;
                                    if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                        strCurrency = "";
                                    } else {
                                        strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("Net Amt/ليس مكتب:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String tender;
                                    tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Tender/مناقصة:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String change_amount;
                                    change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Change/يتغيرون:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(change_amount + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                     order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }
                                    if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                        if (ck_project_type.equals("standalone")) {
                                            JSONObject jsonObject = new JSONObject();
                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                Double showAmount = 0d;
//
                                                try {
                                                    String strCreditAmt = "", strDeditAmount = "";
                                                    Double creditAmount = 0d,
                                                            debitAmount = 0d;
                                                    Cursor cursor = null;

                                                    String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                    cursor = database.rawQuery(strQry1, null);
                                                    while (cursor.moveToNext()) {
                                                        strCreditAmt = cursor.getString(0);

                                                    }
                                                    creditAmount = Double.parseDouble(strCreditAmt);

                                                    String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                    cursor = database.rawQuery(strQry2, null);
                                                    while (cursor.moveToNext()) {
                                                        strDeditAmount = cursor.getString(0);

                                                    }
                                                    debitAmount = Double.parseDouble(strDeditAmount);
                                                    showAmount = debitAmount + creditAmount;
                                                } catch (Exception ex) {
                                                }
                                                double abs1 = Math.abs(showAmount);
                                                if (showAmount > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                }
                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {

                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = cursor1.getString(0);

                                                    }
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }
                                                Double strBalance = abs1 - Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                            }
                                        } else {

                                            JSONObject jsonObject = new JSONObject();

                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                String curAmount = "";
                                                try {
                                                    strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        } while (cursor1.moveToNext());
                                                    }
                                                } catch (Exception ex) {
                                                    curAmount = "0";
                                                }
                                                double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                double abs1 = Math.abs(ab);
                                                if (ab > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {
                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    }

                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }
                                                if (strCur.equals("")) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }

                                                Double strBalance = ab + Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objsettings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    bitmapRecycle(bitmap);
                                    mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                                }
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.setEmpty();
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }

                        }
                    });
                }
            }


        } else {
            if (Globals.objsettings.get_Print_Lang().equals("0")) {
                // English
                if (Globals.objsettings.get_Print_Memo().equals("1")) {

                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                    String Print_type = "0";
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                    if (bitmap != null) {
                                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                        bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                        bitmap = getResizedBitmap(bitmap, 80, 120);
                                        mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo + ":" + Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    //  mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }

                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit\n", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvNo + " : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvDate + " : " + DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintCashier + " : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } else {
                                        if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                            mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                            }
                                        }
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    int count = 0;
                                    Double itemFinalTax = 0d;
                                    while (count < order_detail.size()) {

                                        String strItemCode = order_detail.get(count).get_item_code();
                                        String sale_price;
                                        Double dDisAfterSalePrice = 0d;
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                        String line_total;
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                              /*          if (settings.get_Print_Lang().equals("0")) {
                                            String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");

                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                        } else if (settings.get_Print_Lang().equals("1")) {
                                            String strItemName = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");

                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);


                                        } else {
                                            String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");

                                            String strItemName_l = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                        }*/
                                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");
                                        mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                        Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                        String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "         " + sale_price + "    " + line_total + "\n", "ST", 24, callbackPPT8555);
                                        String discnt = "";
                                        String disLbl = "";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis :";
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText(disLbl + " : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        count++;
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Item :" + orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Quantity :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText("Subtotal :" + subtotal + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("Discount : " + discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Total : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        mIPosPrinterService.printSpecifiedTypeText("Total Tax : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                mIPosPrinterService.printSpecifiedTypeText(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    String net_amount;
                                    net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                    String strCurrency;
                                    if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                        strCurrency = "";
                                    } else {
                                        strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("Net Amt : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String tender;
                                    tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Tender : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String change_amount;
                                    change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Change : " + change_amount + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                if (order_payment_array.size() > 0) {
                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                        String name = "";
                                        if (payment != null) {
                                            name = payment.get_payment_name();
                                            mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }

                                    if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                        if (ck_project_type.equals("standalone")) {
                                            JSONObject jsonObject = new JSONObject();
                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                Double showAmount = 0d;
//
                                                try {
                                                    String strCreditAmt = "", strDeditAmount = "";
                                                    Double creditAmount = 0d,
                                                            debitAmount = 0d;
                                                    Cursor cursor = null;

                                                    String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                    cursor = database.rawQuery(strQry1, null);
                                                    while (cursor.moveToNext()) {
                                                        strCreditAmt = cursor.getString(0);

                                                    }
                                                    creditAmount = Double.parseDouble(strCreditAmt);

                                                    String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                    cursor = database.rawQuery(strQry2, null);
                                                    while (cursor.moveToNext()) {
                                                        strDeditAmount = cursor.getString(0);

                                                    }
                                                    debitAmount = Double.parseDouble(strDeditAmount);
                                                    showAmount = debitAmount + creditAmount;
                                                } catch (Exception ex) {
                                                }
                                                double abs1 = Math.abs(showAmount);
                                                if (showAmount > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                }
                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {

                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = cursor1.getString(0);

                                                    }
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }
                                                Double strBalance = abs1 - Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                            }
                                        } else {

                                            JSONObject jsonObject = new JSONObject();

                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                String curAmount = "";
                                                try {
                                                    strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        } while (cursor1.moveToNext());
                                                    }
                                                } catch (Exception ex) {
                                                    curAmount = "0";
                                                }
                                                double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                double abs1 = Math.abs(ab);
                                                if (ab > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {
                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    }

                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }
                                                if (strCur.equals("")) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }

                                                Double strBalance = ab + Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objsettings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    bitmapRecycle(bitmap);
                                    mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                                }
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.setEmpty();
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } else {
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                    String Print_type = "0";
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                    if (bitmap != null) {
                                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                        bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                        bitmap = getResizedBitmap(bitmap, 80, 120);
                                        mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo + ":" + Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    //mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }

                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit\n", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvNo + " : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvDate + " : " + DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintCashier + " : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } else {
                                        if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                            mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                            }
                                        }
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    int count = 0;
                                    Double itemFinalTax = 0d;
                                    while (count < order_detail.size()) {

                                        String strItemCode = order_detail.get(count).get_item_code();

                                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");

                                        String sale_price;
                                        Double dDisAfterSalePrice = 0d;
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                        String line_total;
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                        Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                        String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "         " + sale_price + "      " + line_total + "\n", "ST", 24, callbackPPT8555);
                                        String discnt = "";
                                        String disLbl = "";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis :";
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText(disLbl + " : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        count++;
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Item    :" + orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Quantity :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText("Subtotal      :" + subtotal + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("Discount : " + discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Total : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        mIPosPrinterService.printSpecifiedTypeText("Total Tax : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                mIPosPrinterService.printSpecifiedTypeText(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    String net_amount;
                                    net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                    String strCurrency;
                                    if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                        strCurrency = "";
                                    } else {
                                        strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("Net Amt : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String tender;
                                    tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Tender  : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String change_amount;
                                    change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Change  : " + change_amount + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                    if (false) {
                                        if (ck_project_type.equals("standalone")) {
                                            JSONObject jsonObject = new JSONObject();
                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                Double showAmount = 0d;
//
                                                try {
                                                    String strCreditAmt = "", strDeditAmount = "";
                                                    Double creditAmount = 0d,
                                                            debitAmount = 0d;
                                                    Cursor cursor = null;

                                                    String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                    cursor = database.rawQuery(strQry1, null);
                                                    while (cursor.moveToNext()) {
                                                        strCreditAmt = cursor.getString(0);

                                                    }
                                                    creditAmount = Double.parseDouble(strCreditAmt);

                                                    String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                    cursor = database.rawQuery(strQry2, null);
                                                    while (cursor.moveToNext()) {
                                                        strDeditAmount = cursor.getString(0);

                                                    }
                                                    debitAmount = Double.parseDouble(strDeditAmount);
                                                    showAmount = debitAmount + creditAmount;
                                                } catch (Exception ex) {
                                                }
                                                double abs1 = Math.abs(showAmount);
                                                if (showAmount > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                }
                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {

                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = cursor1.getString(0);

                                                    }
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }
                                                Double strBalance = abs1 - Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                            }
                                        } else {

                                            JSONObject jsonObject = new JSONObject();

                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                String curAmount = "";
                                                try {
                                                    strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        } while (cursor1.moveToNext());
                                                    }
                                                } catch (Exception ex) {
                                                    curAmount = "0";
                                                }
                                                double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                double abs1 = Math.abs(ab);
                                                if (ab > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {
                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    }

                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }
                                                if (strCur.equals("")) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }

                                                Double strBalance = ab + Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objsettings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    bitmapRecycle(bitmap);
                                    mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                                }
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.setEmpty();
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }

                        }
                    });
                }
            } else if (Globals.objsettings.get_Print_Lang().equals("1")) {
                if (Globals.objsettings.get_Print_Memo().equals("1")) {
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                String Print_type = "0";

                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("Order : " + orders.get_order_code() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                if (orders.get_table_code().equals("")) {
                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText("Table : " + orders.get_table_code(), "ST", 24, callbackPPT8555);
                                }

                                ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                if (order_detail.size() > 0) {
                                    Double total = 0d;

                                    mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    for (int i = 0; i < order_detail.size(); i++) {
                                        total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                        Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8) + "X" + order_detail.get(i).get_quantity() + "     " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check), "ST", 24, callbackPPT8555);

                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Amount : " + Globals.myNumberFormat2Price(total, decimal_check), "ST", 24, callbackPPT8555);
                                }

                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } else {
                    // For Both
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                    String strPOSNo = "لحم." + " ";
                                    String strGSTNo = Globals.GSTLbl + " ";
                                    String strOrderNum = "رقم الطلب" + "  ";
                                    String strOrderDate = "تاريخ الطلب" + "  ";
                                    String strCashier = "أمين الصندوق" + " ";
                                    String Print_type = "0";
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                    if (bitmap != null) {
                                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                        bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                        bitmap = getResizedBitmap(bitmap, 80, 120);
                                        mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);

                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(strGSTNo, "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }

                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {

                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {

                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: النقدية\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText(strOrderNum + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(strOrderDate + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    mIPosPrinterService.printSpecifiedTypeText(strCashier + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } else {
                                        if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                            mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("الكمية       السعر       مجموع", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    int count = 0;
                                    Double itemFinalTax = 0d;
                                    while (count < order_detail.size()) {

                                        String strItemCode = order_detail.get(count).get_item_code();
// need to update code here if it sav in arabic


                                        String strItemName = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");


                                        String sale_price;
                                        Double dDisAfterSalePrice = 0d;
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                        String line_total;
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                        Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                        String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText(line_total + "         " + sale_price + "      " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String discnt = "";
                                        String disLbl = "";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis :";
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText(disLbl + " : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        count++;
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("مجموع البند" + " :" + orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    //   mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("البند الكمية" + " :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    // mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText("المجموع الفرعي" + " :" + subtotal + "\n", "ST", 24, callbackPPT8555);
                                    // mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            mIPosPrinterService.printSpecifiedTypeText("خصم" + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("مجموع" + " :" + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    //  mIPosPrinterService.printSpecifiedTypeText(tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        mIPosPrinterService.printSpecifiedTypeText("مجموع الضريبة" + " :" + total_tax + "\n", "ST", 24, callbackPPT8555);
                                        //  mIPosPrinterService.printSpecifiedTypeText(total_tax + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                mIPosPrinterService.printSpecifiedTypeText(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    String net_amount;
                                    net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                    String strCurrency;
                                    if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                        strCurrency = "";
                                    } else {
                                        strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("ليس مكتب" + " :" + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    //   mIPosPrinterService.printSpecifiedTypeText(net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String tender;
                                    tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("مناقصة" + " :" + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    //   mIPosPrinterService.printSpecifiedTypeText(tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String change_amount;
                                    change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("يتغيرون" + " :" + change_amount + "\n", "ST", 24, callbackPPT8555);
                                    // mIPosPrinterService.printSpecifiedTypeText(change_amount + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                   /* order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    if (order_payment_array.size() > 0) {
                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                            String name = "";
                                            if (payment != null) {
                                                name = payment.get_payment_name();
                                                mIPosPrinterService.printSpecifiedTypeText(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }*/

                                    if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                        if (ck_project_type.equals("standalone")) {
                                            JSONObject jsonObject = new JSONObject();
                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                Double showAmount = 0d;
//
                                                try {
                                                    String strCreditAmt = "", strDeditAmount = "";
                                                    Double creditAmount = 0d,
                                                            debitAmount = 0d;
                                                    Cursor cursor = null;

                                                    String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                    cursor = database.rawQuery(strQry1, null);
                                                    while (cursor.moveToNext()) {
                                                        strCreditAmt = cursor.getString(0);

                                                    }
                                                    creditAmount = Double.parseDouble(strCreditAmt);

                                                    String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                    cursor = database.rawQuery(strQry2, null);
                                                    while (cursor.moveToNext()) {
                                                        strDeditAmount = cursor.getString(0);

                                                    }
                                                    debitAmount = Double.parseDouble(strDeditAmount);
                                                    showAmount = debitAmount + creditAmount;
                                                } catch (Exception ex) {
                                                }
                                                double abs1 = Math.abs(showAmount);
                                                if (showAmount > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                }
                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {

                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = cursor1.getString(0);

                                                    }
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }
                                                Double strBalance = abs1 - Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                            }
                                        } else {

                                            JSONObject jsonObject = new JSONObject();

                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                String curAmount = "";
                                                try {
                                                    strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        } while (cursor1.moveToNext());
                                                    }
                                                } catch (Exception ex) {
                                                    curAmount = "0";
                                                }
                                                double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                double abs1 = Math.abs(ab);
                                                if (ab > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {
                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    }

                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }
                                                if (strCur.equals("")) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }

                                                Double strBalance = ab + Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objsettings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                    //  mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    bitmapRecycle(bitmap);
                                    mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                                }
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.setEmpty();
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                }
            } else {
                if (Globals.objsettings.get_Print_Memo().equals("1")) {
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                String Print_type = "0";

                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Order : " + orders.get_order_code() + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                if (orders.get_table_code().equals("")) {
                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText("Table : " + orders.get_table_code(), "ST", 24, callbackPPT8555);
                                }

                                ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                if (order_detail.size() > 0) {
                                    Double total = 0d;

                                    mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    for (int i = 0; i < order_detail.size(); i++) {
                                        total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                        Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8) + "X" + order_detail.get(i).get_quantity() + "     " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check), "ST", 24, callbackPPT8555);

                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Amount : " + Globals.myNumberFormat2Price(total, decimal_check), "ST", 24, callbackPPT8555);
                                }

                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        }
                    });
                } else {
                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                    String strPOSNo = "Device ID/لحم." + " ";
                                    String strGSTNo = Globals.GSTLbl + " ";
                                    String strOrderNum = "Invoice Number/رقم الطلب" + "  ";
                                    String strOrderDate = "Invoice Date/تاريخ الطلب" + "  ";
                                    String strCashier = "Salesperson/أمين الصندوق" + " ";
                                    String Print_type = "0";
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                    if (bitmap != null) {
                                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                        bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                        bitmap = getResizedBitmap(bitmap, 80, 120);
                                        mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                        } else {
                                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                            // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } catch (Exception ex) {
                                    }
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText(strGSTNo, "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.PrintOrder + "\n", "ST", 24, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }

                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                        } else {
                                            if (arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                            } else if (arrayList.contains("1")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: النقدية\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText(strOrderNum + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(strOrderDate + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID + " : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    mIPosPrinterService.printSpecifiedTypeText(strCashier + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        mIPosPrinterService.printSpecifiedTypeText("Customer/زبون\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    } else {
                                        if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                            mIPosPrinterService.printSpecifiedTypeText("Customer/زبون\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total       Price        Qty\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("الكمية       السعر       مجموع", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    int count = 0;
                                    Double itemFinalTax = 0d;
                                    while (count < order_detail.size()) {

                                        String strItemCode = order_detail.get(count).get_item_code();

                                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");
                                        String strItemName_l = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");

                                        String sale_price;
                                        Double dDisAfterSalePrice = 0d;
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                        String line_total;
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strItemName_l + "\n", "ST", 24, callbackPPT8555);

                                        Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                        String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText(line_total + "         " + sale_price + "      " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String discnt = "";
                                        String disLbl = "";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                disLbl = "Dis :";
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText(disLbl + " : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                            Tax_Master tax_master = null;
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        count++;
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Total Item/مجموع البند:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Item Quantity/البند الكمية:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText("Subtotal/المجموع الفرعي:", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name() + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Discount/خصم" + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(discount + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Total/مجموع:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        mIPosPrinterService.printSpecifiedTypeText("Total Tax/مجموع الضريبة:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(total_tax + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                mIPosPrinterService.printSpecifiedTypeText(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    String net_amount;
                                    net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                    String strCurrency;
                                    if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                        strCurrency = "";
                                    } else {
                                        strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("Net Amt/ليس مكتب:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String tender;
                                    tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Tender/مناقصة:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                    String change_amount;
                                    change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                    mIPosPrinterService.printSpecifiedTypeText("Change/يتغيرون:\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText(change_amount + "\n", "ST", 24, callbackPPT8555);
                                   /*     mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }
*/
                                    if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                        if (ck_project_type.equals("standalone")) {
                                            JSONObject jsonObject = new JSONObject();
                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                Double showAmount = 0d;
//
                                                try {
                                                    String strCreditAmt = "", strDeditAmount = "";
                                                    Double creditAmount = 0d,
                                                            debitAmount = 0d;
                                                    Cursor cursor = null;

                                                    String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                    cursor = database.rawQuery(strQry1, null);
                                                    while (cursor.moveToNext()) {
                                                        strCreditAmt = cursor.getString(0);

                                                    }
                                                    creditAmount = Double.parseDouble(strCreditAmt);

                                                    String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                    cursor = database.rawQuery(strQry2, null);
                                                    while (cursor.moveToNext()) {
                                                        strDeditAmount = cursor.getString(0);

                                                    }
                                                    debitAmount = Double.parseDouble(strDeditAmount);
                                                    showAmount = debitAmount + creditAmount;
                                                } catch (Exception ex) {
                                                }
                                                double abs1 = Math.abs(showAmount);
                                                if (showAmount > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                }
                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {

                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = cursor1.getString(0);

                                                    }
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }
                                                Double strBalance = abs1 - Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                            }
                                        } else {

                                            JSONObject jsonObject = new JSONObject();

                                            if (Globals.strContact_Code.equals("")) {
                                                mIPosPrinterService.printSpecifiedTypeText("**", "ST", 24, callbackPPT8555);
                                            } else {
                                                String curAmount = "";
                                                try {
                                                    strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);
                                                    if (cursor1.moveToFirst()) {
                                                        do {
                                                            curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        } while (cursor1.moveToNext());
                                                    }
                                                } catch (Exception ex) {
                                                    curAmount = "0";
                                                }
                                                double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                double abs1 = Math.abs(ab);
                                                if (ab > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Old Amt :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Old Amt", abs1 + "");
                                                } catch (Exception ex) {
                                                }
                                                String strCur = "";

                                                try {
                                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                    cursor1 = database.rawQuery(strTableQry, null);

                                                    while (cursor1.moveToNext()) {
                                                        strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    }

                                                } catch (Exception ex) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }
                                                if (strCur.equals("")) {
                                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                } else {
                                                    mIPosPrinterService.printSpecifiedTypeText("Current Amt :" + strCur, "ST", 24, callbackPPT8555);
                                                }

                                                try {
                                                    jsonObject.put("Current Amt", strCur + "");
                                                } catch (Exception ex) {

                                                }

                                                Double strBalance = ab + Double.parseDouble(strCur);
                                                try {
                                                    jsonObject.put("Balance Amt", strBalance + "");
                                                } catch (Exception ex) {

                                                }
                                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                db.executeDML(strUpdatePayment, database);

                                                mIPosPrinterService.printSpecifiedTypeText("Balance Amt :" + Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.objsettings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                    bitmapRecycle(bitmap);
                                    mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                                }
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.setEmpty();
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }

                        }
                    });
                }
            }

        }

        //

        /*if (opr.equals("PayCollection")) {
            final Pay_Collection pay_collection = Pay_Collection.getPay_Collection(getApplicationContext(), " WHERE id = '" + id + "'", database);
            ThreadPoolManager.getInstance().executeTask(new Runnable() {
                @Override
                public void run() {
                    try {
                        for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                            String Print_type = "0";
                            mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                            Bitmap bitmap = StringToBitMap(settings.get_Logo());
                            if (bitmap != null) {
                                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);

                                bitmap = getResizedBitmap(bitmap, 80, 120);
                                mIPosPrinterService.printBitmap(1, 6, bitmap, callbackPPT8555);
                            }

                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("Receipt Voucher", "ST", 30, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintFontSize(26, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);


                            mIPosPrinterService.printColumnsText(new String[]{"Receipt No.", ":", pay_collection.get_collection_code()}, new int[]{11, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"Date", ":", pay_collection.get_collection_date()}, new int[]{11, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            String amount;
                            amount = Globals.myNumberFormat2Price(Double.parseDouble(pay_collection.get_amount()), decimal_check);
                            mIPosPrinterService.printColumnsText(new String[]{"Amount", ":", amount}, new int[]{11, 1, 40}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            String[] str = amount.split("\\.");
                            if (str.length == 1) {
                                mIPosPrinterService.printColumnsText(new String[]{"In Words", ":", Globals.convert(Integer.parseInt(str[0].toString())) + " Only "}, new int[]{8, 1, 40}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            } else if (str.length == 2) {
                                if (Integer.parseInt(str[1].toString()) == 0) {
                                    mIPosPrinterService.printColumnsText(new String[]{"In Words", ":", Globals.convert(Integer.parseInt(str[0].toString())) + " KD  Only "}, new int[]{8, 1, 40}, new int[]{0, 0, 0}, 0, callbackPPT8555);

                                } else {
                                    mIPosPrinterService.printColumnsText(new String[]{"In Words", ":", Globals.convert(Integer.parseInt(str[0].toString())) + " KD " + Globals.convert(Integer.parseInt(str[1].toString())) + " Fills Only "}, new int[]{8, 1, 40}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                                }

                            }

                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + pay_collection.get_contact_code() + "'");
                            mIPosPrinterService.printColumnsText(new String[]{"Received From", ":", contact.get_name()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"Cash/Cheque", ":", pay_collection.get_payment_mode()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"On Account", ":", pay_collection.get_on_account()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"Remarks", ":", pay_collection.get_remarks()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);

                            if (pay_collection.get_payment_mode().equals("CHEQUE")) {
                                Bank bank = Bank.getBank(getApplicationContext(), " WHERE bank_code='" + pay_collection.get_ref_type() + "'", database);
                                mIPosPrinterService.printColumnsText(new String[]{"Bank Name", ":", bank.get_bank_name()}, new int[]{10, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                                mIPosPrinterService.printColumnsText(new String[]{"Cheque No", ":", pay_collection.get_ref_no()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);

                            }

                            ArrayList<Pay_Collection_Detail> pay_collection_detail = Pay_Collection_Detail.getAllPay_Collection_Detail(getApplicationContext(), " WHERE collection_code='" + pay_collection.get_collection_code() + "'");
                            if (pay_collection_detail.size() > 0) {
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printColumnsText(new String[]{"Order No", "Amount"}, new int[]{13, 13}, new int[]{0, 0}, 0, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                for (int i = 0; i < pay_collection_detail.size(); i++) {
                                    mIPosPrinterService.printColumnsText(new String[]{pay_collection_detail.get(i).get_invoice_no(), Globals.myNumberFormat2QtyDecimal(Double.parseDouble(pay_collection_detail.get(i).get_amount()), qty_decimal_check)}, new int[]{13, 13}, new int[]{0, 0}, 0, callbackPPT8555);
                                }
                            }
                            user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                            mIPosPrinterService.printColumnsText(new String[]{"Cashier", ":", user.get_name()}, new int[]{10, 1, 20}, new int[]{0, 0, 0},0, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("Receiver Signature", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                        }
                        Globals.strContact_Code = "";
                        Globals.strResvContact_Code = "";
                        Globals.DiscountPer = "";
                        Globals.strOldCrAmt = "0";
                        Globals.setEmpty();
                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }
                }
            });
        } else if (lite_pos_registration.getIndustry_Type().equals("4")) {

            ThreadPoolManager.getInstance().executeTask(new Runnable() {
                @Override
                public void run() {
                    try {
                        for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                            String Print_type = "0";
                            mIPosPrinterService.setPrinterPrintFontSize(35, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("RECEIPT \n", "ST", 35, callbackPPT8555);
                            try {
                                if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {

                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 35, callbackPPT8555);
                                }
                            } catch (Exception ex) {

                            }
                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 35, 1,callbackPPT8555);
                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 35,1, callbackPPT8555);
                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 35,1, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);

                            mIPosPrinterService.printColumnsText(new String[]{Globals.PrintDeviceID, ":", Globals.objLPD.getDevice_Name()}, new int[]{10, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
//                            woyouService.printColumnsText(new String[]{"Cashier", ":", user.get_name()}, new int[]{10, 1, 20}, new int[]{0, 0, 0}, callback);
                            mIPosPrinterService.printColumnsText(new String[]{Globals.PrintCashier, ":", user.get_name()}, new int[]{12, 1, 18}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"RECEIPT NO.", ":", strOrderNo}, new int[]{12, 1, 16}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            if (Globals.strIsBarcodePrint.equals("true")) {
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.printBarCode(strOrderNo, 8, 80, 150, 0, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                            }
                            mIPosPrinterService.printColumnsText(new String[]{"IN DT", ":", DateUtill.PaternDatePrintDate(orders.get_order_date())}, new int[]{5, 1, 22}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"IN TM", ":", DateUtill.PaternDatePrintTime(orders.get_order_date())}, new int[]{5, 1, 22}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            int count = 0;
                            Double itemFinalTax = 0d;
                            while (count < order_detail.size()) {

                                String strItemCode = order_detail.get(count).get_item_code();

                                String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                        + strItemCode + "'  GROUP By order_detail.item_Code");
                                int len = 12;
                                if (strItemName.length() > len) {
                                    strItemName = strItemName.substring(0, len);
                                } else {
                                    for (int sLen = strItemName.length(); sLen < len; sLen++) {
                                        strItemName = strItemName + " ";
                                    }
                                }

                                String sale_price;
                                Double dDisAfterSalePrice = 0d;

                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                sale_price = Globals.myNumberFormat2Price((Double.parseDouble(dDisAfterSalePrice + "") * Double.parseDouble(order_detail.get(count).get_quantity() + "")), decimal_check);
                                //sale_price = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_sale_price()), decimal_check);
                                String line_total;
                                mIPosPrinterService.printSpecifiedTypeText("VEHICLE TYPE: \n", "ST", 30, callbackPPT8555);
                                line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                mIPosPrinterService.printColumnsText(new String[]{strItemName, " Rs." + sale_price}, new int[]{11, 9}, new int[]{0, 0}, 0, callbackPPT8555);

                                count++;
                            }

                            mIPosPrinterService.printColumnsText(new String[]{"V.NO : ", orders.get_remarks()}, new int[]{8, 20}, new int[]{0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);

                            if (!settings.get_Footer_Text().equals("")) {
                                mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text() + "\n", "ST", 35, callbackPPT8555);
                            }
                            mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 35, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                            mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                        }
                        Globals.strContact_Code = "";
                        Globals.strResvContact_Code = "";
                        Globals.DiscountPer = "";
                        Globals.strOldCrAmt = "0";
                        Globals.setEmpty();
                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }
                }
            });

        } else {
            if (decimal_check.equals("2")) {
                if (settings.get_Print_Lang().equals("0")){
                    // English
                    if (settings.get_Print_Memo().equals("1")) {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                    String Print_type = "0";

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Order : " + orders.get_order_code() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                    if (orders.get_table_code().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText("Table : "+orders.get_table_code(),"ST",24, callbackPPT8555);
                                    }

                                    ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                    if (order_detail.size() > 0) {
                                        Double total = 0d;

                                        mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total","ST",24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        for (int i = 0; i < order_detail.size(); i++) {
                                            total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                            Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8)+"X"+order_detail.get(i).get_quantity()+"     "+Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check),"ST",24, callbackPPT8555);

                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Amount : "+Globals.myNumberFormat2Price(total, decimal_check),"ST",24, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    } else {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                                        String Print_type = "0";
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        Bitmap bitmap = StringToBitMap(settings.get_Logo());
                                        if (bitmap != null) {
                                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                            bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                            bitmap = getResizedBitmap(bitmap, 80, 120);
                                            mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1,callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24,1, callbackPPT8555);
                                        try {
                                            if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                            } else {
                                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24,1, callbackPPT8555);

                                               // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } catch (Exception ex) {}
                                        if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                        } else {
                                            mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo+":"+ Globals.objLPR.getLicense_No(),"ST",24,callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        //mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                        ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        ArrayList<String> arrayList = new ArrayList<String>();
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (order_payment_array.size() > 0) {

                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                arrayList.add(order_payment_array.get(i).get_payment_id());
                                            }

                                            if (arrayList.contains("1") && arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                            } else {
                                                if (arrayList.contains("5")) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit\n", "ST", 24, callbackPPT8555);
                                                } else if (arrayList.contains("1")) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.strIsBarcodePrint.equals("true")) {
                                            mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvNo+" : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvDate+" : " + DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID+" : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                        user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintCashier+" : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (Globals.ModeResrv.equals("Resv")) {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                            mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } else {
                                            if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                            } else {
                                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                                mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                                if (contact.get_gstin().length() > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                                }
                                            }
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        int count = 0;
                                        Double itemFinalTax = 0d;
                                        while (count < order_detail.size()) {

                                            String strItemCode = order_detail.get(count).get_item_code();

                                            String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");

                                            String sale_price;
                                            Double dDisAfterSalePrice = 0d;
                                            Double dDisAfter = 0d;
                                            dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                            dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                            sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                            String line_total;
                                            line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                            Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                            String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                            mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check)+ "         "+sale_price+"      "+ line_total + "\n", "ST", 24, callbackPPT8555);
                                            String discnt = "";
                                            String disLbl = "";
                                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                            } else {
                                                if (Globals.strIsDiscountPrint.equals("true")) {
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    disLbl = "Dis :";
                                                }
                                                mIPosPrinterService.printSpecifiedTypeText(disLbl+" : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                            }

                                            mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                            if (settings.get_HSN_print().equals("true")) {
                                                item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            if (settings.get_ItemTax().equals("1") || settings.get_ItemTax().equals("3")) {
                                                Tax_Master tax_master = null;
                                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                    itemFinalTax += valueFinal;
                                                    mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name()+" :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            count++;
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Item    :" +  orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Item Quantity :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String subtotal = "";
                                        String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                        Cursor cursor1 = database.rawQuery(strTableQry, null);
                                        Tax_Master tax_master;
                                        while (cursor1.moveToNext()) {
                                            subtotal = cursor1.getString(0);
                                        }

                                        subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText("Subtotal      :" + subtotal + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        if (settings.get_ItemTax().equals("2") || settings.get_ItemTax().equals("3")) {

                                            strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                    "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                    "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText( tax_master.get_tax_name()+" : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                        String discount = "0";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                        } else {
                                            discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                mIPosPrinterService.printSpecifiedTypeText( "Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText( "Discount : " + discount + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                        String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Total : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                        String total_tax;
                                        total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                        if (Double.parseDouble(total_tax) > 0d) {
                                            mIPosPrinterService.printSpecifiedTypeText( "Total Tax : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                            String name = "", value = "";
                                            if (cursor.moveToFirst()) {
                                                do {
                                                    name = cursor.getString(0);
                                                    value = cursor.getString(1);
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                } while (cursor.moveToNext());
                                            }
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        String net_amount;
                                        net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                        String strCurrency;
                                        if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                            strCurrency = "";
                                        } else {
                                            strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText( "Net Amt : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String tender;
                                        tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Tender  : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String change_amount;
                                        change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Change  : " + change_amount+ "\n", "ST", 24, callbackPPT8555);
                                      *//**//*  mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }*//**//*

                                        if (false) {
                                            if (ck_project_type.equals("standalone")) {
                                                JSONObject jsonObject = new JSONObject();
                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    Double showAmount = 0d;
//
                                                    try {
                                                        String strCreditAmt = "", strDeditAmount = "";
                                                        Double creditAmount = 0d,
                                                                debitAmount = 0d;
                                                        Cursor cursor = null;

                                                        String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                        cursor = database.rawQuery(strQry1, null);
                                                        while (cursor.moveToNext()) {
                                                            strCreditAmt = cursor.getString(0);

                                                        }
                                                        creditAmount = Double.parseDouble(strCreditAmt);

                                                        String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                        cursor = database.rawQuery(strQry2, null);
                                                        while (cursor.moveToNext()) {
                                                            strDeditAmount = cursor.getString(0);

                                                        }
                                                        debitAmount = Double.parseDouble(strDeditAmount);
                                                        showAmount = debitAmount + creditAmount;
                                                    } catch (Exception ex) {
                                                    }
                                                    double abs1 = Math.abs(showAmount);
                                                    if (showAmount > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"DR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    }
                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = cursor1.getString(0);

                                                        }
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    Double strBalance = abs1 - Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                                }
                                            } else {

                                                JSONObject jsonObject = new JSONObject();

                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    String curAmount = "";
                                                    try {
                                                        strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                            } while (cursor1.moveToNext());
                                                        }
                                                    } catch (Exception ex) {
                                                        curAmount = "0";
                                                    }
                                                    double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                    double abs1 = Math.abs(ab);
                                                    if (ab > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+ "DR", "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {}
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        }

                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }
                                                    if (strCur.equals("")) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }

                                                    Double strBalance = ab + Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        if (!settings.get_Footer_Text().equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        bitmapRecycle(bitmap);
                                        mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                    }
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = "";
                                    Globals.strOldCrAmt = "0";
                                    Globals.setEmpty();
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }

                            }
                        });
                    }
                }else if (settings.get_Print_Lang().equals("1")){
                    if (settings.get_Print_Memo().equals("1")) {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                    String Print_type = "0";

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("Order : " + orders.get_order_code() + "\n", "ST", 24,1, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                    if (orders.get_table_code().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText("Table : "+orders.get_table_code(),"ST",24, callbackPPT8555);
                                    }

                                    ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                    if (order_detail.size() > 0) {
                                        Double total = 0d;

                                        mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total","ST",24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        for (int i = 0; i < order_detail.size(); i++) {
                                            total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                            Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8)+"X"+order_detail.get(i).get_quantity()+"     "+Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check),"ST",24, callbackPPT8555);

                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Amount : "+Globals.myNumberFormat2Price(total, decimal_check),"ST",24, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    } else {
                        // For Both
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                                        String strPOSNo = "Device ID/لحم." + " ";
                                        String strGSTNo = Globals.GSTLbl + " ";
                                        String strOrderNum = "Invoice Number/رقم الطلب" + "  ";
                                        String strOrderDate = "Invoice Date/تاريخ الطلب" + "  ";
                                        String strCashier = "Salesperson/أمين الصندوق" + " ";
                                        String Print_type = "0";
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        Bitmap bitmap = StringToBitMap(settings.get_Logo());
                                        if (bitmap != null) {
                                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                            bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                            bitmap = getResizedBitmap(bitmap, 80, 120);
                                            mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1,callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24,1, callbackPPT8555);

                                        try {
                                            if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                            } else {
                                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24,1, callbackPPT8555);

                                                mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } catch (Exception ex) {}
                                        if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                        } else {
                                            mIPosPrinterService.printSpecifiedTypeText(strGSTNo,"ST",24,callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(),"ST",24,callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                       // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                        ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        ArrayList<String> arrayList = new ArrayList<String>();
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (order_payment_array.size() > 0) {

                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                arrayList.add(order_payment_array.get(i).get_payment_id());
                                            }

                                            if (arrayList.contains("1") && arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                            } else {
                                                if (arrayList.contains("5")) {

                                                    mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                                } else if (arrayList.contains("1")) {

                                                    mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: النقدية\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.strIsBarcodePrint.equals("true")) {
                                            mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText(strOrderNum + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strOrderDate + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID+" : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                        user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                        mIPosPrinterService.printSpecifiedTypeText(strCashier + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (Globals.ModeResrv.equals("Resv")) {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                            mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } else {
                                            if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                            } else {
                                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                                mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                                if (contact.get_gstin().length() > 0) {
                                                    //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("الكمية       السعر       مجموع", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        int count = 0;
                                        Double itemFinalTax = 0d;
                                        while (count < order_detail.size()) {

                                            String strItemCode = order_detail.get(count).get_item_code();
// need to update code here if it sav in arabic


                                                String strItemName = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                        + strItemCode + "'  GROUP By order_detail.item_Code");




                                            String sale_price;
                                            Double dDisAfterSalePrice = 0d;
                                            Double dDisAfter = 0d;
                                            dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                            dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                            sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                            String line_total;
                                            line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                            Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                            String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                            mIPosPrinterService.printSpecifiedTypeText(line_total+ "         "+sale_price+"      "+ Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            String discnt = "";
                                            String disLbl = "";
                                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                            } else {
                                                if (Globals.strIsDiscountPrint.equals("true")) {
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    disLbl = "Dis :";
                                                }
                                                mIPosPrinterService.printSpecifiedTypeText(disLbl+" : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                            }

                                            mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                            if (settings.get_HSN_print().equals("true")) {
                                                item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            if (settings.get_ItemTax().equals("1") || settings.get_ItemTax().equals("3")) {
                                                Tax_Master tax_master = null;
                                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                    itemFinalTax += valueFinal;
                                                    mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name()+" :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            count++;
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("مجموع البند:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("البند الكمية:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String subtotal = "";
                                        String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                        Cursor cursor1 = database.rawQuery(strTableQry, null);
                                        Tax_Master tax_master;
                                        while (cursor1.moveToNext()) {
                                            subtotal = cursor1.getString(0);
                                        }

                                        subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText("المجموع الفرعي:", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        if (settings.get_ItemTax().equals("2") || settings.get_ItemTax().equals("3")) {

                                            strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                    "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                    "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText( tax_master.get_tax_name()+" : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                        String discount = "0";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                        } else {
                                            discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                mIPosPrinterService.printSpecifiedTypeText( "خصم" + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText( discount + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                        String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "مجموع:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                        String total_tax;
                                        total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                        if (Double.parseDouble(total_tax) > 0d) {
                                            mIPosPrinterService.printSpecifiedTypeText( "مجموع الضريبة:\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText( total_tax + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                            String name = "", value = "";
                                            if (cursor.moveToFirst()) {
                                                do {
                                                    name = cursor.getString(0);
                                                    value = cursor.getString(1);
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 32, callbackPPT8555);
                                                } while (cursor.moveToNext());
                                            }
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        String net_amount;
                                        net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                        String strCurrency;
                                        if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                            strCurrency = "";
                                        } else {
                                            strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText( "ليس مكتب:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String tender;
                                        tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "مناقصة:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String change_amount;
                                        change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "يتغيرون:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( change_amount+ "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                        if (settings.get_Is_Accounts().equals("true")) {
                                            if (ck_project_type.equals("standalone")) {
                                                JSONObject jsonObject = new JSONObject();
                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    Double showAmount = 0d;
//
                                                    try {
                                                        String strCreditAmt = "", strDeditAmount = "";
                                                        Double creditAmount = 0d,
                                                                debitAmount = 0d;
                                                        Cursor cursor = null;

                                                        String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                        cursor = database.rawQuery(strQry1, null);
                                                        while (cursor.moveToNext()) {
                                                            strCreditAmt = cursor.getString(0);

                                                        }
                                                        creditAmount = Double.parseDouble(strCreditAmt);

                                                        String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                        cursor = database.rawQuery(strQry2, null);
                                                        while (cursor.moveToNext()) {
                                                            strDeditAmount = cursor.getString(0);

                                                        }
                                                        debitAmount = Double.parseDouble(strDeditAmount);
                                                        showAmount = debitAmount + creditAmount;
                                                    } catch (Exception ex) {
                                                    }
                                                    double abs1 = Math.abs(showAmount);
                                                    if (showAmount > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"DR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    }
                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = cursor1.getString(0);

                                                        }
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    Double strBalance = abs1 - Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                                }
                                            } else {

                                                JSONObject jsonObject = new JSONObject();

                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    String curAmount = "";
                                                    try {
                                                        strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                            } while (cursor1.moveToNext());
                                                        }
                                                    } catch (Exception ex) {
                                                        curAmount = "0";
                                                    }
                                                    double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                    double abs1 = Math.abs(ab);
                                                    if (ab > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+ "DR", "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {}
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        }

                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }
                                                    if (strCur.equals("")) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }

                                                    Double strBalance = ab + Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        if (!settings.get_Footer_Text().equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        bitmapRecycle(bitmap);
                                        mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                    }
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = "";
                                    Globals.strOldCrAmt = "0";
                                    Globals.setEmpty();
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    }
                }else {
                    if (settings.get_Print_Memo().equals("1")) {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                    String Print_type = "0";

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Order : " + orders.get_order_code() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                    if (orders.get_table_code().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText("Table : "+orders.get_table_code(),"ST",24, callbackPPT8555);
                                    }

                                    ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                    if (order_detail.size() > 0) {
                                        Double total = 0d;

                                        mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total","ST",24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        for (int i = 0; i < order_detail.size(); i++) {
                                            total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                            Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8)+"X"+order_detail.get(i).get_quantity()+"     "+Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check),"ST",24, callbackPPT8555);

                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Amount : "+Globals.myNumberFormat2Price(total, decimal_check),"ST",24, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    } else {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                                        String strPOSNo = "Device ID/لحم." + " ";
                                        String strGSTNo = Globals.GSTLbl + " ";
                                        String strOrderNum = "Invoice Number/رقم الطلب" + "  ";
                                        String strOrderDate = "Invoice Date/تاريخ الطلب" + "  ";
                                        String strCashier = "Salesperson/أمين الصندوق" + " ";
                                        String Print_type = "0";
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        Bitmap bitmap = StringToBitMap(settings.get_Logo());
                                        if (bitmap != null) {
                                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                            bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                            bitmap = getResizedBitmap(bitmap, 80, 120);
                                            mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1,callbackPPT8555);
                                        try {
                                            if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                            } else {
                                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1,callbackPPT8555);

                                               // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } catch (Exception ex) {}
                                        if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                        } else {
                                            mIPosPrinterService.printSpecifiedTypeText(strGSTNo,"ST",24,callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(),"ST",24,callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.PrintOrder + "\n", "ST", 24, 1,callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                       // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                        ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        ArrayList<String> arrayList = new ArrayList<String>();
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (order_payment_array.size() > 0) {

                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                arrayList.add(order_payment_array.get(i).get_payment_id());
                                            }

                                            if (arrayList.contains("1") && arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                            } else {
                                                if (arrayList.contains("5")) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                                } else if (arrayList.contains("1")) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: النقدية\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.strIsBarcodePrint.equals("true")) {
                                            mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText(strOrderNum + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strOrderDate + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID+" : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                        user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                        mIPosPrinterService.printSpecifiedTypeText(strCashier + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (Globals.ModeResrv.equals("Resv")) {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                            mIPosPrinterService.printSpecifiedTypeText("Customer/زبون\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } else {
                                            if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                            } else {
                                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                                mIPosPrinterService.printSpecifiedTypeText("Customer/زبون\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                                if (contact.get_gstin().length() > 0) {
                                                    //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total       Price        Qty\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("الكمية       السعر       مجموع", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        int count = 0;
                                        Double itemFinalTax = 0d;
                                        while (count < order_detail.size()) {

                                            String strItemCode = order_detail.get(count).get_item_code();

                                            String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");
                                            String strItemName_l = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");

                                            String sale_price;
                                            Double dDisAfterSalePrice = 0d;
                                            Double dDisAfter = 0d;
                                            dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                            dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                            sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                            String line_total;
                                            line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName_l + "\n", "ST", 24, callbackPPT8555);

                                            Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                            String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                            mIPosPrinterService.printSpecifiedTypeText(line_total+ "         "+sale_price+"      "+ Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            String discnt = "";
                                            String disLbl = "";
                                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                            } else {
                                                if (Globals.strIsDiscountPrint.equals("true")) {
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    disLbl = "Dis :";
                                                }
                                                mIPosPrinterService.printSpecifiedTypeText(disLbl+" : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                            }

                                            mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                            if (settings.get_HSN_print().equals("true")) {
                                                item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            if (settings.get_ItemTax().equals("1") || settings.get_ItemTax().equals("3")) {
                                                Tax_Master tax_master = null;
                                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                    itemFinalTax += valueFinal;
                                                    mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name()+" :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            count++;
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Item/مجموع البند:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Item Quantity/البند الكمية:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String subtotal = "";
                                        String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                        Cursor cursor1 = database.rawQuery(strTableQry, null);
                                        Tax_Master tax_master;
                                        while (cursor1.moveToNext()) {
                                            subtotal = cursor1.getString(0);
                                        }

                                        subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText("Subtotal/المجموع الفرعي:", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        if (settings.get_ItemTax().equals("2") || settings.get_ItemTax().equals("3")) {

                                            strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                    "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                    "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText( tax_master.get_tax_name()+" : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                        String discount = "0";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                        } else {
                                            discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                mIPosPrinterService.printSpecifiedTypeText( "Discount/خصم" + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText( discount + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                        String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Total/مجموع:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                        String total_tax;
                                        total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                        if (Double.parseDouble(total_tax) > 0d) {
                                            mIPosPrinterService.printSpecifiedTypeText( "Total Tax/مجموع الضريبة:\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText( total_tax + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                            String name = "", value = "";
                                            if (cursor.moveToFirst()) {
                                                do {
                                                    name = cursor.getString(0);
                                                    value = cursor.getString(1);
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                } while (cursor.moveToNext());
                                            }
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        String net_amount;
                                        net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                        String strCurrency;
                                        if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                            strCurrency = "";
                                        } else {
                                            strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText( "Net Amt/ليس مكتب:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String tender;
                                        tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Tender/مناقصة:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String change_amount;
                                        change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Change/يتغيرون:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( change_amount+ "\n", "ST", 24, callbackPPT8555);
                                   *//**//*     mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }
*//**//*
                                        if (settings.get_Is_Accounts().equals("true")) {
                                            if (ck_project_type.equals("standalone")) {
                                                JSONObject jsonObject = new JSONObject();
                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    Double showAmount = 0d;
//
                                                    try {
                                                        String strCreditAmt = "", strDeditAmount = "";
                                                        Double creditAmount = 0d,
                                                                debitAmount = 0d;
                                                        Cursor cursor = null;

                                                        String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                        cursor = database.rawQuery(strQry1, null);
                                                        while (cursor.moveToNext()) {
                                                            strCreditAmt = cursor.getString(0);

                                                        }
                                                        creditAmount = Double.parseDouble(strCreditAmt);

                                                        String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                        cursor = database.rawQuery(strQry2, null);
                                                        while (cursor.moveToNext()) {
                                                            strDeditAmount = cursor.getString(0);

                                                        }
                                                        debitAmount = Double.parseDouble(strDeditAmount);
                                                        showAmount = debitAmount + creditAmount;
                                                    } catch (Exception ex) {
                                                    }
                                                    double abs1 = Math.abs(showAmount);
                                                    if (showAmount > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"DR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    }
                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = cursor1.getString(0);

                                                        }
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    Double strBalance = abs1 - Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                                }
                                            } else {

                                                JSONObject jsonObject = new JSONObject();

                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    String curAmount = "";
                                                    try {
                                                        strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                            } while (cursor1.moveToNext());
                                                        }
                                                    } catch (Exception ex) {
                                                        curAmount = "0";
                                                    }
                                                    double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                    double abs1 = Math.abs(ab);
                                                    if (ab > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+ "DR", "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {}
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        }

                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }
                                                    if (strCur.equals("")) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }

                                                    Double strBalance = ab + Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        if (!settings.get_Footer_Text().equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        bitmapRecycle(bitmap);
                                        mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                    }
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = "";
                                    Globals.strOldCrAmt = "0";
                                    Globals.setEmpty();
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }

                            }
                        });
                    }
                }



            } else {
                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                                String Print_type = "0";
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                Bitmap bitmap = StringToBitMap(settings.get_Logo());
                                if (bitmap != null) {
                                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                    bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                    bitmap = getResizedBitmap(bitmap, 80, 120);
                                    mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                }

                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24,1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1,callbackPPT8555);
                                try {
                                    if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                    } else {
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1,callbackPPT8555);

                                       // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                } catch (Exception ex) {}
                                if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo+":"+ Globals.objLPR.getLicense_No(),"ST",24,callbackPPT8555);
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1,callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                              //  mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                ArrayList<String> arrayList = new ArrayList<String>();
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (order_payment_array.size() > 0) {

                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        arrayList.add(order_payment_array.get(i).get_payment_id());
                                    }

                                    if (arrayList.contains("1") && arrayList.contains("5")) {
                                        mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                    } else {
                                        if (arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit\n", "ST", 24, callbackPPT8555);
                                        } else if (arrayList.contains("1")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                }

                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (Globals.strIsBarcodePrint.equals("true")) {
                                    mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                }

                                mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvNo+" : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvDate+" : " + DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID+" : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                mIPosPrinterService.printSpecifiedTypeText(Globals.PrintCashier+" : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                if (Globals.ModeResrv.equals("Resv")) {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                    mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (contact.get_gstin().length() > 0) {
                                        mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                } else {
                                    if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                    } else {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                        mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                        }
                                    }
                                }

                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                int count = 0;
                                Double itemFinalTax = 0d;
                                while (count < order_detail.size()) {

                                    String strItemCode = order_detail.get(count).get_item_code();
                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;
                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                   if(settings.get_Print_Lang().equals("0")) {
                                       String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                               + strItemCode + "'  GROUP By order_detail.item_Code");

                                       mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                   }
                                   else if(settings.get_Print_Lang().equals("1")){
                                       String strItemName = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                               + strItemCode + "'  GROUP By order_detail.item_Code");

                                       mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);


                                   }

                                   else{
                                       String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                               + strItemCode + "'  GROUP By order_detail.item_Code");

                                       String strItemName_l = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                               + strItemCode + "'  GROUP By order_detail.item_Code");
                                       mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);
                                       mIPosPrinterService.printSpecifiedTypeText(strItemName_l + "\n", "ST", 24, callbackPPT8555);

                                   }

                                    Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                    String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check)+ "         "+sale_price+"    "+ line_total + "\n", "ST", 24, callbackPPT8555);
                                    String discnt = "";
                                    String disLbl = "";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                            discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                            disLbl = "Dis :";
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText(disLbl+" : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (settings.get_HSN_print().equals("true")) {
                                        item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                    if (settings.get_ItemTax().equals("1") || settings.get_ItemTax().equals("3")) {
                                        Tax_Master tax_master = null;
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                            itemFinalTax += valueFinal;
                                            mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name()+" :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    count++;
                                }

                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Total Item :" +  orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Item Quantity :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                String subtotal = "";
                                String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                Cursor cursor1 = database.rawQuery(strTableQry, null);
                                Tax_Master tax_master;
                                while (cursor1.moveToNext()) {
                                    subtotal = cursor1.getString(0);
                                }

                                subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                mIPosPrinterService.printSpecifiedTypeText("Subtotal :" + subtotal + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                if (settings.get_ItemTax().equals("2") || settings.get_ItemTax().equals("3")) {

                                    strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                            "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                            "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                    cursor1 = database.rawQuery(strTableQry, null);

                                    while (cursor1.moveToNext()) {
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText( tax_master.get_tax_name()+" : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }

                                String discount = "0";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                } else {
                                    discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        mIPosPrinterService.printSpecifiedTypeText( "Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( "Discount : " + discount + "\n", "ST", 24, callbackPPT8555);
                                    }
                                }
                                String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                mIPosPrinterService.printSpecifiedTypeText( "Total : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                String total_tax;
                                total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                if (Double.parseDouble(total_tax) > 0d) {
                                    mIPosPrinterService.printSpecifiedTypeText( "Total Tax : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                    String name = "", value = "";
                                    if (cursor.moveToFirst()) {
                                        do {
                                            name = cursor.getString(0);
                                            value = cursor.getString(1);
                                            mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        } while (cursor.moveToNext());
                                    }
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                mIPosPrinterService.printSpecifiedTypeText( "Net Amt : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                mIPosPrinterService.printSpecifiedTypeText( "Tender : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                mIPosPrinterService.printSpecifiedTypeText( "Change : " + change_amount+ "\n", "ST", 24, callbackPPT8555);
                             *//**//*   mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                if (order_payment_array.size() > 0) {
                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                        String name = "";
                                        if (payment != null) {
                                            name = payment.get_payment_name();
                                            mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }*//**//*

                                if (settings.get_Is_Accounts().equals("true")) {
                                    if (ck_project_type.equals("standalone")) {
                                        JSONObject jsonObject = new JSONObject();
                                        if (Globals.strContact_Code.equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                        } else {
                                            Double showAmount = 0d;
//
                                            try {
                                                String strCreditAmt = "", strDeditAmount = "";
                                                Double creditAmount = 0d,
                                                        debitAmount = 0d;
                                                Cursor cursor = null;

                                                String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                cursor = database.rawQuery(strQry1, null);
                                                while (cursor.moveToNext()) {
                                                    strCreditAmt = cursor.getString(0);

                                                }
                                                creditAmount = Double.parseDouble(strCreditAmt);

                                                String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                cursor = database.rawQuery(strQry2, null);
                                                while (cursor.moveToNext()) {
                                                    strDeditAmount = cursor.getString(0);

                                                }
                                                debitAmount = Double.parseDouble(strDeditAmount);
                                                showAmount = debitAmount + creditAmount;
                                            } catch (Exception ex) {
                                            }
                                            double abs1 = Math.abs(showAmount);
                                            if (showAmount > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"DR", "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                            }
                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {

                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = cursor1.getString(0);

                                                }
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }
                                            Double strBalance = abs1 - Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        }
                                    } else {

                                        JSONObject jsonObject = new JSONObject();

                                        if (Globals.strContact_Code.equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                        } else {
                                            String curAmount = "";
                                            try {
                                                strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);
                                                if (cursor1.moveToFirst()) {
                                                    do {
                                                        curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    } while (cursor1.moveToNext());
                                                }
                                            } catch (Exception ex) {
                                                curAmount = "0";
                                            }
                                            double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                            double abs1 = Math.abs(ab);
                                            if (ab > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+ "DR", "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {}
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                }

                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                            }
                                            if (strCur.equals("")) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }

                                            Double strBalance = ab + Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                }

                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                if (!settings.get_Footer_Text().equals("")) {
                                    mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                }
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                bitmapRecycle(bitmap);
                                mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                            }
                            Globals.strContact_Code = "";
                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = "";
                            Globals.strOldCrAmt = "0";
                            Globals.setEmpty();
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                });
            }*//*
        }*/
    }


   /* private void ppt8555_demo(final Orders orders, final ArrayList<Order_Detail> order_detail) {


        if (decimal_check.equals("2")) {
            if (settings.get_Print_Lang().equals("0")) {
                // English

            } else if (settings.get_Print_Lang().equals("1")) {
                if (settings.get_Print_Memo().equals("1")) {
                } else {
                }
            } else {
                if (settings.get_Print_Memo().equals("1")) {
                } else {
                }
            }


        } else {
            if (settings.get_Print_Lang().equals("0")) {
                // English
                if (settings.get_Print_Memo().equals("1")) {
                } else {
                }
            } else if (settings.get_Print_Lang().equals("1")) {
                if (settings.get_Print_Memo().equals("1")) {
                } else {
                }
            } else {
                if (settings.get_Print_Memo().equals("1")) {
                } else {
                }
            }

        }

        //

        *//*if (opr.equals("PayCollection")) {
            final Pay_Collection pay_collection = Pay_Collection.getPay_Collection(getApplicationContext(), " WHERE id = '" + id + "'", database);
            ThreadPoolManager.getInstance().executeTask(new Runnable() {
                @Override
                public void run() {
                    try {
                        for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                            String Print_type = "0";
                            mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                            Bitmap bitmap = StringToBitMap(settings.get_Logo());
                            if (bitmap != null) {
                                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);

                                bitmap = getResizedBitmap(bitmap, 80, 120);
                                mIPosPrinterService.printBitmap(1, 6, bitmap, callbackPPT8555);
                            }

                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("Receipt Voucher", "ST", 30, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintFontSize(26, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);


                            mIPosPrinterService.printColumnsText(new String[]{"Receipt No.", ":", pay_collection.get_collection_code()}, new int[]{11, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"Date", ":", pay_collection.get_collection_date()}, new int[]{11, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            String amount;
                            amount = Globals.myNumberFormat2Price(Double.parseDouble(pay_collection.get_amount()), decimal_check);
                            mIPosPrinterService.printColumnsText(new String[]{"Amount", ":", amount}, new int[]{11, 1, 40}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            String[] str = amount.split("\\.");
                            if (str.length == 1) {
                                mIPosPrinterService.printColumnsText(new String[]{"In Words", ":", Globals.convert(Integer.parseInt(str[0].toString())) + " Only "}, new int[]{8, 1, 40}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            } else if (str.length == 2) {
                                if (Integer.parseInt(str[1].toString()) == 0) {
                                    mIPosPrinterService.printColumnsText(new String[]{"In Words", ":", Globals.convert(Integer.parseInt(str[0].toString())) + " KD  Only "}, new int[]{8, 1, 40}, new int[]{0, 0, 0}, 0, callbackPPT8555);

                                } else {
                                    mIPosPrinterService.printColumnsText(new String[]{"In Words", ":", Globals.convert(Integer.parseInt(str[0].toString())) + " KD " + Globals.convert(Integer.parseInt(str[1].toString())) + " Fills Only "}, new int[]{8, 1, 40}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                                }

                            }

                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + pay_collection.get_contact_code() + "'");
                            mIPosPrinterService.printColumnsText(new String[]{"Received From", ":", contact.get_name()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"Cash/Cheque", ":", pay_collection.get_payment_mode()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"On Account", ":", pay_collection.get_on_account()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"Remarks", ":", pay_collection.get_remarks()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);

                            if (pay_collection.get_payment_mode().equals("CHEQUE")) {
                                Bank bank = Bank.getBank(getApplicationContext(), " WHERE bank_code='" + pay_collection.get_ref_type() + "'", database);
                                mIPosPrinterService.printColumnsText(new String[]{"Bank Name", ":", bank.get_bank_name()}, new int[]{10, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                                mIPosPrinterService.printColumnsText(new String[]{"Cheque No", ":", pay_collection.get_ref_no()}, new int[]{13, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);

                            }

                            ArrayList<Pay_Collection_Detail> pay_collection_detail = Pay_Collection_Detail.getAllPay_Collection_Detail(getApplicationContext(), " WHERE collection_code='" + pay_collection.get_collection_code() + "'");
                            if (pay_collection_detail.size() > 0) {
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printColumnsText(new String[]{"Order No", "Amount"}, new int[]{13, 13}, new int[]{0, 0}, 0, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                for (int i = 0; i < pay_collection_detail.size(); i++) {
                                    mIPosPrinterService.printColumnsText(new String[]{pay_collection_detail.get(i).get_invoice_no(), Globals.myNumberFormat2QtyDecimal(Double.parseDouble(pay_collection_detail.get(i).get_amount()), qty_decimal_check)}, new int[]{13, 13}, new int[]{0, 0}, 0, callbackPPT8555);
                                }
                            }
                            user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                            mIPosPrinterService.printColumnsText(new String[]{"Cashier", ":", user.get_name()}, new int[]{10, 1, 20}, new int[]{0, 0, 0},0, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("Receiver Signature", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                            mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                        }
                        Globals.strContact_Code = "";
                        Globals.strResvContact_Code = "";
                        Globals.DiscountPer = "";
                        Globals.strOldCrAmt = "0";
                        Globals.setEmpty();
                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }
                }
            });
        } else if (lite_pos_registration.getIndustry_Type().equals("4")) {

            ThreadPoolManager.getInstance().executeTask(new Runnable() {
                @Override
                public void run() {
                    try {
                        for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                            String Print_type = "0";
                            mIPosPrinterService.setPrinterPrintFontSize(35, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                            mIPosPrinterService.printSpecifiedTypeText("RECEIPT \n", "ST", 35, callbackPPT8555);
                            try {
                                if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {

                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 35, callbackPPT8555);
                                }
                            } catch (Exception ex) {

                            }
                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 35, 1,callbackPPT8555);
                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 35,1, callbackPPT8555);
                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 35,1, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);

                            mIPosPrinterService.printColumnsText(new String[]{Globals.PrintDeviceID, ":", Globals.objLPD.getDevice_Name()}, new int[]{10, 1, 20}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
//                            woyouService.printColumnsText(new String[]{"Cashier", ":", user.get_name()}, new int[]{10, 1, 20}, new int[]{0, 0, 0}, callback);
                            mIPosPrinterService.printColumnsText(new String[]{Globals.PrintCashier, ":", user.get_name()}, new int[]{12, 1, 18}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"RECEIPT NO.", ":", strOrderNo}, new int[]{12, 1, 16}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            if (Globals.strIsBarcodePrint.equals("true")) {
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.printBarCode(strOrderNo, 8, 80, 150, 0, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                            }
                            mIPosPrinterService.printColumnsText(new String[]{"IN DT", ":", DateUtill.PaternDatePrintDate(orders.get_order_date())}, new int[]{5, 1, 22}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.printColumnsText(new String[]{"IN TM", ":", DateUtill.PaternDatePrintTime(orders.get_order_date())}, new int[]{5, 1, 22}, new int[]{0, 0, 0}, 0, callbackPPT8555);
                            int count = 0;
                            Double itemFinalTax = 0d;
                            while (count < order_detail.size()) {

                                String strItemCode = order_detail.get(count).get_item_code();

                                String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                        + strItemCode + "'  GROUP By order_detail.item_Code");
                                int len = 12;
                                if (strItemName.length() > len) {
                                    strItemName = strItemName.substring(0, len);
                                } else {
                                    for (int sLen = strItemName.length(); sLen < len; sLen++) {
                                        strItemName = strItemName + " ";
                                    }
                                }

                                String sale_price;
                                Double dDisAfterSalePrice = 0d;

                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                sale_price = Globals.myNumberFormat2Price((Double.parseDouble(dDisAfterSalePrice + "") * Double.parseDouble(order_detail.get(count).get_quantity() + "")), decimal_check);
                                //sale_price = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_sale_price()), decimal_check);
                                String line_total;
                                mIPosPrinterService.printSpecifiedTypeText("VEHICLE TYPE: \n", "ST", 30, callbackPPT8555);
                                line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                mIPosPrinterService.printColumnsText(new String[]{strItemName, " Rs." + sale_price}, new int[]{11, 9}, new int[]{0, 0}, 0, callbackPPT8555);

                                count++;
                            }

                            mIPosPrinterService.printColumnsText(new String[]{"V.NO : ", orders.get_remarks()}, new int[]{8, 20}, new int[]{0, 0}, 0, callbackPPT8555);
                            mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);

                            if (!settings.get_Footer_Text().equals("")) {
                                mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text() + "\n", "ST", 35, callbackPPT8555);
                            }
                            mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 35, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                         mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                        }
                        Globals.strContact_Code = "";
                        Globals.strResvContact_Code = "";
                        Globals.DiscountPer = "";
                        Globals.strOldCrAmt = "0";
                        Globals.setEmpty();
                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }
                }
            });

        } else {
            if (decimal_check.equals("2")) {
                if (settings.get_Print_Lang().equals("0")){
                    // English
                    if (settings.get_Print_Memo().equals("1")) {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                    String Print_type = "0";

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Order : " + orders.get_order_code() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                    if (orders.get_table_code().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText("Table : "+orders.get_table_code(),"ST",24, callbackPPT8555);
                                    }

                                    ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                    if (order_detail.size() > 0) {
                                        Double total = 0d;

                                        mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total","ST",24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        for (int i = 0; i < order_detail.size(); i++) {
                                            total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                            Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8)+"X"+order_detail.get(i).get_quantity()+"     "+Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check),"ST",24, callbackPPT8555);

                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Amount : "+Globals.myNumberFormat2Price(total, decimal_check),"ST",24, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    } else {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                                        String Print_type = "0";
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        Bitmap bitmap = StringToBitMap(settings.get_Logo());
                                        if (bitmap != null) {
                                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                            bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                            bitmap = getResizedBitmap(bitmap, 80, 120);
                                            mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1,callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24,1, callbackPPT8555);
                                        try {
                                            if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                            } else {
                                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24,1, callbackPPT8555);

                                               // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } catch (Exception ex) {}
                                        if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                        } else {
                                            mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo+":"+ Globals.objLPR.getLicense_No(),"ST",24,callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        //mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                        ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        ArrayList<String> arrayList = new ArrayList<String>();
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (order_payment_array.size() > 0) {

                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                arrayList.add(order_payment_array.get(i).get_payment_id());
                                            }

                                            if (arrayList.contains("1") && arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                            } else {
                                                if (arrayList.contains("5")) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit\n", "ST", 24, callbackPPT8555);
                                                } else if (arrayList.contains("1")) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.strIsBarcodePrint.equals("true")) {
                                            mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvNo+" : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvDate+" : " + DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID+" : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                        user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintCashier+" : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (Globals.ModeResrv.equals("Resv")) {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                            mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } else {
                                            if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                            } else {
                                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                                mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                                if (contact.get_gstin().length() > 0) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                                }
                                            }
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        int count = 0;
                                        Double itemFinalTax = 0d;
                                        while (count < order_detail.size()) {

                                            String strItemCode = order_detail.get(count).get_item_code();

                                            String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");

                                            String sale_price;
                                            Double dDisAfterSalePrice = 0d;
                                            Double dDisAfter = 0d;
                                            dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                            dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                            sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                            String line_total;
                                            line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                            Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                            String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                            mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check)+ "         "+sale_price+"      "+ line_total + "\n", "ST", 24, callbackPPT8555);
                                            String discnt = "";
                                            String disLbl = "";
                                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                            } else {
                                                if (Globals.strIsDiscountPrint.equals("true")) {
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    disLbl = "Dis :";
                                                }
                                                mIPosPrinterService.printSpecifiedTypeText(disLbl+" : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                            }

                                            mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                            if (settings.get_HSN_print().equals("true")) {
                                                item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            if (settings.get_ItemTax().equals("1") || settings.get_ItemTax().equals("3")) {
                                                Tax_Master tax_master = null;
                                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                    itemFinalTax += valueFinal;
                                                    mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name()+" :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            count++;
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Item    :" +  orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Item Quantity :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String subtotal = "";
                                        String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                        Cursor cursor1 = database.rawQuery(strTableQry, null);
                                        Tax_Master tax_master;
                                        while (cursor1.moveToNext()) {
                                            subtotal = cursor1.getString(0);
                                        }

                                        subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText("Subtotal      :" + subtotal + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        if (settings.get_ItemTax().equals("2") || settings.get_ItemTax().equals("3")) {

                                            strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                    "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                    "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText( tax_master.get_tax_name()+" : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                        String discount = "0";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                        } else {
                                            discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                mIPosPrinterService.printSpecifiedTypeText( "Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText( "Discount : " + discount + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                        String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Total : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                        String total_tax;
                                        total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                        if (Double.parseDouble(total_tax) > 0d) {
                                            mIPosPrinterService.printSpecifiedTypeText( "Total Tax : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                            String name = "", value = "";
                                            if (cursor.moveToFirst()) {
                                                do {
                                                    name = cursor.getString(0);
                                                    value = cursor.getString(1);
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                } while (cursor.moveToNext());
                                            }
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        String net_amount;
                                        net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                        String strCurrency;
                                        if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                            strCurrency = "";
                                        } else {
                                            strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText( "Net Amt : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String tender;
                                        tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Tender  : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String change_amount;
                                        change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Change  : " + change_amount+ "\n", "ST", 24, callbackPPT8555);
                                      *//**//**//**//*  mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }*//**//**//**//*

                                        if (false) {
                                            if (ck_project_type.equals("standalone")) {
                                                JSONObject jsonObject = new JSONObject();
                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    Double showAmount = 0d;
//
                                                    try {
                                                        String strCreditAmt = "", strDeditAmount = "";
                                                        Double creditAmount = 0d,
                                                                debitAmount = 0d;
                                                        Cursor cursor = null;

                                                        String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                        cursor = database.rawQuery(strQry1, null);
                                                        while (cursor.moveToNext()) {
                                                            strCreditAmt = cursor.getString(0);

                                                        }
                                                        creditAmount = Double.parseDouble(strCreditAmt);

                                                        String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                        cursor = database.rawQuery(strQry2, null);
                                                        while (cursor.moveToNext()) {
                                                            strDeditAmount = cursor.getString(0);

                                                        }
                                                        debitAmount = Double.parseDouble(strDeditAmount);
                                                        showAmount = debitAmount + creditAmount;
                                                    } catch (Exception ex) {
                                                    }
                                                    double abs1 = Math.abs(showAmount);
                                                    if (showAmount > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"DR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    }
                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = cursor1.getString(0);

                                                        }
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    Double strBalance = abs1 - Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                                }
                                            } else {

                                                JSONObject jsonObject = new JSONObject();

                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    String curAmount = "";
                                                    try {
                                                        strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                            } while (cursor1.moveToNext());
                                                        }
                                                    } catch (Exception ex) {
                                                        curAmount = "0";
                                                    }
                                                    double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                    double abs1 = Math.abs(ab);
                                                    if (ab > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+ "DR", "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {}
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        }

                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }
                                                    if (strCur.equals("")) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }

                                                    Double strBalance = ab + Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        if (!settings.get_Footer_Text().equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        bitmapRecycle(bitmap);
                                        mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                    }
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = "";
                                    Globals.strOldCrAmt = "0";
                                    Globals.setEmpty();
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }

                            }
                        });
                    }
                }else if (settings.get_Print_Lang().equals("1")){
                    if (settings.get_Print_Memo().equals("1")) {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                    String Print_type = "0";

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("Order : " + orders.get_order_code() + "\n", "ST", 24,1, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                    if (orders.get_table_code().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText("Table : "+orders.get_table_code(),"ST",24, callbackPPT8555);
                                    }

                                    ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                    if (order_detail.size() > 0) {
                                        Double total = 0d;

                                        mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total","ST",24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        for (int i = 0; i < order_detail.size(); i++) {
                                            total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                            Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8)+"X"+order_detail.get(i).get_quantity()+"     "+Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check),"ST",24, callbackPPT8555);

                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Amount : "+Globals.myNumberFormat2Price(total, decimal_check),"ST",24, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    } else {
                        // For Both
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                                        String strPOSNo = "Device ID/لحم." + " ";
                                        String strGSTNo = Globals.GSTLbl + " ";
                                        String strOrderNum = "Invoice Number/رقم الطلب" + "  ";
                                        String strOrderDate = "Invoice Date/تاريخ الطلب" + "  ";
                                        String strCashier = "Salesperson/أمين الصندوق" + " ";
                                        String Print_type = "0";
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        Bitmap bitmap = StringToBitMap(settings.get_Logo());
                                        if (bitmap != null) {
                                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                            bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                            bitmap = getResizedBitmap(bitmap, 80, 120);
                                            mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1,callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24,1, callbackPPT8555);

                                        try {
                                            if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                            } else {
                                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24,1, callbackPPT8555);

                                                mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } catch (Exception ex) {}
                                        if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                        } else {
                                            mIPosPrinterService.printSpecifiedTypeText(strGSTNo,"ST",24,callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(),"ST",24,callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                       // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                        ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        ArrayList<String> arrayList = new ArrayList<String>();
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (order_payment_array.size() > 0) {

                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                arrayList.add(order_payment_array.get(i).get_payment_id());
                                            }

                                            if (arrayList.contains("1") && arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                            } else {
                                                if (arrayList.contains("5")) {

                                                    mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                                } else if (arrayList.contains("1")) {

                                                    mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: النقدية\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.strIsBarcodePrint.equals("true")) {
                                            mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText(strOrderNum + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strOrderDate + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID+" : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                        user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                        mIPosPrinterService.printSpecifiedTypeText(strCashier + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (Globals.ModeResrv.equals("Resv")) {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                            mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } else {
                                            if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                            } else {
                                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                                mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                                if (contact.get_gstin().length() > 0) {
                                                    //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("الكمية       السعر       مجموع", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        int count = 0;
                                        Double itemFinalTax = 0d;
                                        while (count < order_detail.size()) {

                                            String strItemCode = order_detail.get(count).get_item_code();
// need to update code here if it sav in arabic


                                                String strItemName = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                        + strItemCode + "'  GROUP By order_detail.item_Code");




                                            String sale_price;
                                            Double dDisAfterSalePrice = 0d;
                                            Double dDisAfter = 0d;
                                            dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                            dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                            sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                            String line_total;
                                            line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                            Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                            String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                            mIPosPrinterService.printSpecifiedTypeText(line_total+ "         "+sale_price+"      "+ Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            String discnt = "";
                                            String disLbl = "";
                                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                            } else {
                                                if (Globals.strIsDiscountPrint.equals("true")) {
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    disLbl = "Dis :";
                                                }
                                                mIPosPrinterService.printSpecifiedTypeText(disLbl+" : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                            }

                                            mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                            if (settings.get_HSN_print().equals("true")) {
                                                item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            if (settings.get_ItemTax().equals("1") || settings.get_ItemTax().equals("3")) {
                                                Tax_Master tax_master = null;
                                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                    itemFinalTax += valueFinal;
                                                    mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name()+" :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            count++;
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("مجموع البند:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("البند الكمية:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String subtotal = "";
                                        String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                        Cursor cursor1 = database.rawQuery(strTableQry, null);
                                        Tax_Master tax_master;
                                        while (cursor1.moveToNext()) {
                                            subtotal = cursor1.getString(0);
                                        }

                                        subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText("المجموع الفرعي:", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        if (settings.get_ItemTax().equals("2") || settings.get_ItemTax().equals("3")) {

                                            strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                    "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                    "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText( tax_master.get_tax_name()+" : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                        String discount = "0";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                        } else {
                                            discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                mIPosPrinterService.printSpecifiedTypeText( "خصم" + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText( discount + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                        String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "مجموع:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                        String total_tax;
                                        total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                        if (Double.parseDouble(total_tax) > 0d) {
                                            mIPosPrinterService.printSpecifiedTypeText( "مجموع الضريبة:\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText( total_tax + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                            String name = "", value = "";
                                            if (cursor.moveToFirst()) {
                                                do {
                                                    name = cursor.getString(0);
                                                    value = cursor.getString(1);
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 32, callbackPPT8555);
                                                } while (cursor.moveToNext());
                                            }
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        String net_amount;
                                        net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                        String strCurrency;
                                        if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                            strCurrency = "";
                                        } else {
                                            strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText( "ليس مكتب:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String tender;
                                        tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "مناقصة:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String change_amount;
                                        change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "يتغيرون:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( change_amount+ "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                        if (settings.get_Is_Accounts().equals("true")) {
                                            if (ck_project_type.equals("standalone")) {
                                                JSONObject jsonObject = new JSONObject();
                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    Double showAmount = 0d;
//
                                                    try {
                                                        String strCreditAmt = "", strDeditAmount = "";
                                                        Double creditAmount = 0d,
                                                                debitAmount = 0d;
                                                        Cursor cursor = null;

                                                        String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                        cursor = database.rawQuery(strQry1, null);
                                                        while (cursor.moveToNext()) {
                                                            strCreditAmt = cursor.getString(0);

                                                        }
                                                        creditAmount = Double.parseDouble(strCreditAmt);

                                                        String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                        cursor = database.rawQuery(strQry2, null);
                                                        while (cursor.moveToNext()) {
                                                            strDeditAmount = cursor.getString(0);

                                                        }
                                                        debitAmount = Double.parseDouble(strDeditAmount);
                                                        showAmount = debitAmount + creditAmount;
                                                    } catch (Exception ex) {
                                                    }
                                                    double abs1 = Math.abs(showAmount);
                                                    if (showAmount > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"DR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    }
                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = cursor1.getString(0);

                                                        }
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    Double strBalance = abs1 - Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                                }
                                            } else {

                                                JSONObject jsonObject = new JSONObject();

                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    String curAmount = "";
                                                    try {
                                                        strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                            } while (cursor1.moveToNext());
                                                        }
                                                    } catch (Exception ex) {
                                                        curAmount = "0";
                                                    }
                                                    double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                    double abs1 = Math.abs(ab);
                                                    if (ab > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+ "DR", "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {}
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        }

                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }
                                                    if (strCur.equals("")) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }

                                                    Double strBalance = ab + Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        if (!settings.get_Footer_Text().equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        bitmapRecycle(bitmap);
                                        mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                    }
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = "";
                                    Globals.strOldCrAmt = "0";
                                    Globals.setEmpty();
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    }
                }else {
                    if (settings.get_Print_Memo().equals("1")) {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    Orders orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                                    String Print_type = "0";

                                    mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                    mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("Order : " + orders.get_order_code() + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.setPrinterPrintFontSize(24, callbackPPT8555);
                                    if (orders.get_table_code().equals("")) {
                                    } else {
                                        mIPosPrinterService.printSpecifiedTypeText("Table : "+orders.get_table_code(),"ST",24, callbackPPT8555);
                                    }

                                    ArrayList<Order_Detail> order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                                    if (order_detail.size() > 0) {
                                        Double total = 0d;

                                        mIPosPrinterService.printSpecifiedTypeText("Name         Qty   Price  Total","ST",24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        for (int i = 0; i < order_detail.size(); i++) {
                                            total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                                            Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                                            mIPosPrinterService.printSpecifiedTypeText(item.get_item_name().substring(0, 8)+"X"+order_detail.get(i).get_quantity()+"     "+Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check),"ST",24, callbackPPT8555);

                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Amount : "+Globals.myNumberFormat2Price(total, decimal_check),"ST",24, callbackPPT8555);
                                    }

                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    } else {
                        ThreadPoolManager.getInstance().executeTask(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                                        String strPOSNo = "Device ID/لحم." + " ";
                                        String strGSTNo = Globals.GSTLbl + " ";
                                        String strOrderNum = "Invoice Number/رقم الطلب" + "  ";
                                        String strOrderDate = "Invoice Date/تاريخ الطلب" + "  ";
                                        String strCashier = "Salesperson/أمين الصندوق" + " ";
                                        String Print_type = "0";
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        Bitmap bitmap = StringToBitMap(settings.get_Logo());
                                        if (bitmap != null) {
                                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                            bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                            bitmap = getResizedBitmap(bitmap, 80, 120);
                                            mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24,1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1,callbackPPT8555);
                                        try {
                                            if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                            } else {
                                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1,callbackPPT8555);

                                               // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } catch (Exception ex) {}
                                        if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                        } else {
                                            mIPosPrinterService.printSpecifiedTypeText(strGSTNo,"ST",24,callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(Globals.objLPR.getLicense_No(),"ST",24,callbackPPT8555);
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.PrintOrder + "\n", "ST", 24, 1,callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                       // mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                        ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        ArrayList<String> arrayList = new ArrayList<String>();
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (order_payment_array.size() > 0) {

                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                arrayList.add(order_payment_array.get(i).get_payment_id());
                                            }

                                            if (arrayList.contains("1") && arrayList.contains("5")) {
                                                mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                            } else {
                                                if (arrayList.contains("5")) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: الائتمان / النقدية\n", "ST", 24, callbackPPT8555);
                                                } else if (arrayList.contains("1")) {
                                                    mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("نوع الفاتورة: النقدية\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        if (Globals.strIsBarcodePrint.equals("true")) {
                                            mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText(strOrderNum + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(strOrderDate + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID+" : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                        user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                        mIPosPrinterService.printSpecifiedTypeText(strCashier + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (Globals.ModeResrv.equals("Resv")) {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                            mIPosPrinterService.printSpecifiedTypeText("Customer/زبون\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                            if (contact.get_gstin().length() > 0) {
                                                //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        } else {
                                            if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                            } else {
                                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                                mIPosPrinterService.printSpecifiedTypeText("Customer/زبون\n" + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText(contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                                if (contact.get_gstin().length() > 0) {
                                                    //mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("اسم العنصر\n", "", 24, callbackPPT8555);
                                        mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total       Price        Qty\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("الكمية       السعر       مجموع", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        int count = 0;
                                        Double itemFinalTax = 0d;
                                        while (count < order_detail.size()) {

                                            String strItemCode = order_detail.get(count).get_item_code();

                                            String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");
                                            String strItemName_l = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                    + strItemCode + "'  GROUP By order_detail.item_Code");

                                            String sale_price;
                                            Double dDisAfterSalePrice = 0d;
                                            Double dDisAfter = 0d;
                                            dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                            dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                            sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                            String line_total;
                                            line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText(strItemName_l + "\n", "ST", 24, callbackPPT8555);

                                            Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                            String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                            mIPosPrinterService.printSpecifiedTypeText(line_total+ "         "+sale_price+"      "+ Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            String discnt = "";
                                            String disLbl = "";
                                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                            } else {
                                                if (Globals.strIsDiscountPrint.equals("true")) {
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    disLbl = "Dis :";
                                                }
                                                mIPosPrinterService.printSpecifiedTypeText(disLbl+" : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                            }

                                            mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                            if (settings.get_HSN_print().equals("true")) {
                                                item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            if (settings.get_ItemTax().equals("1") || settings.get_ItemTax().equals("3")) {
                                                Tax_Master tax_master = null;
                                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                    itemFinalTax += valueFinal;
                                                    mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name()+" :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            count++;
                                        }

                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Total Item/مجموع البند:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("Item Quantity/البند الكمية:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        String subtotal = "";
                                        String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                        Cursor cursor1 = database.rawQuery(strTableQry, null);
                                        Tax_Master tax_master;
                                        while (cursor1.moveToNext()) {
                                            subtotal = cursor1.getString(0);
                                        }

                                        subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                        mIPosPrinterService.printSpecifiedTypeText("Subtotal/المجموع الفرعي:", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText(subtotal + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        if (settings.get_ItemTax().equals("2") || settings.get_ItemTax().equals("3")) {

                                            strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                    "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                    "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                                mIPosPrinterService.printSpecifiedTypeText( tax_master.get_tax_name()+" : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }

                                        String discount = "0";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                        } else {
                                            discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                mIPosPrinterService.printSpecifiedTypeText( "Discount/خصم" + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                                mIPosPrinterService.printSpecifiedTypeText( discount + "\n", "ST", 24, callbackPPT8555);
                                            }
                                        }
                                        String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                        String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Total/مجموع:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                        String total_tax;
                                        total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                        if (Double.parseDouble(total_tax) > 0d) {
                                            mIPosPrinterService.printSpecifiedTypeText( "Total Tax/مجموع الضريبة:\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText( total_tax + "\n", "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                            Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                            String name = "", value = "";
                                            if (cursor.moveToFirst()) {
                                                do {
                                                    name = cursor.getString(0);
                                                    value = cursor.getString(1);
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                                } while (cursor.moveToNext());
                                            }
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        String net_amount;
                                        net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                        String strCurrency;
                                        if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                            strCurrency = "";
                                        } else {
                                            strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText( "Net Amt/ليس مكتب:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String tender;
                                        tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Tender/مناقصة:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                        String change_amount;
                                        change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                        mIPosPrinterService.printSpecifiedTypeText( "Change/يتغيرون:\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( change_amount+ "\n", "ST", 24, callbackPPT8555);
                                   *//**//**//**//*     mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                        if (order_payment_array.size() > 0) {
                                            for (int i = 0; i < order_payment_array.size(); i++) {
                                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                                String name = "";
                                                if (payment != null) {
                                                    name = payment.get_payment_name();
                                                    mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }
*//**//**//**//*
                                        if (settings.get_Is_Accounts().equals("true")) {
                                            if (ck_project_type.equals("standalone")) {
                                                JSONObject jsonObject = new JSONObject();
                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    Double showAmount = 0d;
//
                                                    try {
                                                        String strCreditAmt = "", strDeditAmount = "";
                                                        Double creditAmount = 0d,
                                                                debitAmount = 0d;
                                                        Cursor cursor = null;

                                                        String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                        cursor = database.rawQuery(strQry1, null);
                                                        while (cursor.moveToNext()) {
                                                            strCreditAmt = cursor.getString(0);

                                                        }
                                                        creditAmount = Double.parseDouble(strCreditAmt);

                                                        String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                        cursor = database.rawQuery(strQry2, null);
                                                        while (cursor.moveToNext()) {
                                                            strDeditAmount = cursor.getString(0);

                                                        }
                                                        debitAmount = Double.parseDouble(strDeditAmount);
                                                        showAmount = debitAmount + creditAmount;
                                                    } catch (Exception ex) {
                                                    }
                                                    double abs1 = Math.abs(showAmount);
                                                    if (showAmount > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"DR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    }
                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = cursor1.getString(0);

                                                        }
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    Double strBalance = abs1 - Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                                }
                                            } else {

                                                JSONObject jsonObject = new JSONObject();

                                                if (Globals.strContact_Code.equals("")) {
                                                    mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                                } else {
                                                    String curAmount = "";
                                                    try {
                                                        strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);
                                                        if (cursor1.moveToFirst()) {
                                                            do {
                                                                curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                            } while (cursor1.moveToNext());
                                                        }
                                                    } catch (Exception ex) {
                                                        curAmount = "0";
                                                    }
                                                    double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                                    double abs1 = Math.abs(ab);
                                                    if (ab > 0) {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+ "DR", "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Old Amt", abs1 + "");
                                                    } catch (Exception ex) {}
                                                    String strCur = "";

                                                    try {
                                                        strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                        cursor1 = database.rawQuery(strTableQry, null);

                                                        while (cursor1.moveToNext()) {
                                                            strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                        }

                                                    } catch (Exception ex) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }
                                                    if (strCur.equals("")) {
                                                        strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    } else {
                                                        mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                                    }

                                                    try {
                                                        jsonObject.put("Current Amt", strCur + "");
                                                    } catch (Exception ex) {

                                                    }

                                                    Double strBalance = ab + Double.parseDouble(strCur);
                                                    try {
                                                        jsonObject.put("Balance Amt", strBalance + "");
                                                    } catch (Exception ex) {

                                                    }
                                                    String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                                    db.executeDML(strUpdatePayment, database);

                                                    mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                                }
                                            }
                                        }

                                        mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        if (!settings.get_Footer_Text().equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        }
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                        bitmapRecycle(bitmap);
                                        mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                                    }
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = "";
                                    Globals.strOldCrAmt = "0";
                                    Globals.setEmpty();
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                }

                            }
                        });
                    }
                }



            } else {
                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                                String Print_type = "0";
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                Bitmap bitmap = StringToBitMap(settings.get_Logo());
                                if (bitmap != null) {
                                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                    bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                    bitmap = getResizedBitmap(bitmap, 80, 120);
                                    mIPosPrinterService.printBitmap(1, 12, bitmap, callbackPPT8555);
                                }

                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24,1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24,1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1,callbackPPT8555);
                                try {
                                    if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                    } else {
                                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1,callbackPPT8555);

                                       // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                } catch (Exception ex) {}
                                if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                } else {
                                    mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo+":"+ Globals.objLPR.getLicense_No(),"ST",24,callbackPPT8555);
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.PrintSpecFormatText(Globals.PrintOrder + "\n", "ST", 24, 1,callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                              //  mIPosPrinterService.printSpecifiedTypeText(Globals.PrintOrder + "\n", "ST", 24, callbackPPT8555);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                ArrayList<String> arrayList = new ArrayList<String>();
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (order_payment_array.size() > 0) {

                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        arrayList.add(order_payment_array.get(i).get_payment_id());
                                    }

                                    if (arrayList.contains("1") && arrayList.contains("5")) {
                                        mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit/Cash\n", "ST", 24, callbackPPT8555);
                                    } else {
                                        if (arrayList.contains("5")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Credit\n", "ST", 24, callbackPPT8555);
                                        } else if (arrayList.contains("1")) {
                                            mIPosPrinterService.printSpecifiedTypeText("Invoice Type: Cash\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                }

                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                if (Globals.strIsBarcodePrint.equals("true")) {
                                    mIPosPrinterService.printBarCode(strOrderNo, 8, 60, 120, 0, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                }

                                mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvNo+" : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText(Globals.PrintInvDate+" : " + DateUtill.PaternDate1(orders.get_order_date()) + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText(Globals.PrintDeviceID+" : " + Globals.objLPD.getDevice_Name() + "\n", "ST", 24, callbackPPT8555);
                                user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                mIPosPrinterService.printSpecifiedTypeText(Globals.PrintCashier+" : " + user.get_name() + "\n", "ST", 24, callbackPPT8555);
                                if (Globals.ModeResrv.equals("Resv")) {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                    mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                    if (contact.get_gstin().length() > 0) {
                                        mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                } else {
                                    if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                    } else {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                        mIPosPrinterService.printSpecifiedTypeText("Customer : " + contact.get_name() + "\n", "ST", 24, callbackPPT8555);
                                        if (contact.get_gstin().length() > 0) {
                                            mIPosPrinterService.printSpecifiedTypeText("Customer GST No. : " + contact.get_gstin() + "\n", "ST", 24, callbackPPT8555);

                                        }
                                    }
                                }

                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Item Name\n", "", 24, callbackPPT8555);
                                mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Qty       Price       Total\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                int count = 0;
                                Double itemFinalTax = 0d;
                                while (count < order_detail.size()) {

                                    String strItemCode = order_detail.get(count).get_item_code();
                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;
                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                   if(settings.get_Print_Lang().equals("0")) {
                                       String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                               + strItemCode + "'  GROUP By order_detail.item_Code");

                                       mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);

                                   }
                                   else if(settings.get_Print_Lang().equals("1")){
                                       String strItemName = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                               + strItemCode + "'  GROUP By order_detail.item_Code");

                                       mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);


                                   }

                                   else{
                                       String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                               + strItemCode + "'  GROUP By order_detail.item_Code");

                                       String strItemName_l = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                               + strItemCode + "'  GROUP By order_detail.item_Code");
                                       mIPosPrinterService.printSpecifiedTypeText(strItemName + "\n", "ST", 24, callbackPPT8555);
                                       mIPosPrinterService.printSpecifiedTypeText(strItemName_l + "\n", "ST", 24, callbackPPT8555);

                                   }

                                    Double disTemp = Double.parseDouble(order_detail.get(count).get_sale_price());
                                    String discntTemp = Globals.myNumberFormat2Price(disTemp, decimal_check);

                                    mIPosPrinterService.printSpecifiedTypeText(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check)+ "         "+sale_price+"    "+ line_total + "\n", "ST", 24, callbackPPT8555);
                                    String discnt = "";
                                    String disLbl = "";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                            discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                            disLbl = "Dis :";
                                        }
                                        mIPosPrinterService.printSpecifiedTypeText(disLbl+" : " + discnt + "\n", "ST", 24, callbackPPT8555);
                                    }

                                    mIPosPrinterService.setPrinterPrintAlignment(0, callbackPPT8555);
                                    if (settings.get_HSN_print().equals("true")) {
                                        item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText("HSN Code :" + item.get_hsn_sac_code() + "\n", "ST", 24, callbackPPT8555);
                                    }
                                    if (settings.get_ItemTax().equals("1") || settings.get_ItemTax().equals("3")) {
                                        Tax_Master tax_master = null;
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                            itemFinalTax += valueFinal;
                                            mIPosPrinterService.printSpecifiedTypeText(tax_master.get_tax_name()+" :" + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    count++;
                                }

                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Total Item :" +  orders.get_total_item() + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("Item Quantity :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                String subtotal = "";
                                String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                Cursor cursor1 = database.rawQuery(strTableQry, null);
                                Tax_Master tax_master;
                                while (cursor1.moveToNext()) {
                                    subtotal = cursor1.getString(0);
                                }

                                subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                mIPosPrinterService.printSpecifiedTypeText("Subtotal :" + subtotal + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                if (settings.get_ItemTax().equals("2") || settings.get_ItemTax().equals("3")) {

                                    strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                            "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                            "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                    cursor1 = database.rawQuery(strTableQry, null);

                                    while (cursor1.moveToNext()) {
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                        mIPosPrinterService.printSpecifiedTypeText( tax_master.get_tax_name()+" : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }

                                String discount = "0";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                } else {
                                    discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        mIPosPrinterService.printSpecifiedTypeText( "Discount : " + Globals.DiscountPer + "%" + "\n", "ST", 24, callbackPPT8555);
                                        mIPosPrinterService.printSpecifiedTypeText( "Discount : " + discount + "\n", "ST", 24, callbackPPT8555);
                                    }
                                }
                                String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                mIPosPrinterService.printSpecifiedTypeText( "Total : " + tatalAftrDis + "\n", "ST", 24, callbackPPT8555);
                                String total_tax;
                                total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                if (Double.parseDouble(total_tax) > 0d) {
                                    mIPosPrinterService.printSpecifiedTypeText( "Total Tax : " + total_tax + "\n", "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                    Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                    String name = "", value = "";
                                    if (cursor.moveToFirst()) {
                                        do {
                                            name = cursor.getString(0);
                                            value = cursor.getString(1);
                                            mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                                        } while (cursor.moveToNext());
                                    }
                                }
                                mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                mIPosPrinterService.printSpecifiedTypeText( "Net Amt : " + net_amount + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                mIPosPrinterService.printSpecifiedTypeText( "Tender : " + tender + "" + strCurrency + "\n", "ST", 24, callbackPPT8555);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                mIPosPrinterService.printSpecifiedTypeText( "Change : " + change_amount+ "\n", "ST", 24, callbackPPT8555);
                             *//**//**//**//*   mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                if (order_payment_array.size() > 0) {
                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                        String name = "";
                                        if (payment != null) {
                                            name = payment.get_payment_name();
                                            mIPosPrinterService.printSpecifiedTypeText( name+" : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)+ "\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                    mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                }*//**//**//**//*

                                if (settings.get_Is_Accounts().equals("true")) {
                                    if (ck_project_type.equals("standalone")) {
                                        JSONObject jsonObject = new JSONObject();
                                        if (Globals.strContact_Code.equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                        } else {
                                            Double showAmount = 0d;
//
                                            try {
                                                String strCreditAmt = "", strDeditAmount = "";
                                                Double creditAmount = 0d,
                                                        debitAmount = 0d;
                                                Cursor cursor = null;

                                                String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                cursor = database.rawQuery(strQry1, null);
                                                while (cursor.moveToNext()) {
                                                    strCreditAmt = cursor.getString(0);

                                                }
                                                creditAmount = Double.parseDouble(strCreditAmt);

                                                String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                cursor = database.rawQuery(strQry2, null);
                                                while (cursor.moveToNext()) {
                                                    strDeditAmount = cursor.getString(0);

                                                }
                                                debitAmount = Double.parseDouble(strDeditAmount);
                                                showAmount = debitAmount + creditAmount;
                                            } catch (Exception ex) {
                                            }
                                            double abs1 = Math.abs(showAmount);
                                            if (showAmount > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"DR", "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                            }
                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {

                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = cursor1.getString(0);

                                                }
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }
                                            Double strBalance = abs1 - Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);

                                        }
                                    } else {

                                        JSONObject jsonObject = new JSONObject();

                                        if (Globals.strContact_Code.equals("")) {
                                            mIPosPrinterService.printSpecifiedTypeText( "**", "ST", 24, callbackPPT8555);
                                        } else {
                                            String curAmount = "";
                                            try {
                                                strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);
                                                if (cursor1.moveToFirst()) {
                                                    do {
                                                        curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                    } while (cursor1.moveToNext());
                                                }
                                            } catch (Exception ex) {
                                                curAmount = "0";
                                            }
                                            double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                            double abs1 = Math.abs(ab);
                                            if (ab > 0) {
                                                mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+"CR", "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText( "Old Amt :"+Globals.myNumberFormat2Price(abs1, decimal_check)+ "DR", "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {}
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);

                                                }

                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                            }
                                            if (strCur.equals("")) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                            } else {
                                                mIPosPrinterService.printSpecifiedTypeText( "Current Amt :"+strCur, "ST", 24, callbackPPT8555);
                                            }

                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }

                                            Double strBalance = ab + Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mIPosPrinterService.printSpecifiedTypeText( "Balance Amt :"+Globals.myNumberFormat2Price(strBalance, decimal_check), "ST", 24, callbackPPT8555);
                                            mIPosPrinterService.printSpecifiedTypeText("--------------------------------\n", "ST", 24, callbackPPT8555);
                                        }
                                    }
                                }

                                mIPosPrinterService.setPrinterPrintAlignment(1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                if (!settings.get_Footer_Text().equals("")) {
                                    mIPosPrinterService.printSpecifiedTypeText(settings.get_Footer_Text(), "ST", 24, callbackPPT8555);
                                    mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                }
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printSpecifiedTypeText("" + settings.get_Copy_Right() + "\n", "ST", 24, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                                bitmapRecycle(bitmap);
                                mIPosPrinterService.printerPerformPrint(160,  callbackPPT8555);
                            }
                            Globals.strContact_Code = "";
                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = "";
                            Globals.strOldCrAmt = "0";
                            Globals.setEmpty();
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                });
            }*//**//*
        }*//*
    }*/

    private String bluetooth_100(Orders orders, ArrayList<Order_Detail> order_detail) {
        String msg = "", flag = "0";
        String lang = getString(R.string.bluetooth_strLang);

        final byte[] cmd = new byte[3];
        cmd[0] = 0x1b;
        cmd[1] = 0x21;

        if (opr.equals("PayCollection")) {

            if (mService.isAvailable() == false) {

            } else {
                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                    final Pay_Collection pay_collection = Pay_Collection.getPay_Collection(getApplicationContext(), " WHERE id = '" + id + "'", database);

                    //printImage();
                    mService.sendMessage("Receipt Voucher", "GBK");
                    byte[] ab;
                    ab = BytesUtil.setAlignCenter(0);
                    mService.write(ab);

                    mService.sendMessage("Receipt No. :" + pay_collection.get_collection_code(), "GBK");
                    mService.sendMessage("Date  :" + pay_collection.get_collection_date(), "GBK");
                    String amount;
                    amount = Globals.myNumberFormat2Price(Double.parseDouble(pay_collection.get_amount()), decimal_check);
                    mService.sendMessage("Amount :" + amount, "GBK");

                    String[] str = amount.split("\\.");
                    if (str.length == 1) {
                        mService.sendMessage("In Words :" + Globals.convert(Integer.parseInt(str[0].toString())) + " Only ", "GBK");
                    } else if (str.length == 2) {
                        if (Integer.parseInt(str[1].toString()) == 0) {
                            mService.sendMessage("In Words :" + Globals.convert(Integer.parseInt(str[0].toString())) + " KD  Only ", "GBK");

                        } else {
                            mService.sendMessage("In Words :" + Globals.convert(Integer.parseInt(str[0].toString())) + " KD " + Globals.convert(Integer.parseInt(str[1].toString())) + " Fills Only ", "GBK");
                        }

                    }

                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + pay_collection.get_contact_code() + "'");
                    mService.sendMessage("Received From :" + contact.get_name(), "GBK");
                    mService.sendMessage("Cash/Cheque   :" + pay_collection.get_payment_mode(), "GBK");

                    if (pay_collection.get_payment_mode().equals("CHEQUE")) {
                        Bank bank = Bank.getBank(getApplicationContext(), " WHERE bank_code='" + pay_collection.get_ref_type() + "'", database);
                        mService.sendMessage("Bank Name  :" + bank.get_bank_name(), "GBK");
                        mService.sendMessage("Cheque No  :" + pay_collection.get_ref_no(), "GBK");

                    }

                    mService.sendMessage("On Account  :" + pay_collection.get_on_account(), "GBK");


                    mService.sendMessage("Remarks  :" + pay_collection.get_remarks(), "GBK");

                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                    mService.sendMessage("" + user.get_name(), "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("Receiver Signature", "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("", "GBK");
                    cmd[2] &= 0xEF;
                    mService.write(cmd);
                }
                flag = "1";
                Globals.setEmpty();
                Globals.strContact_Code = "";
                Globals.strResvContact_Code = "";
                Globals.DiscountPer = 0;
                Globals.strOldCrAmt = "0";
            }


        } else if (lite_pos_registration.getIndustry_Type().equals("4")) {
            if (mService.isAvailable() == false) {

            } else {
                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                    byte[] ab;
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);
                    mService.sendMessage("RECEIPT", "GBK");


                    try {
                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {

                        } else {
                            mService.sendMessage("" + Globals.objLPR.getService_code_tariff(), "GBK");
                        }
                    } catch (Exception ex) {

                    }
                    mService.sendMessage("" + Globals.objLPR.getCompany_Name(), "GBK");
                    mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");
                    mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");
                    ab = BytesUtil.setAlignCenter(0);
                    mService.write(ab);

                    mService.sendMessage(Globals.PrintDeviceID + " : " + Globals.objLPD.getDevice_Name(), "GBK");
                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);

                    mService.sendMessage(Globals.PrintCashier + " : " + user.get_name(), "GBK");
                    mService.sendMessage("RECEIPT NO. : " + strOrderNo, "GBK");
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);
                    if (Globals.strIsBarcodePrint.equals("true")) {
                        byte[] sendData;
                        sendData = BytesUtil.getPrintQRCode(strOrderNo, 1, 0);
                        mService.write(sendData);
                        ab = BytesUtil.setAlignCenter(0);
                        mService.write(ab);
                    }
                    mService.sendMessage("IN DT : " + DateUtill.PaternDatePrintDate(orders.get_order_date()), "GBK");
                    mService.sendMessage("IN TM : " + DateUtill.PaternDatePrintTime(orders.get_order_date()), "GBK");

                    int count = 0;
                    Double itemFinalTax = 0d;
                    while (count < order_detail.size()) {

                        String strItemCode = order_detail.get(count).get_item_code();

                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                + strItemCode + "'  GROUP By order_detail.item_Code");
                        int len = 12;
                        if (strItemName.length() > len) {
                            strItemName = strItemName.substring(0, len);
                        } else {
                            for (int sLen = strItemName.length(); sLen < len; sLen++) {
                                strItemName = strItemName + " ";
                            }
                        }

                        String sale_price;
                        Double dDisAfterSalePrice = 0d;

                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                        sale_price = Globals.myNumberFormat2Price((Double.parseDouble(dDisAfterSalePrice + "") * Double.parseDouble(order_detail.get(count).get_quantity() + "")), decimal_check);

                        mService.sendMessage("VEHICLE TYPE:  \n", "GBK");
                        mService.sendMessage(strItemName + " Rs. " + sale_price, "GBK");
                        count++;
                    }
                    mService.sendMessage("V.NO : " + orders.get_remarks(), "GBK");
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);

                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                        mService.sendMessage(Globals.objsettings.get_Footer_Text() + "\n", "GBK");
                    }
                    mService.sendMessage(Globals.objsettings.get_Copy_Right() + "\n", "GBK");
                    mService.sendMessage("\n", "GBK");
                    cmd[2] &= 0xEF;
                    mService.write(cmd);
                }
                Globals.strContact_Code = "";
                Globals.strResvContact_Code = "";
                Globals.DiscountPer = 0;
                Globals.strOldCrAmt = "0";
                flag = "1";
                Globals.setEmpty();
            }

        } else {
            if ((lang.compareTo("en")) == 0) {
                try {
                    byte[] ab;
                    if (mService.isAvailable() == false) {
                    } else {
                        for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                            printImage();
                            ab = BytesUtil.setAlignCenter(1);
                            mService.write(ab);
                            mService.sendMessage("" + Globals.objLPR.getCompany_Name().toUpperCase(), "GBK");
                            mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");
                            mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");

                            ab = BytesUtil.setAlignCenter(0);
                            mService.write(ab);
                            if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                            } else {
                                mService.sendMessage(Globals.GSTLbl + " : " + Globals.objLPR.getLicense_No(), "GBK");
                            }
                            ab = BytesUtil.setAlignCenter(1);
                            mService.write(ab);
                            mService.sendMessage(Globals.PrintOrder, "GBK");
                            ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                            ArrayList<String> arrayList = new ArrayList<String>();
                            ab = BytesUtil.setAlignCenter(1);
                            mService.write(ab);
                            if (order_payment_array.size() > 0) {

                                for (int i = 0; i < order_payment_array.size(); i++) {
                                    arrayList.add(order_payment_array.get(i).get_payment_id());
                                }

                                if (arrayList.contains("1") && arrayList.contains("5")) {
                                    mService.sendMessage("Invoice Type: Credit/Cash", "GBK");
                                } else {
                                    if (arrayList.contains("5")) {
                                        mService.sendMessage("Invoice Type: Credit", "GBK");

                                    } else if (arrayList.contains("1")) {
                                        mService.sendMessage("Invoice Type: Cash", "GBK");
                                    }
                                }
                            }
                            if (Globals.strIsBarcodePrint.equals("true")) {
                                byte[] sendData;
                                sendData = BytesUtil.getPrintQRCode(strOrderNo, 1, 0);
                                mService.write(sendData);
                            }
                            ab = BytesUtil.setAlignCenter(0);
                            mService.write(ab);

                            mService.sendMessage(Globals.PrintInvNo + " : " + strOrderNo, "GBK");
                            mService.sendMessage(Globals.PrintInvDate + "   : " + DateUtill.PaternDate1(orders.get_order_date()), "GBK");
                            mService.sendMessage(Globals.PrintDeviceID + "      : " + Globals.objLPD.getDevice_Name(), "GBK");
                            user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                            mService.sendMessage(Globals.PrintCashier + "    : " + user.get_name(), "GBK");

                            if (Globals.ModeResrv.equals("Resv")) {
                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                mService.sendMessage("Customer     : " + contact.get_name(), "GBK");
                                if (contact.get_gstin().length() > 0) {
                                    mService.sendMessage("Customer GST No. : " + contact.get_gstin(), "GBK");
                                }
                            } else {
                                if (Globals.strContact_Code.equals("")) {
                                } else {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                    mService.sendMessage("Customer       : " + contact.get_name(), "GBK");
                                    if (contact.get_gstin().length() > 0) {
                                        mService.sendMessage("Customer GST No. : " + contact.get_gstin(), "GBK");
                                    }
                                }
                            }

                            mService.sendMessage("............................................................", "GBK");
                            mService.sendMessage("Item Name                    Qty         Price         Total", "GBK");
                            mService.sendMessage("............................................................", "GBK");

                            int count = 0;
                            Double itemFinalTax = 0d;
                            while (count < order_detail.size()) {

                                String strItemCode = order_detail.get(count).get_item_code();
                                String strItemName = Order_Detail.getItemName(getApplicationContext(), "WHERE order_detail.item_Code  = '"
                                        + strItemCode + "'  GROUP By order_detail.item_code");
                                String sale_price;
                                Double dDisAfterSalePrice = 0d;
//                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);
                                Double dDisAfter = 0d;
                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                String line_total;
                                line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                mService.sendMessage("" + strItemName, "GBK");
                                mService.sendMessage("                            " + order_detail.get(count).get_quantity() + "            " + sale_price + "         " + line_total, "GBK");

                                String discnt = "";
                                String disLbl = "";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                } else {
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                        discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                        disLbl = "Dis :";
                                    }
                                    mService.sendMessage("" + disLbl + " " + discnt, "GBK");
                                }

                                if (Globals.objsettings.get_HSN_print().equals("true")) {
                                    item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                    mService.sendMessage("HSN Code : " + item.get_hsn_sac_code() + "", "GBK");
                                }

                                if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                    Tax_Master tax_master = null;
                                    ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                    for (int i = 0; i < order_detail_tax.size(); i++) {
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                        double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                        itemFinalTax += valueFinal;
                                        //woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(valueFinal, decimal_check)}, new int[]{15, 6}, new int[]{0, 0}, callback);
                                        mService.sendMessage("" + tax_master.get_tax_name() + "            " + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "", "GBK");
                                    }
                                }
                                count++;
                            }

                            mService.sendMessage("............................................................", "GBK");
                            mService.sendMessage("Total Item    : " + orders.get_total_item(), "GBK");
                            mService.sendMessage("Item Quantity : " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check), "GBK");
                            String subtotal = "";
                            String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                            Cursor cursor1 = database.rawQuery(strTableQry, null);
                            Tax_Master tax_master = null;
                            while (cursor1.moveToNext()) {
                                subtotal = cursor1.getString(0);
                            }
                            subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                            mService.sendMessage("Subtotal      : " + subtotal, "GBK");
                            mService.sendMessage("............................................................", "GBK");
                            if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                        "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                        "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                cursor1 = database.rawQuery(strTableQry, null);

                                while (cursor1.moveToNext()) {
                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                    mService.sendMessage("" + tax_master.get_tax_name() + "    " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "", "GBK");
                                }
                                mService.sendMessage("............................................................", "GBK");
                            }

                            String discount = "0";
                            if (Double.parseDouble(orders.get_total_discount()) == 0) {

                            } else {
                                discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                if (Globals.strIsDiscountPrint.equals("true")) {
                                    mService.sendMessage("Discount      : " + Globals.DiscountPer + "%", "GBK");
                                    mService.sendMessage("Discount      : " + discount, "GBK");
                                }
                            }
                            String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                            String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                            mService.sendMessage("Total         : " + tatalAftrDis, "GBK");

                            String total_tax;
                            total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                            if (Double.parseDouble(total_tax) > 0d) {
                                mService.sendMessage("Total Tax     : " + total_tax, "GBK");
                                mService.sendMessage("............................................................", "GBK");
                                Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                String name = "", value = "";
                                if (cursor.moveToFirst()) {
                                    do {
                                        name = cursor.getString(0);
                                        value = cursor.getString(1);
                                        mService.sendMessage(name + "         " + total_tax, "GBK");
                                    } while (cursor.moveToNext());
                                }
                            }
                            mService.sendMessage("............................................................", "GBK");
                            String net_amount;
                            net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                            String strCurrency;
                            if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                strCurrency = "";
                            } else {
                                strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                            }
                            mService.sendMessage("Net Amt       : " + net_amount + "" + strCurrency, "GBK");
                            String tender;
                            tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                            mService.sendMessage("Tender        : " + tender, "GBK");
                            String change_amount;
                            change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                            mService.sendMessage("Change        : " + change_amount + "\n", "GBK");
                            cmd[2] &= 0xEF;
                            mService.write(cmd);
                            mService.sendMessage("............................................................", "GBK");
                            order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                            if (order_payment_array.size() > 0) {
                                for (int i = 0; i < order_payment_array.size(); i++) {
                                    Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                    String name = "";
                                    if (payment != null) {
                                        name = payment.get_payment_name();
                                        mService.sendMessage(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + "" + "\n", "GBK");
//                                    woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{9, 1, 20}, new int[]{0, 0, 0}, callback);
                                    }
                                }
                                mService.sendMessage("............................................................", "GBK");
                            }
                            if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                if (ck_project_type.equals("standalone")) {
                                    JSONObject jsonObject = new JSONObject();
                                    if (Globals.strContact_Code.equals("")) {
                                        mService.sendMessage("**\n", "GBK");
                                    } else {
                                        Double showAmount = 0d;
//                                    String curAmount = "";
                                        try {
                                            String strCreditAmt = "", strDeditAmount = "";
                                            Double creditAmount = 0d,
                                                    debitAmount = 0d;
                                            Cursor cursor = null;

                                            String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                            cursor = database.rawQuery(strQry1, null);
                                            while (cursor.moveToNext()) {
                                                strCreditAmt = cursor.getString(0);

                                            }
                                            creditAmount = Double.parseDouble(strCreditAmt);

                                            String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                            cursor = database.rawQuery(strQry2, null);
                                            while (cursor.moveToNext()) {
                                                strDeditAmount = cursor.getString(0);
                                            }
                                            debitAmount = Double.parseDouble(strDeditAmount);
                                            showAmount = debitAmount + creditAmount;
                                        } catch (Exception ex) {
                                        }

                                        double abs1 = Math.abs(showAmount);
                                        if (showAmount > 0) {
                                            mService.sendMessage("Old Amt        : " + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR" + "\n", "GBK");
                                        } else {
                                            mService.sendMessage("Old Amt        : " + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR" + "\n", "GBK");
                                        }
                                        try {
                                            jsonObject.put("Old Amt", abs1 + "");
                                        } catch (Exception ex) {
                                        }
                                        String strCur = "";

                                        try {
                                            strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                mService.sendMessage("Current Amt    : " + strCur + "" + "\n", "GBK");
                                            }
                                        } catch (Exception ex) {
                                            strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                            mService.sendMessage("Current Amt    : " + strCur + "" + "\n", "GBK");
                                        }
                                        if (strCur.equals("")) {
                                            strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                            mService.sendMessage("Current Amt    : " + strCur + "" + "\n", "GBK");
                                        }
                                        try {
                                            jsonObject.put("Current Amt", strCur + "");
                                        } catch (Exception ex) {
                                        }
                                        Double strBalance = abs1 - Double.parseDouble(strCur);
                                        try {
                                            jsonObject.put("Balance Amt", strBalance + "");
                                        } catch (Exception ex) {
                                        }

                                        String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                        db.executeDML(strUpdatePayment, database);

                                        mService.sendMessage("Balance Amount : " + Globals.myNumberFormat2Price(strBalance, decimal_check) + "" + "\n", "GBK");

                                        mService.sendMessage("............................................................", "GBK");
                                    }
                                } else {
                                    JSONObject jsonObject = new JSONObject();
                                    if (Globals.strContact_Code.equals("")) {
                                        mService.sendMessage("**\n", "GBK");
                                    } else {
                                        String curAmount = "";
                                        try {
                                            strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                            cursor1 = database.rawQuery(strTableQry, null);
                                            if (cursor1.moveToFirst()) {
                                                do {
                                                    curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                } while (cursor1.moveToNext());
                                            }
                                        } catch (Exception ex) {
                                            curAmount = "0";
                                        }
                                        double ab1 = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                        double abs1 = Math.abs(ab1);
                                        if (ab1 > 0) {
                                            mService.sendMessage("Old Amt        : " + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR" + "\n", "GBK");
                                        } else {
                                            mService.sendMessage("Old Amt        : " + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR" + "\n", "GBK");
                                        }
                                        try {
                                            jsonObject.put("Old Amt", curAmount + "");
                                        } catch (Exception ex) {

                                        }
                                        String strCur = "";

                                        try {
                                            strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                mService.sendMessage("Current Amt    : " + strCur + "" + "\n", "GBK");
                                            }
                                        } catch (Exception ex) {
                                            strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                            mService.sendMessage("Current Amt    : " + strCur + "" + "\n", "GBK");
                                        }
                                        if (strCur.equals("")) {
                                            strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                            mService.sendMessage("Current Amt    : " + strCur + "" + "\n", "GBK");
                                        }
                                        try {
                                            jsonObject.put("Current Amt", strCur + "");
                                        } catch (Exception ex) {

                                        }
                                        Double strBalance = ab1 + Double.parseDouble(strCur);
                                        try {
                                            jsonObject.put("Balance Amt", strBalance + "");
                                        } catch (Exception ex) {

                                        }
                                        String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                        db.executeDML(strUpdatePayment, database);

                                        mService.sendMessage("Balance Amount : " + Globals.myNumberFormat2Price(strBalance, decimal_check) + "" + "\n", "GBK");
                                        mService.sendMessage("............................................................", "GBK");
                                    }
                                }
                            }

                            if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                mService.sendMessage(Globals.objsettings.get_Footer_Text(), "GBK");
                            }
                            mService.sendMessage("                       " + Globals.objsettings.get_Copy_Right() + "\n\n", "GBK");
                            cmd[2] &= 0xEF;
                            mService.write(cmd);
                            byte[] print = {0x1b, 0x0c};
                            mService.write(print);
                        }
                        Globals.strContact_Code = "";
                        Globals.strResvContact_Code = "";
                        Globals.DiscountPer = 0;
                        Globals.strOldCrAmt = "0";

                        flag = "1";
                        Globals.setEmpty();
                    }
                } catch (Exception ex) {
                    String ab = ex.getMessage();
                }
            }
        }
        return flag;
    }

    private String bluetooth_80(Orders orders, ArrayList<Order_Detail> order_detail) {
        String msg = "", flag = "0";
        String lang = getString(R.string.bluetooth_strLang);

        final byte[] cmd = new byte[3];
        cmd[0] = 0x1b;
        cmd[1] = 0x21;


        if (Globals.objsettings.get_Print_Lang().equals("0")) {

                try {
                    byte[] ab;
                    if (mService.isAvailable() == false) {
                    } else {

                        String strString = "";
                        int strLength = 14;
                        for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                            //printImage();
                            ab = BytesUtil.setAlignCenter(1);
                            mService.write(ab);
                            mService.sendMessage("" + Globals.objLPR.getCompany_Name().toUpperCase(), "GBK");
                            if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");
                                mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");

                                try {
                                    if (Globals.objLPR.getService_code_tariff().equals(null) || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().equals("0")) {
                                    } else {
                                        mService.sendMessage("" + Globals.objLPR.getService_code_tariff(), "GBK");

                                    }
                                } catch (Exception ex) {
                                }


                                if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().equals("0")) {
                                } else {
                                    mService.sendMessage(Globals.GSTNo + " : " + Globals.objLPR.getLicense_No(), "GBK");

                                }

                                // mService.write(ab);
                                mService.sendMessage("...............................................", "GBK");
                                mService.sendMessage(Globals.PrintOrder, "GBK");
                                mService.sendMessage("...............................................", "GBK");
                            }
                            ab = BytesUtil.setAlignCenter(0);
                            mService.write(ab);
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                    ArrayList<String> arrayList = new ArrayList<String>();

                                    strString = Globals.myRequiredString("Invoice Type", strLength);
                                    if (order_payment_array.size() > 0) {

                                        for (int i = 0; i < order_payment_array.size(); i++) {
                                            arrayList.add(order_payment_array.get(i).get_payment_id());
                                        }
                                        if (arrayList.contains("1") && arrayList.contains("5")) {
                                            mService.sendMessage(strString + " : Credit/Cash", "GBK");
                                        } else {
                                            if (arrayList.contains("5")) {
                                                mService.sendMessage(strString + " : Credit", "GBK");

                                            } else if (arrayList.contains("1")) {
                                                mService.sendMessage(strString + " : Cash", "GBK");
                                            }
                                        }
                                    }
                                }
                            strString = Globals.myRequiredString(Globals.PrintInvNo  , strLength);
                            mService.sendMessage(strString + " : " + orders.get_order_code(), "GBK");
                            strString = Globals.myRequiredString(Globals.PrintInvDate  , strLength);
                            mService.sendMessage(strString + " : " + orders.get_order_date().substring(0,10), "GBK");
                            if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                strString = Globals.myRequiredString("Invoice Time", strLength);
                                mService.sendMessage(strString + " : " + orders.get_order_date().substring(11, 19), "GBK");
                                strString = Globals.myRequiredString(Globals.PrintDeviceID, strLength);
                                mService.sendMessage(strString + " : " + Globals.objLPD.getDevice_Name(), "GBK");
                                user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                strString = Globals.myRequiredString(Globals.PrintCashier, strLength);
                                mService.sendMessage(strString + " : " + user.get_name(), "GBK");


                                //Check 1
                                if (orders.get_contact_code().equals("") || orders.get_contact_code().equals("0")) {
                                } else {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                    strString = Globals.myRequiredString("Customer", strLength);
                                    mService.sendMessage(strString + " : " + contact.get_name(), "GBK");
                                    if (contact.get_gstin().length() > 0) {
                                        strString = Globals.myRequiredString("Customer GST", strLength);
                                        mService.sendMessage(strString + " : " + contact.get_gstin(), "GBK");
                                    }
                                }

                            }
                            if(Globals.strorderType.equals("")){


                                if(orders.get_order_type_id().equals("5")) {
                                    Globals.strorderType = "Dine-In";
                                    strString = Globals.myRequiredString("OrderType", strLength);
                                    mService.sendMessage(strString + " : " + Globals.strorderType + "\n", "GBK");
                                }
                            }
                                else{
                                strString = Globals.myRequiredString("OrderType", strLength);
                                mService.sendMessage(strString + " : " + Globals.strorderType + "\n", "GBK");

                                }

                          if(Globals.objLPR.getproject_id().equals("cloud")) {
                              if( Globals.strorderType.equals("Dine-In")) {

                                  Table table = Table.getTable(getApplicationContext(), database, db, " WHERE table_code='" + orders.get_table_code() + "'");
                                  if(table!=null) {

                                      Globals.table_code = table.get_table_code();
                                      Globals.table_name = table.get_table_name();
                                      Globals.strZoneName = table.getZone_name();

                                  strString = Globals.myRequiredString("Table No", strLength);
                                  mService.sendMessage(strString + " : " + Globals.table_name + "\n", "GBK");
                                  strString = Globals.myRequiredString("Zone", strLength);
                                  mService.sendMessage(strString + " : " + Globals.strZoneName + "\n", "GBK");

                                  }
                              }
                          }
                            mService.sendMessage("...............................................", "GBK");
                            mService.sendMessage("Item Name", "GBK");
                            mService.sendMessage("Qty            Price            Total", "GBK");
                            mService.sendMessage("...............................................", "GBK");

                            int count = 0;
                            Double itemFinalTax = 0d;
                            Double finalitemTax= 0d;
                            while (count < order_detail.size()) {

                                String strItemCode = order_detail.get(count).get_item_code();
                                item = Item.getItem(getApplicationContext(),"where item_code ='"+ strItemCode+"'",database,db);
                                String strItemName = Order_Detail.getItemName(getApplicationContext(), "WHERE order_detail.item_Code  = '"
                                        + strItemCode + "'  GROUP By order_detail.item_code");
                                String sale_price;
                                Double dDisAfterSalePrice = 0d;
//                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);

                                Double dDisAfter = 0d;
                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                String line_total;
                                line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                String tt = "";

                                item=Item.getItem(getApplicationContext(),"WHERE item_code='"+ strItemCode +"' ",database,db);
                                if(item!=null) {
                                    String ismodifier = item.getIs_modifier();
                                    if (ismodifier.equals("1")) {
                                        mService.sendMessage("" + strItemName  + " (M)", "GBK");
                                    }
                                    else{
                                        mService.sendMessage("" + strItemName, "GBK");

                                    }
                                }

                                String strItemQty,strItemPrice,strItemTotal;
                                //strString = Globals.myRequiredString(Globals.PrintInvNo, strLength);
                                strLength = 15;
                                strItemQty = Globals.myRequiredString(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check), strLength);

                                strItemPrice = Globals.myRequiredString(sale_price, 17);
                                strItemTotal = Globals.myRequiredString(line_total, 15);

                                mService.sendMessage(strItemQty
                                        + strItemPrice + strItemTotal, "GBK");



                                // Check 2
                                if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strLength = 14;
                                    String discnt = "";
                                    String disLbl = "";

                                    String strHSNLbl = "", HSNValue = "", strLBlDis = "";
                                    if (Globals.objsettings.get_HSN_print().equals("true")) {
                                        item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                        HSNValue = item.get_hsn_sac_code();
                                        strHSNLbl = "HSN Code :";

                                    }


                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        strLBlDis = "";
                                    } else {
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                            discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                            strLBlDis = "Discount";
                                        } else {
                                            strLBlDis = "";
                                        }

                                    }
                                    if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("false")) {

                                    } else if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("true")) {
                                        if(HSNValue!="") {
                                            strString = Globals.myRequiredString(strHSNLbl, strLength);
                                            mService.sendMessage(strString + "         " + HSNValue + "", "GBK");

                                        }

                                    } else if (Globals.strIsDiscountPrint.equals("true") && Globals.objsettings.get_HSN_print().equals("false")) {
                                        String strdiscount;
                                        //strLength = 23;
                                        if(discnt!="") {
                                            strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                            mService.sendMessage(strdiscount + discnt + "", "GBK");

                                        }
                                    } else {
                                        // HSN Code : A34455  Discount :
                                        if(HSNValue!="" || discnt!="") {
                                            strLength=9;
                                            strString = Globals.myRequiredString(strHSNLbl, strLength);
                                            String strdiscount;

                                            strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                            mService.sendMessage(strString + "" + HSNValue + "  " + strdiscount + ":" + discnt + "", "GBK");


                                        }
                                    }
                                    //Check 4
                                    if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                        Tax_Master tax_master = null;
                                        try {
                                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                //
                                                //strLength = 14;

                                                String strTaxName = tax_master.get_tax_name();
                                                String tax_rate;
//                        tax_rate = Globals.myNumberFormat2Price(Double.parseDouble(order_detail_tax.get(i).get_tax_value()), decimal_check);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));

                                                tax_rate = Globals.myNumberFormat2Price(valueFinal, decimal_check) + "";
                                                itemFinalTax += valueFinal;
                                                strLength = 23;
                                                strString = Globals.myRequiredString(strTaxName, strLength);

                                                mService.sendMessage(strString + tax_rate ,  "GBK");

                                            }
                                        } catch (Exception e) {
                                            System.out.println(e.getMessage());
                                        }
                                    }
                                }

                       /*         Tax_Master tax_master = null;
                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                    if(item.get_is_inclusive_tax().equals("0")) {
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                        double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                        itemFinalTax += valueFinal;
                                        finalitemTax += valueFinal;
                                    }
                                }*/
                                count++;
                            }

                            mService.sendMessage("...............................................", "GBK");
                            if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                strLength = 14;
                                strString = Globals.myRequiredString("Total Item", strLength);

                                mService.sendMessage(strString + "            :" + orders.get_total_item(), "GBK");
                                strString = Globals.myRequiredString("Item Quantity", strLength);

                                mService.sendMessage(strString + "            :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check), "GBK");
                                String subtotal = "";
                                String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                Cursor cursor1 = database.rawQuery(strTableQry, null);
                                Tax_Master tax_master = null;
                                while (cursor1.moveToNext()) {
                                    subtotal = cursor1.getString(0);
                                }
                                subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                                strString = Globals.myRequiredString("Subtotal", strLength);

                                mService.sendMessage(strString + "            :" + subtotal, "GBK");
                                mService.sendMessage("...............................................", "GBK");
                                if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {
                                    strLength = 14;
                                    strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                            "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                            "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                    cursor1 = database.rawQuery(strTableQry, null);

                                    while (cursor1.moveToNext()) {
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                        strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                        mService.sendMessage(strString + "            :" + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "", "GBK");

                                    }
                                    mService.sendMessage("...............................................", "GBK");

                                }


                                //Cgeck 5
                                String discount = "0";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                } else {
                                    discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        strLength = 14;
                                        strString = Globals.myRequiredString("Discount", strLength);

                                        //  mService.sendMessage(strString+"        :"+ Globals.DiscountPer + "%", "GBK");
                                        strString = Globals.myRequiredString("Discount", strLength);

                                        mService.sendMessage(strString + "            :" + discount, "GBK");
                                    }
                                }
                                strLength = 14;
                                String ttl_aftr_dis = (Double.parseDouble(subtotal) + finalitemTax) + "";
                                String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                strString = Globals.myRequiredString("Total", strLength);

                                mService.sendMessage(strString + "            :" + tatalAftrDis, "GBK");

                                String total_tax;
                                total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                if (Double.parseDouble(total_tax) > 0d) {
                                    strString = Globals.myRequiredString("Total Tax", strLength);

                                    mService.sendMessage(strString + "            :" + total_tax, "GBK");
                                  //  mService.sendMessage("...............................................", "GBK");
                                    Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                    String name = "", value = "";
                                    if (cursor.moveToFirst()) {
                                        do {
                                            name = cursor.getString(0);
                                            value = cursor.getString(1);
                                            int l1 = name.length();
                                            String tt = "";
                                            if (l1 > 24) {

                                                char[] nm = name.toUpperCase().toCharArray();
                                                for (int k1 = 0; k1 < 20; k1++) {

                                                    try {
                                                        tt = tt + nm[k1];
                                                    } catch (Exception ex) {
                                                        tt = tt + " ";
                                                    }
                                                }

                                            } else {
                                                char[] nm = name.toUpperCase()
                                                        .toCharArray();
                                                for (int k1 = 0; k1 < l1; k1++) {

                                                    tt = tt + nm[k1];
                                                }
                                                int space = 20 - l1;
                                                for (int v = 0; v < space; v++) {

                                                    tt = tt + " ";

                                                }
                                            }

                                            strString = Globals.myRequiredString(name, strLength);

                                            mService.sendMessage(strString + "            :" + value, "GBK");
                                        } while (cursor.moveToNext());
                                    }
                                }
                                mService.sendMessage("...............................................", "GBK");
                            }
                            String net_amount;
                            net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                            String strCurrency;
                            if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                strCurrency = "";
                            } else {
                                strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                            }
                            strString = Globals.myRequiredString("Net Amt"  , strLength);

                            mService.sendMessage(strString+"            :" + net_amount + "" + strCurrency, "GBK");
                            String tender;
                            tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                            strString = Globals.myRequiredString("Tender"  , strLength);

                            mService.sendMessage(strString+"            :" + tender, "GBK");
                            String change_amount;
                            change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                            strString = Globals.myRequiredString("Change"  , strLength);

                            mService.sendMessage(strString+"            :" + change_amount, "GBK");
//                                cmd[2] &= 0xEF;
//                                mService.write(cmd);
                            mService.sendMessage("...............................................", "GBK");

                            ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                            if (order_payment_array.size() > 0) {
                                for (int i = 0; i < order_payment_array.size(); i++) {
                                    Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                    String name = "";
                                    if (payment != null) {
                                        name = payment.get_payment_name();
                                        if(payment.get_payment_name().equals("CUSTOMER ACCOUNT")){
                                            strString = Globals.myRequiredString("Customer ACC." , strLength);
                                        }
                                        else {
                                            strString = Globals.myRequiredString(name, strLength);
                                        }
                                        mService.sendMessage(strString +"            :" + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) , "GBK");
//                                    woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{9, 1, 20}, new int[]{0, 0, 0}, callback);
                                    }
                                }
                                mService.sendMessage("...............................................", "GBK");
                            }
                            ab = BytesUtil.setAlignCenter(1);
                            mService.write(ab);

                            if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                mService.sendMessage(Globals.objsettings.get_Footer_Text(), "GBK");
                            }
                            mService.sendMessage(Globals.objsettings.get_Copy_Right() + "", "GBK");

                            mService.sendMessage("\n\n", "GBK");
//                            mService.sendMessage("\n", "GBK");
//                            mService.sendMessage("\n", "GBK");

                            cmd[2] &= 0xEF;
                            mService.write(cmd);
                            byte[] print = {0x1b, 0x0c};
                            mService.write(print);

                        }
                        Globals.strContact_Code = "";
                        Globals.strResvContact_Code = "";
                        Globals.DiscountPer = 0;
                        Globals.strOldCrAmt = "0";
                        Globals.strorderType="";
                        Globals.table_name="";
                        Globals.strZoneName="";
                        flag = "1";
                        Globals.setEmpty();
                    }
                } catch (Exception ex) {
                    String ab = ex.getMessage();
                    ab = ab;
                }
            }



        return flag;
    }

    private void ppt8527(final Orders orders, ArrayList<Order_Detail> order_detail) {

            if (Globals.objsettings.get_Print_Memo().equals("1")) {
                try {
                    JSONArray printTest = new JSONArray();

                    timeTools = new TimerCountTools();
                    timeTools.start();
                    ServiceManager.getInstence().getPrinter().setPrintFont(FontsType.simsun);

                //    orders = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                    String Print_type = "0";

                    if(Globals.objLPR.getShort_companyname().isEmpty()){
                        printTest.put(getPrintObject(Globals.objLPR.getCompany_Name(), "3", "center"));

                    }
                    else{
                        printTest.put(getPrintObject(Globals.objLPR.getShort_companyname(), "3", "center"));

                    }
                    printTest.put(getPrintObject("Order : " + orders.get_order_code(), "3", "center"));

                    if (orders.get_table_code().equals("")) {
                    } else {
                        printTest.put(getPrintObject("Table :" + orders.get_table_code(), "3", "left"));

                    }

                    order_detail = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                    if (order_detail.size() > 0) {
                        Double total = 0d;

                        printTest.put(getPrintObject("Name       Qty   Price   Total", "2", "left"));
                        printTest.put(getPrintObject("--------------------------------", "2", "left"));
                        for (int i = 0; i < order_detail.size(); i++) {
                            total = total + Double.parseDouble(order_detail.get(i).get_line_total());
                            Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail.get(i).get_item_code() + "'", database, db);
                            try {
                                String name = "";
                                String k = "";
                                if (item.get_item_name().length() <= 6) {
                                    int l = item.get_item_name().length();
                                    int space = 8 - l;
                                    for (int i2 = 0; i2 < space; i2++) {
                                        k = k + " ";
                                    }
                                    name = item.get_item_name() + k;
                                } else {
                                    try {
                                        name = item.get_item_name().substring(0, 8);
                                    } catch (Exception ex) {
                                        name = item.get_item_name();
                                    }


                                }
                                printTest.put(getPrintObject(name + "   " + "X " + order_detail.get(i).get_quantity() + "   " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_sale_price()), decimal_check) + "  " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(i).get_line_total()), decimal_check), "2", "left"));
                            } catch (Exception ex) {
                            }
                        }
                        printTest.put(getPrintObject("--------------------------------", "2", "left"));
                        printTest.put(getPrintObject("Total Amount :" + Globals.myNumberFormat2Price(total, decimal_check), "3", "left"));
                    }

                    printJson.put("spos", printTest);
                    ServiceManager.getInstence().getPrinter().print(printJson.toString(), null, printer_callback);
                    ServiceManager.getInstence().getPrinter().printBottomFeedLine(3);

                } catch (RemoteException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {
                  /*  Bitmap[] bitmap = null;
                    Bitmap bm;*/
                    String strString = "";
                    int strLength = 14;
                    JSONArray printTest = new JSONArray();


                    ServiceManager.getInstence().getPrinter().setPrintFont(FontsType.simsun);

                    String Print_type = "0";
                   /* bm = StringToBitMap(Globals.objsettings.get_Logo());
                    if (bm != null) {
                        JSONObject json11 = new JSONObject();
                        json11.put("content-type", "jpg");
                        json11.put("position", "center");
                        printTest.put(json11);
                        printJson.put("spos", printTest);
                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        bm.compress(Bitmap.CompressFormat.JPEG, 50, stream);
                        bitmap = new Bitmap[]{bm.createScaledBitmap(bm, 240, bm.getHeight(), true)};
                    }
*/
                    if(Globals.objLPR.getShort_companyname().isEmpty()){
                        printTest.put(getPrintObject(Globals.objLPR.getCompany_Name(), "3", "center"));

                    }
                    else{
                        printTest.put(getPrintObject(Globals.objLPR.getShort_companyname(), "3", "center"));

                    }

                    printTest.put(getPrintObject(Globals.objLPR.getAddress(), "3", "center"));

                    printTest.put(getPrintObject(Globals.objLPR.getMobile_No(), "3", "center"));
                    try {
                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")|| Globals.objLPR.getService_code_tariff().isEmpty()  ) {

                        } else {

                            printTest.put(getPrintObject(Globals.objLPR.getService_code_tariff(), "3", "center"));
                        }
                    } catch (Exception ex) {

                    }

                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().isEmpty()) {

                    } else {
                        printTest.put(getPrintObject(Globals.GSTNo + ":" + Globals.objLPR.getLicense_No(), "3", "center"));

                    }

                    printTest.put(getPrintObject(Globals.PrintOrder, "3", "center"));
                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                    ArrayList<String> arrayList = new ArrayList<String>();

                    if (order_payment_array.size() > 0) {

                        for (int i = 0; i < order_payment_array.size(); i++) {
                            arrayList.add(order_payment_array.get(i).get_payment_id());
                        }

                        if (arrayList.contains("1") && arrayList.contains("5")) {
                            printTest.put(getPrintObject("Invoice Type  : Credit/Cash", "2", "left"));

                        } else {
                            if (arrayList.contains("5")) {
                                printTest.put(getPrintObject("Invoice Type  : Credit", "2", "left"));

                            } else if (arrayList.contains("1")) {
                                printTest.put(getPrintObject("Invoice Type  : Cash", "2", "left"));
                            }
                        }
                    }

                    if (Globals.strIsBarcodePrint.equals("true")) {
//                            woyouService.printBarCode(strOrderNo, 8, 60, 120, 0, callback);
                    }
                    strString = Globals.myRequiredString(Globals.PrintInvNo , strLength);
                    printTest.put(getPrintObject(strString + ":" + strOrderNo, "2", "left"));
                    strString = Globals.myRequiredString(Globals.PrintInvDate , strLength);
                    printTest.put(getPrintObject(strString + ":" + DateUtill.PaternDate1(orders.get_order_date()).substring(0,11), "2", "left"));
                    strString = Globals.myRequiredString("Invoice Time" , strLength);
                    printTest.put(getPrintObject(strString + ":" + DateUtill.PaternDate1(orders.get_order_date()).substring(12,20), "2", "left"));
//                    woyouService.printColumnsText(new String[]{Globals.PrintInvDate, ":", DateUtill.PaternDate1(orders.get_order_date())}, new int[]{12, 1, 20}, new int[]{0, 0, 0}, callback);
                    strString = Globals.myRequiredString(Globals.PrintDeviceID , strLength);

                    printTest.put(getPrintObject(strString + ":" + Globals.objLPD.getDevice_Name(), "2", "left"));

                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                    strString = Globals.myRequiredString(Globals.PrintCashier , strLength);

                    printTest.put(getPrintObject(strString + ":" + user.get_name(), "2", "left"));


                    if (Globals.ModeResrv.equals("Resv")) {
                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                        strString = Globals.myRequiredString("Customer" , strLength);

                        printTest.put(getPrintObject(strString + ":" + contact.get_name(), "2", "left"));
                        if (contact.get_gstin().length() > 0) {
                            strString = Globals.myRequiredString("Customer GST No." , strLength);

                            printTest.put(getPrintObject(strString + ":" + contact.get_gstin(), "2", "left"));

                        }
                    } else {
                        if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                        } else {
                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");

                            strString = Globals.myRequiredString("Customer" , strLength);

                            printTest.put(getPrintObject(strString + ":" + contact.get_name(), "2", "left"));
                            if (contact.get_gstin().length() > 0) {
                                strString = Globals.myRequiredString("Customer GST No." , strLength);

                                printTest.put(getPrintObject(strString + ":" + contact.get_gstin(), "2", "left"));

                            }
                        }
                    }


                    printTest.put(getPrintObject("--------------------------------", "2", "left"));

                    printTest.put(getPrintObject("Item Name \n", "2", "left"));

                    printTest.put(getPrintObject("Qty       Price       Total\n", "2", "left"));

                    printTest.put(getPrintObject("--------------------------------", "2", "left"));
                    int count = 0;
                    Double itemFinalTax = 0d;
                    while (count < order_detail.size()) {

                        String strItemCode = order_detail.get(count).get_item_code();

                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                + strItemCode + "'  GROUP By order_detail.item_Code");


                        String sale_price;
                        Double dDisAfterSalePrice = 0d;

//                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);
                        Double dDisAfter = 0d;
                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                        String line_total;
                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);

                        try {
                            String name = "";
                            String k1 = "";
                            if (strItemName.length() <= 6) {
                                int l = strItemName.length();
                                int space = 8 - l;
                                for (int i2 = 0; i2 < space; i2++) {
                                    k1 = k1 + " ";
                                }
                                name = strItemName + k1;
                            } else {
                                try {
                                    name = strItemName.substring(0, 8);
                                } catch (Exception ex) {
                                    name = strItemName;
                                }
                            }

                            printTest.put(getPrintObject(name, "2", "left"));
                        } catch (Exception ex) {
                        }
                        printTest.put(getPrintObject(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check) + "            " + sale_price + "     " + line_total, "2", "left"));
                        if (Globals.objsettings.get_Print_Memo().equals("0")) {
                            String discnt = "";
                            String disLbl = "";

                            String strHSNLbl = "", HSNValue = "", strLBlDis = "";
                            if (Globals.objsettings.get_HSN_print().equals("true")) {
                                item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                HSNValue = item.get_hsn_sac_code();
                                strHSNLbl = "HSN Code :";

                            }


                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                strLBlDis = "";
                            } else {
                                if (Globals.strIsDiscountPrint.equals("true")) {
                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                    strLBlDis = "Discount";
                                } else {
                                    strLBlDis = "";
                                }

                            }
                            if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("false")) {

                            } else if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("true")) {
                                if (HSNValue != "") {
                                    strString = Globals.myRequiredString(strHSNLbl, strLength);
                                    printTest.put(getPrintObject(strString + "         " + HSNValue, "2", "left"));

                                  //  mIPosPrinterService.printSpecifiedTypeText(strString + "         " + HSNValue + "\n", "ST", 24, callbackPPT8555);

                                }

                            } else if (Globals.strIsDiscountPrint.equals("true") && Globals.objsettings.get_HSN_print().equals("false")) {
                                String strdiscount;
                                ///strLength = 23;
                                if (discnt != "") {
                                    strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                    printTest.put(getPrintObject(strdiscount + discnt , "2", "left"));

                                    //mIPosPrinterService.printSpecifiedTypeText(strdiscount + discnt + "\n", "ST", 24, callbackPPT8555);

                                    //mylist.add(strdiscount + discnt + "\n");
                                }
                            } else {
                                // HSN Code : A34455  Discount :
                                if (HSNValue != "" || discnt != "") {
                                   // strLength = 9;
                                    strString = Globals.myRequiredString(strHSNLbl, strLength);
                                    String strdiscount;

                                    strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                    printTest.put(getPrintObject(strString + "" + HSNValue + "  " + strdiscount + ":" + discnt, "2", "left"));

                                   // mIPosPrinterService.printSpecifiedTypeText(strString + "" + HSNValue + "  " + strdiscount + ":" + discnt + "\n", "ST", 24, callbackPPT8555);

                                }
                            }

                            if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                Tax_Master tax_master = null;
                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                    itemFinalTax += valueFinal;
                                    strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                    printTest.put(getPrintObject(strString + "    " + Globals.myNumberFormat2Price(valueFinal, decimal_check), "2", "left"));
                                }
                            }
                        }
                        count++;
                    }

                    printTest.put(getPrintObject("--------------------------------", "2", "left"));
                    strString = Globals.myRequiredString("Total Item" , strLength);

                    printTest.put(getPrintObject(strString + ":" + orders.get_total_item(), "2", "left"));
                    strString = Globals.myRequiredString("Item Quantity" , strLength);

                    printTest.put(getPrintObject(strString + ":" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check), "2", "left"));
                    String subtotal = "";
                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                    Tax_Master tax_master;
                    while (cursor1.moveToNext()) {
                        subtotal = cursor1.getString(0);
                    }
                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                    strString = Globals.myRequiredString("Subtotal" , strLength);

                    printTest.put(getPrintObject(strString + ":" + subtotal, "2", "left"));
                    printTest.put(getPrintObject("--------------------------------", "2", "left"));

                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {
                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                        cursor1 = database.rawQuery(strTableQry, null);
                        while (cursor1.moveToNext()) {
                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                            strString = Globals.myRequiredString(tax_master.get_tax_name() , strLength);

                            printTest.put(getPrintObject(strString + " " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check), "2", "left"));
                        }
                        printTest.put(getPrintObject("--------------------------------", "2", "left"));
                    }

                    String discount = "0";
                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                    } else {
                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                        if (Globals.strIsDiscountPrint.equals("true")) {
                            strString = Globals.myRequiredString("Discount" , strLength);

                            // printTest.put(getPrintObject("Discount      : " + Globals.DiscountPer + "%", "2", "left"));
                            printTest.put(getPrintObject("Discount" + ":" + discount, "2", "left"));
                        }
                    }
                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                    strString = Globals.myRequiredString("Total" , strLength);

                    printTest.put(getPrintObject(strString + ":" + tatalAftrDis, "2", "left"));
                    String total_tax;
                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                    if (Double.parseDouble(total_tax) > 0d) {
                        strString = Globals.myRequiredString("Total Tax" , strLength);

                        printTest.put(getPrintObject(strString + ":" + total_tax, "2", "left"));
                        printTest.put(getPrintObject("--------------------------------", "2", "left"));
                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                        String name = "", value = "";
                        if (cursor.moveToFirst()) {
                            do {
                                name = cursor.getString(0);
                                value = cursor.getString(1);
                                strString = Globals.myRequiredString(name , strLength);

                                printTest.put(getPrintObject(strString + ":" + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check), "2", "left"));
                            } while (cursor.moveToNext());
                        }
                    }
                    printTest.put(getPrintObject("--------------------------------", "2", "left"));
                    String net_amount;
                    net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                    String strCurrency;
                    if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                        strCurrency = "";
                    } else {
                        strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                    }
                    strString = Globals.myRequiredString("Net Amt" , strLength);

                    printTest.put(getPrintObject(strString + ":" + net_amount + "" + strCurrency, "2", "left"));
                    String tender;
                    tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                    strString = Globals.myRequiredString("Tender" , strLength);

                    printTest.put(getPrintObject(strString + ":" + tender, "2", "left"));
                    String change_amount;
                    change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                    strString = Globals.myRequiredString("Change" , strLength);

                    printTest.put(getPrintObject(strString + ":" + change_amount, "2", "left"));
                    printTest.put(getPrintObject("--------------------------------", "2", "left"));
                    order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                    if (order_payment_array.size() > 0) {
                        for (int i = 0; i < order_payment_array.size(); i++) {
                            Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                            String name = "";
                            if (payment != null) {
                                name = payment.get_payment_name();
                                strString = Globals.myRequiredString(name , strLength);

                                printTest.put(getPrintObject(strString + ":" + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check), "2", "left"));
                            }
                        }
                        printTest.put(getPrintObject("--------------------------------\n", "2", "left"));
                    }

                    if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                        if (ck_project_type.equals("standalone")) {
                            JSONObject jsonObject = new JSONObject();
                            if (Globals.strContact_Code.equals("")) {
                                printTest.put(getPrintObject("**", "2", "left"));
                            } else {
                                Double showAmount = 0d;
                                try {
                                    String strCreditAmt = "", strDeditAmount = "";
                                    Double creditAmount = 0d,
                                            debitAmount = 0d;
                                    Cursor cursor = null;
                                    String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                    cursor = database.rawQuery(strQry1, null);
                                    while (cursor.moveToNext()) {
                                        strCreditAmt = cursor.getString(0);
                                    }
                                    creditAmount = Double.parseDouble(strCreditAmt);
                                    String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                    cursor = database.rawQuery(strQry2, null);
                                    while (cursor.moveToNext()) {
                                        strDeditAmount = cursor.getString(0);
                                    }
                                    debitAmount = Double.parseDouble(strDeditAmount);
                                    showAmount = debitAmount + creditAmount;
                                } catch (Exception ex) {
                                }
                                double abs1 = Math.abs(showAmount);
                                if (showAmount > 0) {
                                    printTest.put(getPrintObject("Old Amt" + ":" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "2", "left"));
                                } else {
                                    printTest.put(getPrintObject("Old Amt" + ":" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "2", "left"));
                                }
                                try {
                                    jsonObject.put("Old Amt", abs1 + "");
                                } catch (Exception ex) {
                                }
                                String strCur = "";
                                try {
                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                    cursor1 = database.rawQuery(strTableQry, null);
                                    while (cursor1.moveToNext()) {
                                        strCur = cursor1.getString(0);
                                    }
                                    printTest.put(getPrintObject("Current Amt" + ":" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "2", "left"));
                                } catch (Exception ex) {
                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                    printTest.put(getPrintObject("Current Amt" + ":" + Globals.myNumberFormat2Price(Double.parseDouble(strCur), decimal_check), "2", "left"));
                                }
                                try {
                                    jsonObject.put("Current Amt", strCur + "");
                                } catch (Exception ex) {
                                }
                                Double strBalance = abs1 - Double.parseDouble(strCur);
                                try {
                                    jsonObject.put("Balance Amt", strBalance + "");
                                } catch (Exception ex) {
                                }
                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                db.executeDML(strUpdatePayment, database);
                                printTest.put(getPrintObject("Balance Amt" + ":" + Globals.myNumberFormat2Price(strBalance, decimal_check), "2", "left"));
                                printTest.put(getPrintObject("--------------------------------", "2", "left"));
                            }
                        } else {
                            JSONObject jsonObject = new JSONObject();
                            if (Globals.strContact_Code.equals("")) {
                                printTest.put(getPrintObject("**", "2", "left"));
                            } else {
                                String curAmount = "";
                                try {
                                    strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                    cursor1 = database.rawQuery(strTableQry, null);
                                    if (cursor1.moveToFirst()) {
                                        do {
                                            curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                        } while (cursor1.moveToNext());
                                    }
                                } catch (Exception ex) {
                                    curAmount = "0";
                                }
                                double ab = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                double abs1 = Math.abs(ab);
                                if (ab > 0) {
                                    printTest.put(getPrintObject("Old Amt" + ":" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "2", "left"));
                                } else {
                                    printTest.put(getPrintObject("Old Amt" + ":" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "2", "left"));
                                }
                                try {
                                    jsonObject.put("Old Amt", curAmount + "");
                                } catch (Exception ex) {
                                }
                                String strCur = "";
                                try {
                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                    cursor1 = database.rawQuery(strTableQry, null);
                                    while (cursor1.moveToNext()) {
                                        strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                    }
                                } catch (Exception ex) {
                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                    printTest.put(getPrintObject("Current Amt" + ":" + strCur, "2", "left"));
                                }
                                if (strCur.equals("")) {
                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                    printTest.put(getPrintObject("Current Amt" + ":" + strCur, "2", "left"));
                                } else {
                                    printTest.put(getPrintObject("Current Amt" + ":" + strCur, "2", "left"));
                                }
                                try {
                                    jsonObject.put("Current Amt", strCur + "");
                                } catch (Exception ex) {
                                }
                                Double strBalance = ab + Double.parseDouble(strCur);
                                try {
                                    jsonObject.put("Balance Amt", strBalance + "");
                                } catch (Exception ex) {
                                }
                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                db.executeDML(strUpdatePayment, database);
                                printTest.put(getPrintObject("Balance Amt" + ":" + Globals.myNumberFormat2Price(strBalance, decimal_check), "2", "left"));
                                printTest.put(getPrintObject("--------------------------------", "2", "left"));
                            }
                        }
                    }
                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                        printTest.put(getPrintObject(Globals.objsettings.get_Footer_Text(), "2", "left"));
                    }
                    printTest.put(getPrintObject(Globals.objsettings.get_Copy_Right(), "2", "center"));

                    timeTools = new TimerCountTools();
                    timeTools.start();
                    printJson.put("spos", printTest);
                    ServiceManager.getInstence().getPrinter().print(printJson.toString(), null, printer_callback);
                    ServiceManager.getInstence().getPrinter().printBottomFeedLine(3);

                    Globals.strContact_Code = "";
                    Globals.strResvContact_Code = "";
                    Globals.DiscountPer = 0;
                    Globals.strOldCrAmt = "0";
                    Globals.setEmpty();
                } catch (RemoteException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }

        }

    }
    private void ppt8527_parking(final Orders orders,Order_Detail order_detail,Order_Payment order_payment) throws Exception {
        String strString = "";
        int strLength = 14;
        JSONArray printTest = new JSONArray();


        ServiceManager.getInstence().getPrinter().setPrintFont(FontsType.simsun);

        String Print_type = "0";
        if(Globals.objLPR.getShort_companyname().isEmpty()){
            printTest.put(getPrintObject(Globals.objLPR.getCompany_Name(), "3", "center"));

        }
        else{
            printTest.put(getPrintObject(Globals.objLPR.getShort_companyname(), "3", "center"));

        }

        printTest.put(getPrintObject(Globals.objLPR.getAddress(), "3", "center"));

        printTest.put(getPrintObject(Globals.objLPR.getMobile_No(), "3", "center"));
        try {
            if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")|| Globals.objLPR.getService_code_tariff().isEmpty()  ) {

            } else {

                printTest.put(getPrintObject(Globals.objLPR.getService_code_tariff(), "3", "center"));
            }
        } catch (Exception ex) {

        }

        if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().isEmpty()) {

        } else {
            printTest.put(getPrintObject(Globals.GSTNo + ":" + Globals.objLPR.getLicense_No(), "3", "center"));

        }
        printTest.put(getPrintObject("\n--------------------------------\n", "3", "left"));

        strString = Globals.myRequiredString("Slip No" , strLength);
        printTest.put(getPrintObject(strString  + " : " + strOrderNo + "\n",  "3", "left"));
        if(orders.get_emp_code().length()>0) {
            strString = Globals.myRequiredString("Vehicle No", strLength);
            printTest.put(getPrintObject(strString + " : " + orders.get_table_code() + "\n","3", "left"));
        }
        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
        if(contact.get_contact_1().length()>0) {
            strString = Globals.myRequiredString("Mobile No", strLength);
            printTest.put(getPrintObject(strString + " : " + contact.get_contact_1() + "\n", "3", "left"));
        }
        if(orders.getRFID()!=null){
            strString = Globals.myRequiredString("NFC", strLength);
            printTest.put(getPrintObject(strString + " : " + orders.getRFID()  + "\n", "3", "left"));

          //  mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.getRFID() + "\n", "ST", 24, callbackPPT8555);
        }
        strString = Globals.myRequiredString("Vehicle Type", strLength);
        printTest.put(getPrintObject(strString + " : " + orders.get_remarks() + "\n", "3", "left"));
        strString = Globals.myRequiredString("In Date" , strLength);
        printTest.put(getPrintObject(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(0,11).toString() + "\n", "3", "left"));
        if(strflagbtn.equals("VehicleIn")) {
            if (orders.get_order_status().equals("CLOSE")) {
                strString = Globals.myRequiredString("In Time", strLength);

                printTest.put(getPrintObject(strString + " : " + orders.get_order_date().substring(11, 19).toString() + "\n", "3", "left"));

                strString = Globals.myRequiredString("OUT Time", strLength);

                printTest.put(getPrintObject(strString + " : " + orders.get_delivery_date().substring(11, 19) + "\n", "3", "left"));

            } else {
                strString = Globals.myRequiredString("In Time", strLength);

                printTest.put(getPrintObject(strString + " : " + orders.get_order_date().substring(11, 19) + "\n", "3", "left"));
            }
            strString = Globals.myRequiredString("Adv. AMT", strLength);
            printTest.put(getPrintObject(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get_discount()), decimal_check) + "\n", "3", "left"));
        }
        else if(strflagbtn.equals("Checkout")){
            strString = Globals.myRequiredString("OUT Time", strLength);

            printTest.put(getPrintObject(strString + " : " + orders.get_delivery_date().substring(11, 19) + "\n", "3", "left"));

        }
        strString = Globals.myRequiredString("Fare Amount", strLength);
        printTest.put(getPrintObject(strString + " : " +Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check) + "\n", "3", "left"));
        if(orders.get_order_status().equals("CLOSE")) {
            strString = Globals.myRequiredString("Collected Amt.", strLength);
            printTest.put(getPrintObject(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment.get_pay_amount()), decimal_check) + "\n","3", "left"));
        }
        ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
        if (order_payment_array.size() > 0) {
            for (int i = 0; i < order_payment_array.size(); i++) {
                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                String name = "";
                if (payment != null) {
                    name = payment.get_payment_name();
                    strString = Globals.myRequiredString("Payment Mode", strLength);
                    printTest.put(getPrintObject("\n"+strString + " : " + name, "3", "left"));
                }
            }
        }
        strString = Globals.myRequiredString("Vehicle Status", strLength);
        printTest.put(getPrintObject(strString + " : " + orders.get_order_status() + "\n","3", "left"));
        printTest.put(getPrintObject("\n--------------------------------\n", "3", "left"));

        printTest.put(getPrintObject(Globals.objsettings.get_Copy_Right(), "2", "center"));

        timeTools = new TimerCountTools();
        timeTools.start();
        printJson.put("spos", printTest);
        ServiceManager.getInstence().getPrinter().print(printJson.toString(), null, printer_callback);
        ServiceManager.getInstence().getPrinter().printBottomFeedLine(3);

    }

    private void mobile_pos_parking(final Orders orders, final Order_Detail order_detail,Order_Payment order_payment) {

        ThreadPoolManager.getInstance().executeTask(new Runnable() {
            @Override
            public void run() {
                try {
                    String strString = "";


                    for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                        String Print_type = "0";
                        woyouService.setAlignment(1, callback);
                        Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                        if (bitmap != null) {
                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                            bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                            bitmap = getResizedBitmap(bitmap, 80, 120);
                            woyouService.printBitmap(bitmap, callback);
                        }

                        woyouService.printTextWithFont(" \n", "", 24, callback);
                        woyouService.setAlignment(1, callback);
                        if (Globals.objLPR.getShort_companyname().isEmpty()) {
                            woyouService.printTextWithFont("" + Globals.objLPR.getCompany_Name() + "\n", "", 28, callback);

                        } else {
                            woyouService.printTextWithFont("" + Globals.objLPR.getShort_companyname() + "\n", "", 28, callback);

                        }
                        if (Globals.objsettings.get_Print_Memo().equals("0")) {
                            if (Globals.objLPR.getAddress().equals("") || Globals.objLPR.getAddress().equals("null") || Globals.objLPR.getAddress().length() == 0 || Globals.objLPR.getAddress().isEmpty()) {

                            } else {
                                woyouService.printTextWithFont("" + Globals.objLPR.getAddress() + "\n", "", 28, callback);
                            }
                            if (Globals.objLPR.getMobile_No().equals("") || Globals.objLPR.getMobile_No().equals("null") || Globals.objLPR.getMobile_No().length() == 0 || Globals.objLPR.getMobile_No().isEmpty()) {

                            } else {
                                woyouService.printTextWithFont("" + Globals.objLPR.getMobile_No() + "\n", "", 28, callback);
                            }
                            try {
                                if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().isEmpty()) {

                                } else {
                                    woyouService.printTextWithFont("" + Globals.objLPR.getService_code_tariff() + "\n", "", 28, callback);
                                }
                            } catch (Exception ex) {

                            }
                            woyouService.setFontSize(28, callback);
                            if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().isEmpty()) {

                            } else {
                                woyouService.printColumnsText(new String[]{Globals.GSTLbl, ":", Globals.objLPR.getLicense_No()}, new int[]{6, 1, 20}, new int[]{0, 0, 0}, callback);
                            }
                            // woyouService.setAlignment(1, callback);
                            woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);

                            woyouService.setAlignment(0, callback);
                            woyouService.setFontSize(30, callback);
                            int strLength = 14;
                            strString = Globals.myRequiredString("Slip No" , strLength);
                            woyouService.printTextWithFont(strString  + " : " + strOrderNo + "\n", "", 24, callback);
                            if(orders.get_table_code().length()>0) {
                                strString = Globals.myRequiredString("Vehicle No", strLength);
                                woyouService.printTextWithFont(strString + " : " + orders.get_table_code() + "\n", "", 24, callback);
                            }
                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                            if(contact.get_contact_1().length()>0) {
                                strString = Globals.myRequiredString("Mobile No", strLength);
                                woyouService.printTextWithFont(strString + " : " + contact.get_contact_1() + "\n", "", 24, callback);
                            }if(orders.getRFID()!=null){
                                strString = Globals.myRequiredString("NFC", strLength);
                                woyouService.printTextWithFont(strString + " : " + orders.getRFID() + "\n", "", 24, callback);

                                //  mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.getRFID() + "\n", "ST", 24, callbackPPT8555);
                            }
                            strString = Globals.myRequiredString("Vehicle Type", strLength);
                            woyouService.printTextWithFont(strString + " : " + orders.get_remarks() + "\n", "", 24, callback);
                            strString = Globals.myRequiredString("In Date" , strLength);
                            woyouService.printTextWithFont(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(0,11).toString() + "\n", "", 24, callback);
                            if(strflagbtn.equals("VehicleIn")) {
                                if (orders.get_order_status().equals("CLOSE")) {
                                    strString = Globals.myRequiredString("In Time", strLength);

                                    woyouService.printTextWithFont(strString + " : " + orders.get_order_date().substring(11, 19).toString() + "\n", "", 24, callback);

                                    strString = Globals.myRequiredString("OUT Time", strLength);

                                    woyouService.printTextWithFont(strString + " : " + orders.get_delivery_date().substring(11, 19) + "\n", "", 24, callback);

                                } else {
                                    strString = Globals.myRequiredString("In Time", strLength);

                                    woyouService.printTextWithFont(strString + " : " + orders.get_order_date().substring(11, 19) + "\n", "", 24, callback);
                                }

                                strString = Globals.myRequiredString("Adv. AMT", strLength);
                                woyouService.printTextWithFont(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get_discount()), decimal_check) + "\n", "", 24, callback);
                            }
                            else if(strflagbtn.equals("Checkout")){
                                strString = Globals.myRequiredString("OUT Time", strLength);

                                woyouService.printTextWithFont(strString + " : " + orders.get_delivery_date().substring(11, 19) + "\n", "", 24, callback);

                            }
                            strString = Globals.myRequiredString("Fare Amount", strLength);
                            woyouService.printTextWithFont(strString + " : " +Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check) + "\n", "", 24, callback);
                            if(orders.get_order_status().equals("CLOSE")) {
                                strString = Globals.myRequiredString("Collected Amt.", strLength);
                                woyouService.printTextWithFont(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment.get_pay_amount()), decimal_check) + "\n", "", 24, callback);
                            }

                            ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                            if (order_payment_array.size() > 0) {
                                for (int i = 0; i < order_payment_array.size(); i++) {
                                    Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                    String name = "";
                                    if (payment != null) {
                                        name = payment.get_payment_name();
                                        strString = Globals.myRequiredString("Payment Mode", strLength);
                                        woyouService.printTextWithFont(strString + " : " + name +"\n", "", 24, callback);
                                    }
                                }
                            }
                            strString = Globals.myRequiredString("Vehicle Status", strLength);
                            woyouService.printTextWithFont(strString + " : " + orders.get_order_status() + "\n", "", 24, callback);
                            woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);
                            woyouService.setAlignment(1, callback);
                            woyouService.printTextWithFont( Globals.objsettings.get_Copy_Right() + "\n", "", 24, callback);

                            woyouService.printTextWithFont(" \n", "", 24, callback);
                            woyouService.printTextWithFont(" \n", "", 24, callback);
                            woyouService.printTextWithFont(" \n", "", 24, callback);
                        }
                    }
                } catch (Exception e) {
                }
            }
        });
        }


    private void PHAPOS_KOT(final Orders orders, final ArrayList<Order_Detail> order_detail) {

        if (Globals.objsettings.get_Print_Lang().equals("0")) {

            ThreadPoolManager.getInstance().executeTask(new Runnable() {
                @Override
                public void run() {
                    try {
                        String strString = "";


                        woyouService.printTextWithFont(" \n", "", 24, callback);
                        woyouService.setAlignment(1, callback);


                        woyouService.setFontSize(28, callback);

                        // woyouService.setAlignment(1, callback);
                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                        woyouService.printTextWithFont("KOT" + "\n", "", 28, callback);
                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);


                        woyouService.setAlignment(0, callback);
                        woyouService.setFontSize(28, callback);
                        int strLength = 20;
                        strString = Globals.myRequiredString(Globals.PrintInvNo, strLength);
                        woyouService.printTextWithFont(strString + ":" + strOrderNo + "\n", "", 28, callback);
                        strString = Globals.myRequiredString(Globals.PrintInvDate, strLength);
                        woyouService.printTextWithFont(strString + ":" + DateUtill.PaternDate1(orders.get_order_date()).substring(0, 11) + "\n", "", 28, callback);

                        strString = Globals.myRequiredString("Invoice Time", strLength);
                        woyouService.printTextWithFont(strString + ":" + DateUtill.PaternDate1(orders.get_order_date()).substring(12, 20) + "\n", "", 28, callback);


                        strString = Globals.myRequiredString(Globals.PrintDeviceID, strLength);

                        woyouService.printTextWithFont(strString + ":" + Globals.objLPD.getDevice_Name() + "\n", "", 28, callback);


                        if (Globals.strorderType.equals("")) {

                            if (orders.get_order_type_id().equals("5")) {
                                Globals.strorderType = "Dine-In";
                                strString = Globals.myRequiredString("OrderType", strLength);
                                woyouService.printTextWithFont(strString + " : " + Globals.strorderType + "\n", "", 28, callback);
                            }
                        } else {
                            strString = Globals.myRequiredString("OrderType", strLength);
                            woyouService.printTextWithFont(strString + " : " + Globals.strorderType + "\n", "", 28, callback);

                        }
                        if (Globals.objLPR.getproject_id().equals("cloud")) {
                            if (Globals.strorderType.equals("Dine-In")) {

                                Table table = Table.getTable(getApplicationContext(), database, db, " WHERE table_code='" + orders.get_table_code() + "'");

                                if (table != null) {
                                    Globals.table_code = table.get_table_code();
                                    Globals.table_name = table.get_table_name();
                                    Globals.strZoneName = table.getZone_name();

                                    strString = Globals.myRequiredString("Table No", strLength);
                                    woyouService.printTextWithFont(strString + " : " + Globals.table_name + "\n", "", 28, callback);
                                    strString = Globals.myRequiredString("Zone", strLength);
                                    woyouService.printTextWithFont(strString + " : " + Globals.strZoneName + "\n", "", 28, callback);
                                }
                            }
                        }
                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                        // woyouService.printTextWithFont("Item Name\n", "", 28, callback);
                        woyouService.printColumnsText(new String[]{"Qty", "Item Name"}, new int[]{11, 22}, new int[]{0, 0}, callback);
                        woyouService.setAlignment(0, callback);
                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                        int count = 0;
                        Double itemFinalTax = 0d;
                        Double finalitemTax = 0d;
                        while (count < order_detail.size()) {

                            String strItemCode = order_detail.get(count).get_item_code();

                            item = Item.getItem(getApplicationContext(), "where item_code ='" + strItemCode + "'", database, db);
                            String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                    + strItemCode + "'  GROUP By order_detail.item_Code");


                            String sale_price;
                            Double dDisAfterSalePrice = 0d;

//                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);
                            Double dDisAfter = 0d;
                            dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                            dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                            sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);
                            strLength=13;
                            String line_total;
                            line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                            item = Item.getItem(getApplicationContext(), "WHERE item_code='" + strItemCode + "' ", database, db);
                            if (item != null) {
                                String ismodifier = item.getIs_modifier();
                                if (ismodifier.equals("1")) {

                                    //woyouService.printTextWithFont(strItemName + " (M)" + "\n", "", 28, callback);


                                    woyouService.printColumnsText(new String[]{Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check), strItemName + " (M)"}, new int[]{11, 22}, new int[]{0, 0}, callback);
                                } else {
                                    woyouService.printColumnsText(new String[]{Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check), strItemName}, new int[]{11, 22}, new int[]{0, 0}, callback);

                                }

                            }


                            count++;

                        }

                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);

                        woyouService.setAlignment(1, callback);
                        woyouService.printTextWithFont(" \n", "", 24, callback);
                        if (!Globals.objsettings.get_Footer_Text().equals("")) {
                            woyouService.printTextWithFont(Globals.objsettings.get_Footer_Text(), "", 28, callback);
                            woyouService.printTextWithFont("\n", "", 24, callback);
                        }

                        woyouService.printTextWithFont("" + Globals.objsettings.get_Copy_Right() + "\n", "", 28, callback);
                        woyouService.printTextWithFont(" \n", "", 24, callback);
                        woyouService.printTextWithFont(" \n", "", 24, callback);
                        woyouService.printTextWithFont(" \n", "", 24, callback);
                        woyouService.cutPaper(callback);
                    } catch (RemoteException remoteException) {
                        remoteException.printStackTrace();
                    }
                    Globals.strContact_Code = "";
                    Globals.strResvContact_Code = "";
                    Globals.DiscountPer = 0;
                    Globals.strOldCrAmt = "0";
                    Globals.strZoneName = "";
                    Globals.table_name = "";
                    Globals.strorderType = "";
                    Globals.setEmpty();
                }


            });

        }
    }




        private String bluetooth_56(Orders orders, ArrayList<Order_Detail> order_detail) {
        String msg = "", flag = "0";
        String lang = getString(R.string.bluetooth_strLang);

        final byte[] cmd = new byte[3];
        cmd[0] = 0x1b;
        cmd[1] = 0x21;

    if (Globals.objsettings.get_Print_Lang().equals("0")) {

            try {
                byte[] ab;
                if (mService.isAvailable() == false) {
                } else {
                    String strString = "";
                    int strLength = 14;
                    for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                        //printImage();
                        ab = BytesUtil.setAlignCenter(1);
                        mService.write(ab);
                        if(Globals.objLPR.getShort_companyname().isEmpty()){
                            mService.sendMessage("" + Globals.objLPR.getCompany_Name().toUpperCase(), "GBK");

                        }
                        else{
                            mService.sendMessage("" + Globals.objLPR.getShort_companyname().toUpperCase(), "GBK");

                        }
                        if (Globals.objsettings.get_Print_Memo().equals("0")) {

                            mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");

                            mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");

                            try {
                                if (Globals.objLPR.getService_code_tariff().equals("null") && Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().equals("0")) {
                                } else {
                                    mService.sendMessage("" + Globals.objLPR.getService_code_tariff(), "GBK");

                                }
                            } catch (Exception ex) {
                            }


                            if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().equals("0")) {
                            } else {
                                mService.sendMessage(Globals.GSTNo + " : " + Globals.objLPR.getLicense_No(), "GBK");

                            }
                            ab = BytesUtil.setAlignCenter(1);
                            // mService.write(ab);
                            mService.sendMessage("--------------------------------", "GBK");
                            mService.sendMessage(Globals.PrintOrder, "GBK");
                            mService.sendMessage("--------------------------------", "GBK");


                        }
                        ab = BytesUtil.setAlignCenter(0);
                        mService.write(ab);
                        if (Globals.objsettings.get_Print_Memo().equals("0")) {
                            ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                            ArrayList<String> arrayList = new ArrayList<String>();

                            strString = Globals.myRequiredString("Invoice Type", strLength);
                            if (order_payment_array.size() > 0) {

                                for (int i = 0; i < order_payment_array.size(); i++) {
                                    arrayList.add(order_payment_array.get(i).get_payment_id());
                                }
                                if (arrayList.contains("1") && arrayList.contains("5")) {
                                    mService.sendMessage(strString + " : Credit/Cash", "GBK");
                                } else {
                                    if (arrayList.contains("5")) {
                                        mService.sendMessage(strString + " : Credit", "GBK");

                                    } else if (arrayList.contains("1")) {
                                        mService.sendMessage(strString + " : Cash", "GBK");
                                    }
                                }
                            }
                        }
                        strString = Globals.myRequiredString(Globals.PrintInvNo, strLength);
                        mService.sendMessage(strString + " : " + orders.get_order_code(), "GBK");
                        strString = Globals.myRequiredString(Globals.PrintInvDate, strLength);
                        mService.sendMessage(strString + " : " + orders.get_order_date().substring(0,10), "GBK");

                        if (Globals.objsettings.get_Print_Memo().equals("0")) {

                            strString = Globals.myRequiredString("Invoice Time", strLength);
                            mService.sendMessage(strString + " : " + orders.get_order_date().substring(11, 19), "GBK");
                            strString = Globals.myRequiredString(Globals.PrintDeviceID, strLength);
                            mService.sendMessage(strString + " : " + Globals.objLPD.getDevice_Name(), "GBK");
                            user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                            strString = Globals.myRequiredString(Globals.PrintCashier, strLength);
                            mService.sendMessage(strString + " : " + user.get_name(), "GBK");


                            //Check 1
                            if (orders.get_contact_code().equals("")) {
                            } else {
                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                strString = Globals.myRequiredString("Customer", strLength);
                                mService.sendMessage(strString + " : " + contact.get_name(), "GBK");
                                if (contact.get_gstin().length() > 0) {
                                    strString = Globals.myRequiredString("Customer GST No.", strLength);
                                    mService.sendMessage(strString + " : " + contact.get_gstin(), "GBK");
                                }
                            }

                        }
                        if(Globals.strorderType.equals("")){


                            if(orders.get_order_type_id().equals("5")) {
                                Globals.strorderType = "Dine-In";
                                strString = Globals.myRequiredString("OrderType", strLength);
                                mService.sendMessage(strString + " : " + Globals.strorderType + "\n", "GBK");
                            }
                        }
                        else {
                            strString = Globals.myRequiredString("OrderType", strLength);
                            mService.sendMessage(strString + " : " + Globals.strorderType + "\n", "GBK");
                        }

                        if(Globals.objLPR.getproject_id().equals("cloud")) {
                            if( Globals.strorderType.equals("Dine-In")) {

                                Table table = Table.getTable(getApplicationContext(), database, db, " WHERE table_code='" + orders.get_table_code() + "'");
                                if(table!=null) {

                                    Globals.table_code = table.get_table_code();
                                    Globals.table_name = table.get_table_name();
                                    Globals.strZoneName = table.getZone_name();

                                strString = Globals.myRequiredString("Table No", strLength);
                                mService.sendMessage(strString + " : " + Globals.table_name + "\n", "GBK");
                                strString = Globals.myRequiredString("Zone", strLength);
                                mService.sendMessage(strString + " : " + Globals.strZoneName + "\n", "GBK");
                                }
                                }
                        }
                        mService.sendMessage("................................", "GBK");
                        mService.sendMessage("Item Name", "GBK");
                        mService.sendMessage("Qty      Price      Total", "GBK");
                        mService.sendMessage("................................", "GBK");

                        int count = 0;
                        Double itemFinalTax = 0d;
                        Double finalitemTax= 0d;
                        String subtotal = "";
                        while (count < order_detail.size()) {

                            String strItemCode = order_detail.get(count).get_item_code();
                            item = Item.getItem(getApplicationContext(),"where item_code ='"+ strItemCode+"'",database,db);
                            String strItemName = Order_Detail.getItemName(getApplicationContext(), "WHERE order_detail.item_Code  = '"
                                    + strItemCode + "'  GROUP By order_detail.item_code");
                            String sale_price;
                            Double dDisAfterSalePrice = 0d;
//                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);

                            Double dDisAfter = 0d;
                            dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                            dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                            sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                            String line_total;
                            line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                            String tt = "";
                            int l1 = strItemName.length();
                            item=Item.getItem(getApplicationContext(),"WHERE item_code='"+ strItemCode +"' ",database,db);
                            if(item!=null) {
                                String ismodifier = item.getIs_modifier();
                                if (ismodifier.equals("1")) {

                                    mService.sendMessage("" + strItemName + " (M)", "GBK");

                                }
                                else{
                                    mService.sendMessage("" + strItemName, "GBK");

                                }
                            }
                            String strItemQty, strItemPrice, strItemTotal;
                            //strString = Globals.myRequiredString(Globals.PrintInvNo, strLength);
                            strLength = 9;
                            strItemQty = Globals.myRequiredString(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check), strLength);

                            strItemPrice = Globals.myRequiredString(sale_price, 12);
                            strItemTotal = Globals.myRequiredString(line_total, 9);

                            mService.sendMessage(strItemQty
                                    + strItemPrice + strItemTotal, "GBK");


                            // Check 2
                            if (Globals.objsettings.get_Print_Memo().equals("0")) {

                                String discnt = "";
                                String disLbl = "";

                                String strHSNLbl = "", HSNValue = "", strLBlDis = "";
                                if (Globals.objsettings.get_HSN_print().equals("true")) {
                                    item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                    HSNValue = item.get_hsn_sac_code();
                                    strHSNLbl = "HSN Code :";

                                }


                                if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    strLBlDis = "";
                                } else {
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                        discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                        strLBlDis = "Discount";
                                    } else {
                                        strLBlDis = "";
                                    }

                                }
                                if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("false")) {

                                } else if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("true")) {
                                    if(HSNValue!="") {
                                        strString = Globals.myRequiredString(strHSNLbl, strLength);
                                        mService.sendMessage(strString + "         " + HSNValue + "", "GBK");

                                    }

                                } else if (Globals.strIsDiscountPrint.equals("true") && Globals.objsettings.get_HSN_print().equals("false")) {
                                    String strdiscount;
                                    //strLength = 23;
                                    if(discnt!="") {
                                        strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                        mService.sendMessage(strdiscount + discnt + "", "GBK");

                                    }
                                } else {
                                    // HSN Code : A34455  Discount :
                                    if(HSNValue!="" || discnt!="") {
                                        strLength=9;
                                        strString = Globals.myRequiredString(strHSNLbl, strLength);
                                        String strdiscount;

                                        strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                        mService.sendMessage(strString + "" + HSNValue + "  " + strdiscount + ":" + discnt + "", "GBK");


                                    }
                                }
                                //Check 4
                                if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {

                                    Tax_Master tax_master = null;
                                    try {
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            //
                                            //strLength = 14;

                                            String strTaxName = tax_master.get_tax_name();
                                            String tax_rate;
//                        tax_rate = Globals.myNumberFormat2Price(Double.parseDouble(order_detail_tax.get(i).get_tax_value()), decimal_check);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));

                                            tax_rate = Globals.myNumberFormat2Price(valueFinal, decimal_check) + "";
                                            itemFinalTax += valueFinal;
                                            strLength = 23;
                                            strString = Globals.myRequiredString(strTaxName, strLength);

                                            mService.sendMessage(strString + tax_rate ,  "GBK");

                                        }
                                    } catch (Exception e) {
                                        System.out.println(e.getMessage());
                                    }
                                }
                            }


                     /*       Tax_Master tax_master = null;
                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                if(item.get_is_inclusive_tax().equals("0")) {
                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                    itemFinalTax += valueFinal;
                                    finalitemTax += valueFinal;
                                }
                            }*/
                                count++;

                        }


                                mService.sendMessage("................................", "GBK");
                        if (Globals.objsettings.get_Print_Memo().equals("0")) {
                            strLength = 14;
                            strString = Globals.myRequiredString("Total Item", strLength);

                            mService.sendMessage(strString + " : " + orders.get_total_item(), "GBK");
                            strString = Globals.myRequiredString("Item Quantity ", strLength);
                            mService.sendMessage(strString + " : " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check), "GBK");

                            String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                            Cursor cursor1 = database.rawQuery(strTableQry, null);
                            Tax_Master tax_master = null;
                            while (cursor1.moveToNext()) {
                                subtotal = cursor1.getString(0);
                            }
                            subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                            strString = Globals.myRequiredString("Subtotal", strLength);

                            mService.sendMessage(strString + " : " + subtotal, "GBK");
                            mService.sendMessage("................................", "GBK");
                            if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {
                                strLength = 14;
                                strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                        "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                        "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                cursor1 = database.rawQuery(strTableQry, null);

                                while (cursor1.moveToNext()) {
                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                    strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                    mService.sendMessage(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "", "GBK");

                                }
                                if (tax_master != null) {
                                    mService.sendMessage("................................", "GBK");
                                }
                            }


                            //Cgeck 5
                            String discount = "0";
                            if (Double.parseDouble(orders.get_total_discount()) == 0) {

                            } else {
                                discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                if (Globals.strIsDiscountPrint.equals("true")) {
                                    strLength = 14;
                                    strString = Globals.myRequiredString("Discount", strLength);

                                    //  mService.sendMessage(strString+"        :"+ Globals.DiscountPer + "%", "GBK");
                                    strString = Globals.myRequiredString("Discount", strLength);

                                    mService.sendMessage(strString + " : " + discount, "GBK");
                                }
                            }


                            strLength = 14;
                            String ttl_aftr_dis = (Double.parseDouble(subtotal)) + "";

                            String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);

                            strString = Globals.myRequiredString("Total", strLength);

                            mService.sendMessage(strString + " : " + tatalAftrDis, "GBK");
                        }
                        if (Globals.objsettings.get_Print_Memo().equals("0")) {
                            String total_tax;
                            total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                            if (Double.parseDouble(total_tax) > 0d) {
                                strString = Globals.myRequiredString("Order Tax", strLength);
                                mService.sendMessage(strString + " : " + total_tax, "GBK");
                              mService.sendMessage("................................", "GBK");
                                Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                String name = "", value = "";
                                if (cursor.moveToFirst()) {
                                    do {
                                        name = cursor.getString(0);
                                        value = cursor.getString(1);
                                        int l1 = name.length();
                                        String tt = "";
                                        if (l1 > 24) {

                                            char[] nm = name.toUpperCase().toCharArray();
                                            for (int k1 = 0; k1 < 20; k1++) {

                                                try {
                                                    tt = tt + nm[k1];
                                                } catch (Exception ex) {
                                                    tt = tt + " ";
                                                }
                                            }

                                        } else {
                                            char[] nm = name.toUpperCase()
                                                    .toCharArray();
                                            for (int k1 = 0; k1 < l1; k1++) {

                                                tt = tt + nm[k1];
                                            }
                                            int space = 20 - l1;
                                            for (int v = 0; v < space; v++) {

                                                tt = tt + " ";

                                            }
                                        }

                                        strString = Globals.myRequiredString(name, strLength);
                                        mService.sendMessage(strString + " : " + value, "GBK");
                                    } while (cursor.moveToNext());
                                }
                            }
                            mService.sendMessage("................................", "GBK");
                        }
                            String net_amount;
                            net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                            String strCurrency;
                            if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                strCurrency = "";
                            } else {
                                strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                            }

                            strString = Globals.myRequiredString("Net Amt", strLength);

                            mService.sendMessage(strString + " : " + net_amount + "" + strCurrency, "GBK");

                        String tender;
                        tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                        strString = Globals.myRequiredString("Tender", strLength);
                        mService.sendMessage(strString + " : " + tender, "GBK");
                        String change_amount;
                        change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                        strString = Globals.myRequiredString("Change", strLength);
                        mService.sendMessage(strString + " : " + change_amount, "GBK");
//                                cmd[2] &= 0xEF;
//                                mService.write(cmd);
                        mService.sendMessage("................................", "GBK");
                     ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                        if (order_payment_array.size() > 0) {
                            for (int i = 0; i < order_payment_array.size(); i++) {
                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                String name = "";
                                if (payment != null) {
                                    name = payment.get_payment_name();
                                    if(payment.get_payment_name().equals("CUSTOMER ACCOUNT")){
                                        strString = Globals.myRequiredString("Customer ACC." , strLength);
                                    }
                                    else {
                                        strString = Globals.myRequiredString(name, strLength);
                                    }
                                    mService.sendMessage(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + "" , "GBK");
//                                    woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{9, 1, 20}, new int[]{0, 0, 0}, callback);
                                }
                            }
                            mService.sendMessage("................................\n", "GBK");
                        }

                        ab = BytesUtil.setAlignCenter(1);
                        mService.write(ab);

                        if (!Globals.objsettings.get_Footer_Text().equals("")) {
                            mService.sendMessage(Globals.objsettings.get_Footer_Text(), "GBK");
                        }
                        mService.sendMessage(Globals.objsettings.get_Copy_Right() + "", "GBK");

                        mService.sendMessage("\n", "GBK");
//                            mService.sendMessage("\n", "GBK");
//                            mService.sendMessage("\n", "GBK");

                        cmd[2] &= 0xEF;
                        mService.write(cmd);
                        byte[] print = {0x1b, 0x0c};
                        mService.write(print);

                    }
                    Globals.strContact_Code = "";
                    Globals.strResvContact_Code = "";
                    Globals.DiscountPer = 0;
                    Globals.strOldCrAmt = "0";
Globals.strorderType="";
Globals.table_name="";
Globals.strZoneName="";
                    flag = "1";
                    Globals.setEmpty();
                }
            } catch (Exception ex) {
                String ab = ex.getMessage();
                ab = ab;
            }
        }



        return flag;
    }


    private String bluetooth_56_parking(final Orders orders,Order_Detail order_detail,Order_Payment order_payment){
        String msg = "", flag = "0";
        String lang = getString(R.string.bluetooth_strLang);

        final byte[] cmd = new byte[3];
        cmd[0] = 0x1b;
        cmd[1] = 0x21;
        String Time = java.text.DateFormat.getTimeInstance().format(new Date());

        if (Globals.objsettings.get_Print_Lang().equals("0")) {

            try {
                byte[] ab;
                if (mService.isAvailable() == false) {
                } else {
                    String strString = "";
                    int strLength = 14;
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);
                    if(Globals.objLPR.getShort_companyname().isEmpty()){
                        mService.sendMessage("" + Globals.objLPR.getCompany_Name().toUpperCase(), "GBK");

                    }
                    else{
                        mService.sendMessage("" + Globals.objLPR.getShort_companyname().toUpperCase(), "GBK");

                    }
                    mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");


                    mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");
                    try {
                        if (Globals.objLPR.getService_code_tariff().equals("null") && Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().equals("0")) {
                        } else {
                            mService.sendMessage("" + Globals.objLPR.getService_code_tariff(), "GBK");

                        }
                    } catch (Exception ex) {
                    }


                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().equals("0")) {
                    } else {
                        mService.sendMessage(Globals.GSTNo + " : " + Globals.objLPR.getLicense_No(), "GBK");

                    }
                    ab = BytesUtil.setAlignCenter(0);
                    mService.write(ab);
                    strString = Globals.myRequiredString("Slip No" , strLength);
                    mService.sendMessage(strString  + " : " + strOrderNo , "GBK");
                    if(orders.get_table_code().length()>0) {
                        strString = Globals.myRequiredString("Vehicle No", strLength);
                        mService.sendMessage(strString + " : " + orders.get_table_code(), "GBK");
                    }
                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                    if(contact.get_contact_1().length()>0) {
                        strString = Globals.myRequiredString("Mobile No", strLength);
                        mService.sendMessage(strString + " : " + contact.get_contact_1() , "GBK");
                    }
                    if(orders.getRFID()!=null){
                        strString = Globals.myRequiredString("NFC", strLength);
                        mService.sendMessage(strString + " : " + orders.getRFID() , "GBK");

                       // woyouService.printTextWithFont(strString + " : " + orders.getRFID() + "\n", "", 24, callback);

                        //  mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.getRFID() + "\n", "ST", 24, callbackPPT8555);
                    }
                    strString = Globals.myRequiredString("Vehicle Type", strLength);
                    mService.sendMessage(strString + " : " + orders.get_remarks() , "GBK");
                    strString = Globals.myRequiredString("In Date" , strLength);
                    mService.sendMessage(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(0,11).toString(), "GBK");
                    if(strflagbtn.equals("VehicleIn")) {
                        if (orders.get_order_status().equals("CLOSE")) {
                            strString = Globals.myRequiredString("In Time", strLength);

                            mService.sendMessage(strString + " : " + orders.get_order_date().substring(11, 19).toString() , "GBK");

                            strString = Globals.myRequiredString("OUT Time", strLength);

                            mService.sendMessage(strString + " : " + orders.get_delivery_date().substring(11, 19) , "GBK");

                        } else {
                            strString = Globals.myRequiredString("In Time", strLength);

                            mService.sendMessage(strString + " : " + orders.get_order_date().substring(11, 19) , "GBK");
                        }
                        strString = Globals.myRequiredString("Adv. AMT", strLength);
                        mService.sendMessage(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get_discount()), decimal_check) , "GBK");
                    }

                    else if(strflagbtn.equals("Checkout")){
                        strString = Globals.myRequiredString("OUT Time", strLength);

                        mService.sendMessage(strString + " : " + orders.get_delivery_date().substring(11, 19), "GBK");

                    }
                    strString = Globals.myRequiredString("Amount", strLength);
                    mService.sendMessage(strString + " : " +Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check) , "GBK");
                    if(orders.get_order_status().equals("CLOSE")) {
                        strString = Globals.myRequiredString("Collected Amt.", strLength);
                        mService.sendMessage(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment.get_pay_amount()), decimal_check) , "GBK");
                    }
                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                    if (order_payment_array.size() > 0) {
                        for (int i = 0; i < order_payment_array.size(); i++) {
                            Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                            String name = "";
                            if (payment != null) {
                                name = payment.get_payment_name();
                                strString = Globals.myRequiredString("Payment Mode", strLength);
                                mService.sendMessage(strString + " : " + name, "GBK");
                            }
                        }
                    }
                    strString = Globals.myRequiredString("Vehicle Status", strLength);
                    mService.sendMessage(strString + " : " + orders.get_order_status(), "GBK");
                    mService.sendMessage("--------------------------------", "GBK");
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);


                    mService.sendMessage(Globals.objsettings.get_Copy_Right() + "", "GBK");

                    mService.sendMessage("\n", "GBK");
                    mService.sendMessage("\n", "GBK");
                    mService.sendMessage("\n", "GBK");
//                            mService.sendMessage("\n", "GBK");
//                            mService.sendMessage("\n", "GBK");

                    cmd[2] &= 0xEF;
                    mService.write(cmd);
                    byte[] print = {0x1b, 0x0c};
                    mService.write(print);
                    flag = "1";
                }
            }
            catch(Exception e){
            }
        }
        return flag;
    }



    private String bluetooth_80_parking(final Orders orders,Order_Detail order_detail,Order_Payment order_payment){
        String msg = "", flag = "0";
        String lang = getString(R.string.bluetooth_strLang);

        final byte[] cmd = new byte[3];
        cmd[0] = 0x1b;
        cmd[1] = 0x21;
        String Time = java.text.DateFormat.getTimeInstance().format(new Date());

        if (Globals.objsettings.get_Print_Lang().equals("0")) {

            try {
                byte[] ab;
                if (mService.isAvailable() == false) {
                } else {
                    String strString = "";
                    int strLength = 14;
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);
                    if(Globals.objLPR.getShort_companyname().isEmpty()){
                        mService.sendMessage("" + Globals.objLPR.getCompany_Name().toUpperCase(), "GBK");

                    }
                    else{
                        mService.sendMessage("" + Globals.objLPR.getShort_companyname().toUpperCase(), "GBK");

                    }
                    mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");

                    mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");
                    try {
                        if (Globals.objLPR.getService_code_tariff().equals(null) || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().equals("0")) {
                        } else {
                            mService.sendMessage("" + Globals.objLPR.getService_code_tariff(), "GBK");

                        }
                    } catch (Exception ex) {
                    }


                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().equals("0")) {
                    } else {
                        mService.sendMessage(Globals.GSTNo + " : " + Globals.objLPR.getLicense_No(), "GBK");

                    }


                    ab = BytesUtil.setAlignCenter(0);
                    mService.write(ab);
                    mService.sendMessage("-----------------------------------", "GBK");
                    strString = Globals.myRequiredString("Slip No" , strLength);
                    mService.sendMessage(strString  + " : " + strOrderNo , "GBK");
                    if(orders.get_table_code().length()>0) {
                        strString = Globals.myRequiredString("Vehicle No", strLength);
                        mService.sendMessage(strString + " : " + orders.get_table_code(), "GBK");
                    }
                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                    if(contact.get_contact_1().length()>0) {
                        strString = Globals.myRequiredString("Mobile No", strLength);
                        mService.sendMessage(strString + " : " + contact.get_contact_1() , "GBK");
                    }
                    if(orders.getRFID()!=null){
                        strString = Globals.myRequiredString("NFC", strLength);
                        mService.sendMessage(strString + " : " + orders.getRFID() , "GBK");

                        // woyouService.printTextWithFont(strString + " : " + orders.getRFID() + "\n", "", 24, callback);

                        //  mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.getRFID() + "\n", "ST", 24, callbackPPT8555);
                    }
                    strString = Globals.myRequiredString("Vehicle Type", strLength);
                    mService.sendMessage(strString + " : " + orders.get_remarks() , "GBK");
                    strString = Globals.myRequiredString("In Date" , strLength);
                    mService.sendMessage(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(0,11).toString() , "GBK");
                    if(strflagbtn.equals("VehicleIn")) {
                        if (orders.get_order_status().equals("CLOSE")) {
                            strString = Globals.myRequiredString("In Time", strLength);

                            mService.sendMessage(strString + " : " + orders.get_order_date().substring(11, 19).toString() , "GBK");

                            strString = Globals.myRequiredString("OUT Time", strLength);

                            mService.sendMessage(strString + " : " + orders.get_delivery_date().substring(11, 19), "GBK");

                        } else {
                            strString = Globals.myRequiredString("In Time", strLength);

                            mService.sendMessage(strString + " : " + orders.get_order_date().substring(11, 19), "GBK");
                        }
                        strString = Globals.myRequiredString("Adv. AMT", strLength);
                        mService.sendMessage(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get_discount()), decimal_check), "GBK");
                    }
                    else if(strflagbtn.equals("Checkout")){
                        strString = Globals.myRequiredString("OUT Time", strLength);

                        mService.sendMessage(strString + " : " + orders.get_delivery_date().substring(11, 19) , "GBK");

                    }
                    strString = Globals.myRequiredString("Amount", strLength);
                    mService.sendMessage(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check), "GBK");
                    if(orders.get_order_status().equals("CLOSE")) {
                        strString = Globals.myRequiredString("Collected Amt.", strLength);
                        mService.sendMessage(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment.get_pay_amount()), decimal_check), "GBK");
                    }
                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                    if (order_payment_array.size() > 0) {
                        for (int i = 0; i < order_payment_array.size(); i++) {
                            Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                            String name = "";
                            if (payment != null) {
                                name = payment.get_payment_name();
                                strString = Globals.myRequiredString("Payment Mode", strLength);
                                mService.sendMessage(strString + " : " + name, "GBK");
                            }
                        }

                    }
                    strString = Globals.myRequiredString("Vehicle Status", strLength);
                    mService.sendMessage(strString + " : " + orders.get_order_status() , "GBK");
                    mService.sendMessage("-----------------------------------", "GBK");
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);
                    mService.sendMessage(Globals.objsettings.get_Copy_Right() + "", "GBK");

                    mService.sendMessage("" ,"GBK");
//                            mService.sendMessage("\n", "GBK");
//                            mService.sendMessage("\n", "GBK");

                    cmd[2] &= 0xEF;
                    mService.write(cmd);
                    byte[] print = {0x1b, 0x0c};
                    mService.write(print);
                    flag="1";
                }
            }
            catch(Exception e){
            }
        }
        return flag;
    }
    private String bluetooth_561(final Orders orders, final ArrayList<Order_Detail> order_detail) {
        String msg = "", flag = "0";
        String lang = getString(R.string.bluetooth_strLang);

        final byte[] cmd = new byte[3];
        cmd[0] = 0x1b;
        cmd[1] = 0x21;
        if (decimal_check.equals("2")) {
            if ((lang.compareTo("en")) == 0) {
                if (Globals.objsettings.get_Print_Memo().equals("1")) {
                    try {
                        byte[] ab;
                        Orders ordersobj = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                        String Print_type = "0";

                        ab = BytesUtil.setAlignCenter(1);
                        mService.write(ab);
                        mService.sendMessage("" + Globals.objLPR.getCompany_Name() + "\n", "GBK");
                        mService.sendMessage("Order : " + ordersobj.get_order_code() + "\n", "GBK");

                        if (ordersobj.get_table_code().equals("")) {
                        } else {
                            mService.sendMessage("Table : " + ordersobj.get_table_code(), "GBK");
                        }

                        ArrayList<Order_Detail> order_detail_obj = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                        if (order_detail_obj.size() > 0) {
                            Double total = 0d;

                            mService.sendMessage("Name         Qty   Price  Total", "GBK");
                            mService.sendMessage("--------------------------------\n", "GBK");

                            for (int i = 0; i < order_detail_obj.size(); i++) {
                                total = total + Double.parseDouble(order_detail_obj.get(i).get_line_total());
                                Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail_obj.get(i).get_item_code() + "'", database, db);
                                mService.sendMessage(item.get_item_name().substring(0, 8) + "X" + order_detail_obj.get(i).get_quantity() + "     " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail_obj.get(i).get_sale_price()), decimal_check), "GBK");

                            }
                            mService.sendMessage("--------------------------------\n", "GBK");
                            mService.sendMessage("Total Amount : " + Globals.myNumberFormat2Price(total, decimal_check), "GBK");
                        }

                        mService.sendMessage("\n", "GBK");
                        mService.sendMessage("\n", "GBK");
                        mService.sendMessage("\n", "GBK");


                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    try {
                        byte[] ab;
                        if (mService.isAvailable() == false) {
                        } else {
                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                //printImage();
                                ab = BytesUtil.setAlignCenter(1);
                                mService.write(ab);
                                mService.sendMessage("" + Globals.objLPR.getCompany_Name().toUpperCase(), "GBK");
                                mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");
                                mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");

                                try {
                                    if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                    } else {
                                        mService.sendMessage("" + Globals.objLPR.getService_code_tariff(), "GBK");
                                        ab = BytesUtil.setAlignCenter(0);
                                        mService.write(ab);
                                    }
                                } catch (Exception ex) {
                                }


                                if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                } else {
                                    mService.sendMessage(Globals.GSTNo + " : " + Globals.objLPR.getLicense_No(), "GBK");
                                    ab = BytesUtil.setAlignCenter(1);
                                    mService.write(ab);
                                }
                                ab = BytesUtil.setAlignCenter(1);
                                mService.write(ab);
                                mService.sendMessage("--------------------------------", "GBK");
                                mService.sendMessage(Globals.PrintOrder, "GBK");
                                mService.sendMessage("--------------------------------", "GBK");

                                if (Globals.strIsBarcodePrint.equals("null") || Globals.strIsBarcodePrint.equals("")) {

                                } else {
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        byte[] sendData;
                                        sendData = BytesUtil.getPrintQRCode(strOrderNo, 1, 0);
                                        mService.write(sendData);
                                    }
                                    ab = BytesUtil.setAlignCenter(0);
                                    mService.write(ab);
                                }
                                ab = BytesUtil.setAlignCenter(0);
                                mService.write(ab);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                ArrayList<String> arrayList = new ArrayList<String>();

                                if (order_payment_array.size() > 0) {

                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        arrayList.add(order_payment_array.get(i).get_payment_id());
                                    }
                                    if (arrayList.contains("1") && arrayList.contains("5")) {
                                        mService.sendMessage("Invoice Type: Credit/Cash", "GBK");
                                    } else {
                                        if (arrayList.contains("5")) {
                                            mService.sendMessage("Invoice Type: Credit", "GBK");

                                        } else if (arrayList.contains("1")) {
                                            mService.sendMessage("Invoice Type: Cash", "GBK");
                                        }
                                    }
                                }
                                mService.sendMessage(Globals.PrintInvNo + ":" + strOrderNo, "GBK");
                                mService.sendMessage(Globals.PrintInvDate + ":" + DateUtill.PaternDate1(orders.get_order_date()), "GBK");
                                mService.sendMessage(Globals.PrintDeviceID + ":" + Globals.objLPD.getDevice_Name(), "GBK");
                                user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                mService.sendMessage(Globals.PrintCashier + ":" + user.get_name(), "GBK");

                                if (Globals.ModeResrv.equals("Resv")) {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                    mService.sendMessage("Customer     :" + contact.get_name(), "GBK");
                                    if (contact.get_gstin().length() > 0) {
                                        mService.sendMessage("Customer GST No. :" + contact.get_gstin(), "GBK");
                                    }
                                } else {
                                    if (Globals.strContact_Code.equals("")) {
                                    } else {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                        mService.sendMessage("Customer     :" + contact.get_name(), "GBK");
                                        if (contact.get_gstin().length() > 0) {
                                            mService.sendMessage("Customer GST No. :" + contact.get_gstin(), "GBK");
                                        }
                                    }
                                }

                                mService.sendMessage("................................", "GBK");
                                mService.sendMessage("Item Name", "GBK");
                                mService.sendMessage("Qty        Price      Total", "GBK");
                                mService.sendMessage("................................", "GBK");

                                int count = 0;
                                Double itemFinalTax = 0d;
                                while (count < order_detail.size()) {

                                    String strItemCode = order_detail.get(count).get_item_code();
                                    String strItemName = Order_Detail.getItemName(getApplicationContext(), "WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_code");
                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;
//                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);

                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                    mService.sendMessage("" + strItemName, "GBK");
                                    mService.sendMessage("" + order_detail.get(count).get_quantity() + "  " + sale_price + "  " + line_total, "GBK");

                                    String discnt = "";
                                    String disLbl = "";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                            discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                            disLbl = "Dis :";
                                        }
                                        mService.sendMessage("" + disLbl + " " + discnt, "GBK");
                                    }

                                    if (Globals.objsettings.get_HSN_print().equals("true")) {
                                        item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                        mService.sendMessage("HSN Code :" + item.get_hsn_sac_code() + "", "GBK");
                                    }

                                    if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                        Tax_Master tax_master = null;
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                            itemFinalTax += valueFinal;
                                            //woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(valueFinal, decimal_check)}, new int[]{15, 6}, new int[]{0, 0}, callback);
                                            mService.sendMessage("" + tax_master.get_tax_name() + "    " + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "", "GBK");
                                        }
                                    }
                                    count++;
                                }

                                mService.sendMessage("................................", "GBK");
                                mService.sendMessage("Total Item  : " + orders.get_total_item(), "GBK");
                                mService.sendMessage("Item Quantity  : " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check), "GBK");
                                String subtotal = "";
                                String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                Cursor cursor1 = database.rawQuery(strTableQry, null);
                                Tax_Master tax_master = null;
                                while (cursor1.moveToNext()) {
                                    subtotal = cursor1.getString(0);
                                }
                                subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                mService.sendMessage("Subtotal  : " + subtotal, "GBK");
                                mService.sendMessage("................................", "GBK");
                                if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                    strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                            "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                            "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                    cursor1 = database.rawQuery(strTableQry, null);

                                    while (cursor1.moveToNext()) {
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                        mService.sendMessage("" + tax_master.get_tax_name() + "    " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "", "GBK");
                                    }
                                    mService.sendMessage("................................", "GBK");
                                }

                                String discount = "0";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                } else {
                                    discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        mService.sendMessage("Discount  : " + Globals.DiscountPer + "%", "GBK");
                                        mService.sendMessage("Discount  :" + discount, "GBK");
                                    }
                                }
                                String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                mService.sendMessage("Total  :" + tatalAftrDis, "GBK");

                                String total_tax;
                                total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                if (Double.parseDouble(total_tax) > 0d) {
                                    mService.sendMessage("Total Tax  :" + total_tax, "GBK");
                                    mService.sendMessage("................................", "GBK");
                                    Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                    String name = "", value = "";
                                    if (cursor.moveToFirst()) {
                                        do {
                                            name = cursor.getString(0);
                                            value = cursor.getString(1);
                                            mService.sendMessage(name + ":" + total_tax, "GBK");
                                        } while (cursor.moveToNext());
                                    }
                                }
                                mService.sendMessage("................................", "GBK");

                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                mService.sendMessage("Net Amt  :" + net_amount + "" + strCurrency, "GBK");
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                mService.sendMessage("Tender  :" + tender, "GBK");
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                mService.sendMessage("Change  :" + change_amount, "GBK");
                                cmd[2] &= 0xEF;
                                mService.write(cmd);
                                mService.sendMessage("................................", "GBK");
                   /*     order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                        if (order_payment_array.size() > 0) {
                            for (int i = 0; i < order_payment_array.size(); i++) {
                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                String name = "";
                                if (payment != null) {
                                    name = payment.get_payment_name();
                                    mService.sendMessage(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + "" + "\n", "GBK");
//                                    woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{9, 1, 20}, new int[]{0, 0, 0}, callback);
                                }
                            }
                            mService.sendMessage("................................", "GBK");
                        }*/
                                if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                    if (ck_project_type.equals("standalone")) {
                                        JSONObject jsonObject = new JSONObject();
                                        if (Globals.strContact_Code.equals("")) {
                                            mService.sendMessage("**\n", "GBK");
                                        } else {
                                            Double showAmount = 0d;
//                                    String curAmount = "";
                                            try {
                                                String strCreditAmt = "", strDeditAmount = "";
                                                Double creditAmount = 0d,
                                                        debitAmount = 0d;
                                                Cursor cursor = null;

                                                String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                cursor = database.rawQuery(strQry1, null);
                                                while (cursor.moveToNext()) {
                                                    strCreditAmt = cursor.getString(0);

                                                }
                                                creditAmount = Double.parseDouble(strCreditAmt);

                                                String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                cursor = database.rawQuery(strQry2, null);
                                                while (cursor.moveToNext()) {
                                                    strDeditAmount = cursor.getString(0);
                                                }
                                                debitAmount = Double.parseDouble(strDeditAmount);
                                                showAmount = debitAmount + creditAmount;
                                            } catch (Exception ex) {
                                            }

                                            double abs1 = Math.abs(showAmount);
                                            if (showAmount > 0) {
                                                mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR" + "\n", "GBK");
                                            } else {
                                                mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR" + "\n", "GBK");
                                            }
                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {
                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                    mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                                }
                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                            }
                                            if (strCur.equals("")) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                            }
                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {
                                            }
                                            Double strBalance = abs1 - Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {
                                            }

                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mService.sendMessage("Balance Amount  :" + Globals.myNumberFormat2Price(strBalance, decimal_check) + "" + "\n", "GBK");

                                            mService.sendMessage("................................", "GBK");
                                        }
                                    } else {
                                        JSONObject jsonObject = new JSONObject();
                                        if (Globals.strContact_Code.equals("")) {
                                            mService.sendMessage("**\n", "GBK");
                                        } else {
                                            String curAmount = "";
                                            try {
                                                strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);
                                                if (cursor1.moveToFirst()) {
                                                    do {
                                                        curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                    } while (cursor1.moveToNext());
                                                }
                                            } catch (Exception ex) {
                                                curAmount = "0";
                                            }
                                            double ab1 = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                            double abs1 = Math.abs(ab1);
                                            if (ab1 > 0) {
                                                mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "GBK");
                                            } else {
                                                mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "GBK");
                                            }
                                            try {
                                                jsonObject.put("Old Amt", curAmount + "");
                                            } catch (Exception ex) {

                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                    mService.sendMessage("Current Amt  :" + strCur + "", "GBK");
                                                }
                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "", "GBK");
                                            }
                                            if (strCur.equals("")) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "", "GBK");
                                            }
                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }
                                            Double strBalance = ab1 + Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mService.sendMessage("Balance Amount  :" + Globals.myNumberFormat2Price(strBalance, decimal_check) + "" + "\n", "GBK");
                                            mService.sendMessage("................................", "GBK");
                                        }
                                    }
                                }

                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    mService.sendMessage(Globals.objsettings.get_Footer_Text(), "GBK");
                                }
                                mService.sendMessage("      " + Globals.objsettings.get_Copy_Right() + "\n\n", "GBK");
                                cmd[2] &= 0xEF;
                                mService.write(cmd);
                                byte[] print = {0x1b, 0x0c};
                                mService.write(print);

                            }
                            Globals.strContact_Code = "";
                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = 0;
                            Globals.strOldCrAmt = "0";

                            flag = "1";
                            Globals.setEmpty();
                        }
                    } catch (Exception ex) {
                        String ab = ex.getMessage();
                        ab = ab;
                    }
                }
            }

        } else {

            if ((lang.compareTo("en")) == 0) {
                if (Globals.objsettings.get_Print_Memo().equals("1")) {
                    try {
                        byte[] ab;
                        Orders ordersobj = Orders.getOrders(getApplicationContext(), database, " where order_code='" + strOrderNo + "'");
                        String Print_type = "0";

                        ab = BytesUtil.setAlignCenter(1);
                        mService.write(ab);
                        mService.sendMessage("" + Globals.objLPR.getCompany_Name() + "\n", "GBK");
                        mService.sendMessage("Order : " + ordersobj.get_order_code() + "\n", "GBK");

                        if (ordersobj.get_table_code().equals("")) {
                        } else {
                            mService.sendMessage("Table : " + ordersobj.get_table_code(), "GBK");
                        }

                        ArrayList<Order_Detail> order_detail_obj = Order_Detail.getAllOrder_Detail(getApplicationContext(), " WHERE order_code='" + strOrderNo + "'", database);
                        if (order_detail_obj.size() > 0) {
                            Double total = 0d;

                            mService.sendMessage("Name         Qty   Price  Total", "GBK");
                            mService.sendMessage("--------------------------------\n", "GBK");

                            for (int i = 0; i < order_detail_obj.size(); i++) {
                                total = total + Double.parseDouble(order_detail_obj.get(i).get_line_total());
                                Item item = Item.getItem(getApplicationContext(), " WHERE item_code='" + order_detail_obj.get(i).get_item_code() + "'", database, db);
                                mService.sendMessage(item.get_item_name().substring(0, 8) + "X" + order_detail_obj.get(i).get_quantity() + "     " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail_obj.get(i).get_sale_price()), decimal_check), "GBK");

                            }
                            mService.sendMessage("--------------------------------\n", "GBK");
                            mService.sendMessage("Total Amount : " + Globals.myNumberFormat2Price(total, decimal_check), "GBK");
                        }

                        mService.sendMessage("\n", "GBK");
                        mService.sendMessage("\n", "GBK");
                        mService.sendMessage("\n", "GBK");

                        mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }
                } else {
                    try {
                        byte[] ab;
                        if (mService.isAvailable() == false) {
                        } else {
                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                //printImage();
                                ab = BytesUtil.setAlignCenter(1);
                                mService.write(ab);
                                mService.sendMessage("" + Globals.objLPR.getCompany_Name().toUpperCase(), "GBK");
                                mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");
                                mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");

                                try {
                                    if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {
                                    } else {
                                        mService.sendMessage("" + Globals.objLPR.getService_code_tariff(), "GBK");
                                        ab = BytesUtil.setAlignCenter(0);
                                        mService.write(ab);
                                    }
                                } catch (Exception ex) {
                                }


                                if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                                } else {
                                    mService.sendMessage(Globals.GSTNo + " : " + Globals.objLPR.getLicense_No(), "GBK");
                                    ab = BytesUtil.setAlignCenter(1);
                                    mService.write(ab);
                                }
                                ab = BytesUtil.setAlignCenter(1);
                                mService.write(ab);
                                mService.sendMessage("--------------------------------", "GBK");
                                mService.sendMessage(Globals.PrintOrder, "GBK");
                                mService.sendMessage("--------------------------------", "GBK");

                                if (Globals.strIsBarcodePrint.equals("null") || Globals.strIsBarcodePrint.equals("")) {

                                } else {
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        byte[] sendData;
                                        sendData = BytesUtil.getPrintQRCode(strOrderNo, 1, 0);
                                        mService.write(sendData);
                                    }
                                    ab = BytesUtil.setAlignCenter(0);
                                    mService.write(ab);
                                }
                                ab = BytesUtil.setAlignCenter(0);
                                mService.write(ab);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                ArrayList<String> arrayList = new ArrayList<String>();

                                if (order_payment_array.size() > 0) {

                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        arrayList.add(order_payment_array.get(i).get_payment_id());
                                    }
                                    if (arrayList.contains("1") && arrayList.contains("5")) {
                                        mService.sendMessage("Invoice Type: Credit/Cash", "GBK");
                                    } else {
                                        if (arrayList.contains("5")) {
                                            mService.sendMessage("Invoice Type: Credit", "GBK");

                                        } else if (arrayList.contains("1")) {
                                            mService.sendMessage("Invoice Type: Cash", "GBK");
                                        }
                                    }
                                }
                                mService.sendMessage(Globals.PrintInvNo + ":" + strOrderNo, "GBK");
                                mService.sendMessage(Globals.PrintInvDate + ":" + DateUtill.PaternDate1(orders.get_order_date()), "GBK");
                                mService.sendMessage(Globals.PrintDeviceID + ":" + Globals.objLPD.getDevice_Name(), "GBK");
                                user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                mService.sendMessage(Globals.PrintCashier + ":" + user.get_name(), "GBK");

                                if (Globals.ModeResrv.equals("Resv")) {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                    mService.sendMessage("Customer     :" + contact.get_name(), "GBK");
                                    if (contact.get_gstin().length() > 0) {
                                        mService.sendMessage("Customer GST No. :" + contact.get_gstin(), "GBK");
                                    }
                                } else {
                                    if (Globals.strContact_Code.equals("")) {
                                    } else {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                        mService.sendMessage("Customer     :" + contact.get_name(), "GBK");
                                        if (contact.get_gstin().length() > 0) {
                                            mService.sendMessage("Customer GST No. :" + contact.get_gstin(), "GBK");
                                        }
                                    }
                                }

                                mService.sendMessage("................................", "GBK");
                                mService.sendMessage("Item Name", "GBK");
                                mService.sendMessage("Qty        Price      Total", "GBK");
                                mService.sendMessage("................................", "GBK");

                                int count = 0;
                                Double itemFinalTax = 0d;
                                while (count < order_detail.size()) {

                                    String strItemCode = order_detail.get(count).get_item_code();
                                    String strItemName = Order_Detail.getItemName(getApplicationContext(), "WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_code");
                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;
//                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);

                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                    mService.sendMessage("" + strItemName, "GBK");
                                    mService.sendMessage("" + order_detail.get(count).get_quantity() + "  " + sale_price + "  " + line_total, "GBK");

                                    String discnt = "";
                                    String disLbl = "";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                            discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                            disLbl = "Dis :";
                                        }
                                        mService.sendMessage("" + disLbl + " " + discnt, "GBK");
                                    }

                                    if (Globals.objsettings.get_HSN_print().equals("true")) {
                                        item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                        mService.sendMessage("HSN Code :" + item.get_hsn_sac_code() + "", "GBK");
                                    }

                                    if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                        Tax_Master tax_master = null;
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                            itemFinalTax += valueFinal;
                                            //woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(valueFinal, decimal_check)}, new int[]{15, 6}, new int[]{0, 0}, callback);
                                            mService.sendMessage("" + tax_master.get_tax_name() + "    " + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "", "GBK");
                                        }
                                    }
                                    count++;
                                }

                                mService.sendMessage("................................", "GBK");
                                mService.sendMessage("Total Item  : " + orders.get_total_item(), "GBK");
                                mService.sendMessage("Item Quantity  : " + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check), "GBK");
                                String subtotal = "";
                                String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                Cursor cursor1 = database.rawQuery(strTableQry, null);
                                Tax_Master tax_master = null;
                                while (cursor1.moveToNext()) {
                                    subtotal = cursor1.getString(0);
                                }
                                subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                                mService.sendMessage("Subtotal  : " + subtotal, "GBK");
                                mService.sendMessage("................................", "GBK");
                                if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                    strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                            "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                            "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                    cursor1 = database.rawQuery(strTableQry, null);

                                    while (cursor1.moveToNext()) {
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                        mService.sendMessage("" + tax_master.get_tax_name() + "    " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "", "GBK");
                                    }
                                    if (tax_master != null) {
                                        mService.sendMessage("................................", "GBK");
                                    }
                                }

                                String discount = "0";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {

                                } else {
                                    discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        mService.sendMessage("Discount  : " + Globals.DiscountPer + "%", "GBK");
                                        mService.sendMessage("Discount  :" + discount, "GBK");
                                    }
                                }
                                String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                mService.sendMessage("Total  :" + tatalAftrDis, "GBK");

                                String total_tax;
                                total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                if (Double.parseDouble(total_tax) > 0d) {
                                    mService.sendMessage("Total Tax  :" + total_tax, "GBK");
                                    mService.sendMessage("................................", "GBK");
                                    Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                    String name = "", value = "";
                                    if (cursor.moveToFirst()) {
                                        do {
                                            name = cursor.getString(0);
                                            value = cursor.getString(1);
                                            mService.sendMessage(name + ":" + total_tax, "GBK");
                                        } while (cursor.moveToNext());
                                    }
                                }
                                mService.sendMessage("................................", "GBK");

                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                mService.sendMessage("Net Amt  :" + net_amount + "" + strCurrency, "GBK");
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                mService.sendMessage("Tender  :" + tender, "GBK");
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                mService.sendMessage("Change  :" + change_amount, "GBK");
                                cmd[2] &= 0xEF;
                                mService.write(cmd);
                                mService.sendMessage("................................", "GBK");
                   /*     order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                        if (order_payment_array.size() > 0) {
                            for (int i = 0; i < order_payment_array.size(); i++) {
                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                String name = "";
                                if (payment != null) {
                                    name = payment.get_payment_name();
                                    mService.sendMessage(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + "" + "\n", "GBK");
//                                    woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{9, 1, 20}, new int[]{0, 0, 0}, callback);
                                }
                            }
                            mService.sendMessage("................................", "GBK");
                        }*/
                                if (Globals.objsettings.get_Is_Accounts().equals("true")) {
                                    if (ck_project_type.equals("standalone")) {
                                        JSONObject jsonObject = new JSONObject();
                                        if (Globals.strContact_Code.equals("")) {
                                            mService.sendMessage("**\n", "GBK");
                                        } else {
                                            Double showAmount = 0d;
//                                    String curAmount = "";
                                            try {
                                                String strCreditAmt = "", strDeditAmount = "";
                                                Double creditAmount = 0d,
                                                        debitAmount = 0d;
                                                Cursor cursor = null;

                                                String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                                cursor = database.rawQuery(strQry1, null);
                                                while (cursor.moveToNext()) {
                                                    strCreditAmt = cursor.getString(0);

                                                }
                                                creditAmount = Double.parseDouble(strCreditAmt);

                                                String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                                cursor = database.rawQuery(strQry2, null);
                                                while (cursor.moveToNext()) {
                                                    strDeditAmount = cursor.getString(0);
                                                }
                                                debitAmount = Double.parseDouble(strDeditAmount);
                                                showAmount = debitAmount + creditAmount;
                                            } catch (Exception ex) {
                                            }

                                            double abs1 = Math.abs(showAmount);
                                            if (showAmount > 0) {
                                                mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR" + "\n", "GBK");
                                            } else {
                                                mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR" + "\n", "GBK");
                                            }
                                            try {
                                                jsonObject.put("Old Amt", abs1 + "");
                                            } catch (Exception ex) {
                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                    mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                                }
                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                            }
                                            if (strCur.equals("")) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                            }
                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {
                                            }
                                            Double strBalance = abs1 - Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {
                                            }

                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mService.sendMessage("Balance Amount  :" + Globals.myNumberFormat2Price(strBalance, decimal_check) + "" + "\n", "GBK");

                                            mService.sendMessage("................................", "GBK");
                                        }
                                    } else {
                                        JSONObject jsonObject = new JSONObject();
                                        if (Globals.strContact_Code.equals("")) {
                                            mService.sendMessage("**\n", "GBK");
                                        } else {
                                            String curAmount = "";
                                            try {
                                                strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);
                                                if (cursor1.moveToFirst()) {
                                                    do {
                                                        curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                    } while (cursor1.moveToNext());
                                                }
                                            } catch (Exception ex) {
                                                curAmount = "0";
                                            }
                                            double ab1 = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                            double abs1 = Math.abs(ab1);
                                            if (ab1 > 0) {
                                                mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR", "GBK");
                                            } else {
                                                mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR", "GBK");
                                            }
                                            try {
                                                jsonObject.put("Old Amt", curAmount + "");
                                            } catch (Exception ex) {

                                            }
                                            String strCur = "";

                                            try {
                                                strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                    mService.sendMessage("Current Amt  :" + strCur + "", "GBK");
                                                }
                                            } catch (Exception ex) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "", "GBK");
                                            }
                                            if (strCur.equals("")) {
                                                strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "", "GBK");
                                            }
                                            try {
                                                jsonObject.put("Current Amt", strCur + "");
                                            } catch (Exception ex) {

                                            }
                                            Double strBalance = ab1 + Double.parseDouble(strCur);
                                            try {
                                                jsonObject.put("Balance Amt", strBalance + "");
                                            } catch (Exception ex) {

                                            }
                                            String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                            db.executeDML(strUpdatePayment, database);

                                            mService.sendMessage("Balance Amount  :" + Globals.myNumberFormat2Price(strBalance, decimal_check) + "" + "\n", "GBK");
                                            mService.sendMessage("................................", "GBK");
                                        }
                                    }
                                }

                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    mService.sendMessage(Globals.objsettings.get_Footer_Text(), "GBK");
                                }
                                mService.sendMessage("      " + Globals.objsettings.get_Copy_Right() + "\n\n", "GBK");
                                cmd[2] &= 0xEF;
                                mService.write(cmd);
                                byte[] print = {0x1b, 0x0c};
                                mService.write(print);

                            }
                            Globals.strContact_Code = "";
                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = 0;
                            Globals.strOldCrAmt = "0";

                            flag = "1";
                            Globals.setEmpty();
                        }
                    } catch (Exception ex) {
                        String ab = ex.getMessage();
                        ab = ab;
                    }
                }
            }

        }
       /* if (opr.equals("PayCollection")) {

            if (mService.isAvailable() == false) {

            } else {
                for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                    final Pay_Collection pay_collection = Pay_Collection.getPay_Collection(getApplicationContext(), " WHERE id = '" + id + "'", database);

                    //printImage();
                    mService.sendMessage("Receipt Voucher", "GBK");
                    byte[] ab;
                    ab = BytesUtil.setAlignCenter(0);
                    mService.write(ab);

                    mService.sendMessage("Receipt No. :" + pay_collection.get_collection_code(), "GBK");
                    mService.sendMessage("Date  :" + pay_collection.get_collection_date(), "GBK");
                    String amount;
                    amount = Globals.myNumberFormat2Price(Double.parseDouble(pay_collection.get_amount()), decimal_check);
                    mService.sendMessage("Amount :" + amount, "GBK");

                    String[] str = amount.split("\\.");
                    if (str.length == 1) {
                        mService.sendMessage("In Words :" + Globals.convert(Integer.parseInt(str[0].toString())) + " Only ", "GBK");
                    } else if (str.length == 2) {
                        if (Integer.parseInt(str[1].toString()) == 0) {
                            mService.sendMessage("In Words :" + Globals.convert(Integer.parseInt(str[0].toString())) + " KD  Only ", "GBK");

                        } else {
                            mService.sendMessage("In Words :" + Globals.convert(Integer.parseInt(str[0].toString())) + " KD " + Globals.convert(Integer.parseInt(str[1].toString())) + " Fills Only ", "GBK");
                        }

                    }

                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + pay_collection.get_contact_code() + "'");
                    mService.sendMessage("Received From :" + contact.get_name(), "GBK");
                    mService.sendMessage("Cash/Cheque   :" + pay_collection.get_payment_mode(), "GBK");

                    if (pay_collection.get_payment_mode().equals("CHEQUE")) {
                        Bank bank = Bank.getBank(getApplicationContext(), " WHERE bank_code='" + pay_collection.get_ref_type() + "'", database);
                        mService.sendMessage("Bank Name  :" + bank.get_bank_name(), "GBK");
                        mService.sendMessage("Cheque No  :" + pay_collection.get_ref_no(), "GBK");

                    }

                    mService.sendMessage("On Account  :" + pay_collection.get_on_account(), "GBK");


                    mService.sendMessage("Remarks  :" + pay_collection.get_remarks(), "GBK");

                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                    mService.sendMessage("" + user.get_name(), "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("Receiver Signature", "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("", "GBK");
                    mService.sendMessage("", "GBK");
                    cmd[2] &= 0xEF;
                    mService.write(cmd);
                }
                flag = "1";
                Globals.setEmpty();
                Globals.strContact_Code = "";
                Globals.strResvContact_Code = "";
                Globals.DiscountPer = "";
                Globals.strOldCrAmt = "0";
            }


        } else if (lite_pos_registration.getIndustry_Type().equals("4")) {
            if (mService.isAvailable() == false) {

            } else {
                for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                    byte[] ab;
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);
                    mService.sendMessage("RECEIPT", "GBK");


                    try {
                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {

                        } else {
                            mService.sendMessage("" + Globals.objLPR.getService_code_tariff(), "GBK");
                        }
                    } catch (Exception ex) {

                    }
                    mService.sendMessage("" + Globals.objLPR.getCompany_Name(), "GBK");
                    mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");
                    mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");
                    ab = BytesUtil.setAlignCenter(0);
                    mService.write(ab);

                    mService.sendMessage(Globals.PrintDeviceID + " : " + Globals.objLPD.getDevice_Name(), "GBK");
                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);

                    mService.sendMessage(Globals.PrintCashier + " : " + user.get_name(), "GBK");
                    mService.sendMessage("RECEIPT NO. : " + strOrderNo, "GBK");
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);
                    if (Globals.strIsBarcodePrint.equals("true")) {
                        byte[] sendData;
                        sendData = BytesUtil.getPrintQRCode(strOrderNo, 1, 0);
                        mService.write(sendData);
                        ab = BytesUtil.setAlignCenter(0);
                        mService.write(ab);
                    }
                    mService.sendMessage("IN DT : " + DateUtill.PaternDatePrintDate(orders.get_order_date()), "GBK");
                    mService.sendMessage("IN TM : " + DateUtill.PaternDatePrintTime(orders.get_order_date()), "GBK");

                    int count = 0;
                    Double itemFinalTax = 0d;
                    while (count < order_detail.size()) {

                        String strItemCode = order_detail.get(count).get_item_code();

                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                + strItemCode + "'  GROUP By order_detail.item_Code");
                        int len = 12;
                        if (strItemName.length() > len) {
                            strItemName = strItemName.substring(0, len);
                        } else {
                            for (int sLen = strItemName.length(); sLen < len; sLen++) {
                                strItemName = strItemName + " ";
                            }
                        }

                        String sale_price;
                        Double dDisAfterSalePrice = 0d;

                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                        sale_price = Globals.myNumberFormat2Price((Double.parseDouble(dDisAfterSalePrice + "") * Double.parseDouble(order_detail.get(count).get_quantity() + "")), decimal_check);

                        mService.sendMessage("VEHICLE TYPE:  \n", "GBK");
                        mService.sendMessage(strItemName + " Rs. " + sale_price, "GBK");
                        count++;
                    }
                    mService.sendMessage("V.NO : " + orders.get_remarks(), "GBK");
                    ab = BytesUtil.setAlignCenter(1);
                    mService.write(ab);

                    if (!settings.get_Footer_Text().equals("")) {
                        mService.sendMessage(settings.get_Footer_Text() + "\n", "GBK");
                    }
                    mService.sendMessage(settings.get_Copy_Right() + "\n", "GBK");
                    mService.sendMessage("\n", "GBK");
                    cmd[2] &= 0xEF;
                    mService.write(cmd);
                    byte[] print = {0x1b, 0x0c};
                    mService.write(print);
                }
                Globals.strContact_Code = "";
                Globals.strResvContact_Code = "";
                Globals.DiscountPer = "";
                Globals.strOldCrAmt = "0";
                flag = "1";
                Globals.setEmpty();
            }

        } else {
            if ((lang.compareTo("en")) == 0) {
                try {
                    byte[] ab;
                    if (mService.isAvailable() == false) {
                    } else {
                        for (int k = 0; k < Integer.parseInt(settings.get_No_Of_Print()); k++) {
                            //printImage();
                            ab = BytesUtil.setAlignCenter(1);
                            mService.write(ab);
                            mService.sendMessage("" + Globals.objLPR.getCompany_Name().toUpperCase(), "GBK");
                            mService.sendMessage("" + Globals.objLPR.getAddress(), "GBK");
                            mService.sendMessage("" + Globals.objLPR.getMobile_No(), "GBK");

                            try {
                                if (Globals.objLPR.getService_code_tariff() == null) {
                                } else {
                                    mService.sendMessage("" + Globals.objLPR.getLicense_No(), "GBK");
                                }
                            } catch (Exception ex) {
                            }

                            ab = BytesUtil.setAlignCenter(0);
                            mService.write(ab);
                            if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
                            } else {
                                mService.sendMessage(Globals.GSTNo + " : " + Globals.objLPR.getLicense_No(), "GBK");
                            }
                            ab = BytesUtil.setAlignCenter(1);
                            mService.write(ab);
                            mService.sendMessage(Globals.PrintOrder, "GBK");
                            ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                            ArrayList<String> arrayList = new ArrayList<String>();
                            ab = BytesUtil.setAlignCenter(1);
                            mService.write(ab);
                            if (order_payment_array.size() > 0) {

                                for (int i = 0; i < order_payment_array.size(); i++) {
                                    arrayList.add(order_payment_array.get(i).get_payment_id());
                                }

                                if (arrayList.contains("1") && arrayList.contains("5")) {
                                    mService.sendMessage("Invoice Type: Credit/Cash", "GBK");
                                } else {
                                    if (arrayList.contains("5")) {
                                        mService.sendMessage("Invoice Type: Credit", "GBK");

                                    } else if (arrayList.contains("1")) {
                                        mService.sendMessage("Invoice Type: Cash", "GBK");
                                    }
                                }
                            }
                            if (Globals.strIsBarcodePrint.equals("true")) {
                                byte[] sendData;
                                sendData = BytesUtil.getPrintQRCode(strOrderNo, 1, 0);
                                mService.write(sendData);
                            }
                            ab = BytesUtil.setAlignCenter(0);
                            mService.write(ab);

                            mService.sendMessage(Globals.PrintInvNo + ":" + strOrderNo, "GBK");
                            mService.sendMessage(Globals.PrintInvDate + ":" + DateUtill.PaternDate1(orders.get_order_date()), "GBK");
                            mService.sendMessage(Globals.PrintDeviceID + ":" + Globals.objLPD.getDevice_Name(), "GBK");
                            user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                            mService.sendMessage(Globals.PrintCashier + ":" + user.get_name(), "GBK");

                            if (Globals.ModeResrv.equals("Resv")) {
                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                mService.sendMessage("Customer     :" + contact.get_name(), "GBK");
                                if (contact.get_gstin().length() > 0) {
                                    mService.sendMessage("Customer GST No. :" + contact.get_gstin(), "GBK");
                                }
                            } else {
                                if (Globals.strContact_Code.equals("")) {
                                } else {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                    mService.sendMessage("Customer     :" + contact.get_name(), "GBK");
                                    if (contact.get_gstin().length() > 0) {
                                        mService.sendMessage("Customer GST No. :" + contact.get_gstin(), "GBK");
                                    }
                                }
                            }

                            mService.sendMessage("................................", "GBK");
                            mService.sendMessage("Item Name       Qty       Price", "GBK");
                            mService.sendMessage("                          Total", "GBK");
                            mService.sendMessage("................................\n", "GBK");

                            int count = 0;
                            Double itemFinalTax = 0d;
                            while (count < order_detail.size()) {

                                String strItemCode = order_detail.get(count).get_item_code();
                                String strItemName = Order_Detail.getItemName(getApplicationContext(), "WHERE order_detail.item_Code  = '"
                                        + strItemCode + "'  GROUP By order_detail.item_code");
                                String sale_price;
                                Double dDisAfterSalePrice = 0d;
//                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);

                                Double dDisAfter = 0d;
                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                String line_total;
                                line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                mService.sendMessage("" + strItemName, "GBK");
                                mService.sendMessage("        " + order_detail.get(count).get_quantity() + "  " + sale_price + "  " + line_total, "GBK");

                                String discnt = "";
                                String disLbl = "";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                } else {
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                        discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                        disLbl = "Dis :";
                                    }
                                    mService.sendMessage("" + disLbl + " " + discnt, "GBK");
                                }

                                if (settings.get_HSN_print().equals("true")) {
                                    item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                    mService.sendMessage("HSN Code :" + item.get_hsn_sac_code() + "", "GBK");
                                }

                                if (settings.get_ItemTax().equals("1") || settings.get_ItemTax().equals("3")) {
                                    Tax_Master tax_master = null;
                                    ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                    for (int i = 0; i < order_detail_tax.size(); i++) {
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                        double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                        itemFinalTax += valueFinal;
                                        //woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(valueFinal, decimal_check)}, new int[]{15, 6}, new int[]{0, 0}, callback);
                                        mService.sendMessage("" + tax_master.get_tax_name() + "    " + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "", "GBK");
                                    }
                                }
                                count++;
                            }

                            mService.sendMessage("................................", "GBK");
                            mService.sendMessage("Total Item  :" + orders.get_total_item(), "GBK");
                            mService.sendMessage("Item Quantity  :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check), "GBK");
                            String subtotal = "";
                            String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                            Cursor cursor1 = database.rawQuery(strTableQry, null);
                            Tax_Master tax_master = null;
                            while (cursor1.moveToNext()) {
                                subtotal = cursor1.getString(0);
                            }
                            subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);

                            mService.sendMessage("Subtotal  :" + subtotal, "GBK");
                            mService.sendMessage("................................", "GBK");
                            if (settings.get_ItemTax().equals("2") || settings.get_ItemTax().equals("3")) {

                                strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                        "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                        "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                cursor1 = database.rawQuery(strTableQry, null);

                                while (cursor1.moveToNext()) {
                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
                                    mService.sendMessage("" + tax_master.get_tax_name() + "    " + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + "", "GBK");
                                }
                                mService.sendMessage("................................", "GBK");
                            }

                            String discount = "0";
                            if (Double.parseDouble(orders.get_total_discount()) == 0) {

                            } else {
                                discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                if (Globals.strIsDiscountPrint.equals("true")) {
                                    mService.sendMessage("Discount      : " + Globals.DiscountPer + "%", "GBK");
                                    mService.sendMessage("Discount  :" + discount, "GBK");
                                }
                            }
                            String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                            String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                            mService.sendMessage("Total    :" + tatalAftrDis, "GBK");

                            String total_tax;
                            total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                            if (Double.parseDouble(total_tax) > 0d) {
                                mService.sendMessage("Total Tax  :" + total_tax, "GBK");
                                mService.sendMessage("................................", "GBK");
                                Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                String name = "", value = "";
                                if (cursor.moveToFirst()) {
                                    do {
                                        name = cursor.getString(0);
                                        value = cursor.getString(1);
                                        mService.sendMessage(name + "         " + total_tax, "GBK");
                                    } while (cursor.moveToNext());
                                }
                            }
                            mService.sendMessage("................................", "GBK");

                            String net_amount;
                            net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                            String strCurrency;
                            if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                strCurrency = "";
                            } else {
                                strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                            }
                            mService.sendMessage("Net Amt   :" + net_amount + "" + strCurrency, "GBK");
                            String tender;
                            tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                            mService.sendMessage("Tender    :" + tender, "GBK");
                            String change_amount;
                            change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                            mService.sendMessage("Change    :" + change_amount + "\n", "GBK");
                            cmd[2] &= 0xEF;
                            mService.write(cmd);
                            mService.sendMessage("................................", "GBK");
                            order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                            if (order_payment_array.size() > 0) {
                                for (int i = 0; i < order_payment_array.size(); i++) {
                                    Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                    String name = "";
                                    if (payment != null) {
                                        name = payment.get_payment_name();
                                        mService.sendMessage(name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + "" + "\n", "GBK");
//                                    woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{9, 1, 20}, new int[]{0, 0, 0}, callback);
                                    }
                                }
                                mService.sendMessage("................................", "GBK");
                            }
                            if (settings.get_Is_Accounts().equals("true")) {
                                if (ck_project_type.equals("standalone")) {
                                    JSONObject jsonObject = new JSONObject();
                                    if (Globals.strContact_Code.equals("")) {
                                        mService.sendMessage("**\n", "GBK");
                                    } else {
                                        Double showAmount = 0d;
//                                    String curAmount = "";
                                        try {
                                            String strCreditAmt = "", strDeditAmount = "";
                                            Double creditAmount = 0d,
                                                    debitAmount = 0d;
                                            Cursor cursor = null;

                                            String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
                                            cursor = database.rawQuery(strQry1, null);
                                            while (cursor.moveToNext()) {
                                                strCreditAmt = cursor.getString(0);

                                            }
                                            creditAmount = Double.parseDouble(strCreditAmt);

                                            String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
                                            cursor = database.rawQuery(strQry2, null);
                                            while (cursor.moveToNext()) {
                                                strDeditAmount = cursor.getString(0);
                                            }
                                            debitAmount = Double.parseDouble(strDeditAmount);
                                            showAmount = debitAmount + creditAmount;
                                        } catch (Exception ex) {
                                        }

                                        double abs1 = Math.abs(showAmount);
                                        if (showAmount > 0) {
                                            mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR" + "\n", "GBK");
                                        } else {
                                            mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR" + "\n", "GBK");
                                        }
                                        try {
                                            jsonObject.put("Old Amt", abs1 + "");
                                        } catch (Exception ex) {
                                        }
                                        String strCur = "";

                                        try {
                                            strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                            }
                                        } catch (Exception ex) {
                                            strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                            mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                        }
                                        if (strCur.equals("")) {
                                            strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                            mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                        }
                                        try {
                                            jsonObject.put("Current Amt", strCur + "");
                                        } catch (Exception ex) {
                                        }
                                        Double strBalance = abs1 - Double.parseDouble(strCur);
                                        try {
                                            jsonObject.put("Balance Amt", strBalance + "");
                                        } catch (Exception ex) {
                                        }

                                        String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                        db.executeDML(strUpdatePayment, database);

                                        mService.sendMessage("Balance Amount  :" + Globals.myNumberFormat2Price(strBalance, decimal_check) + "" + "\n", "GBK");

                                        mService.sendMessage("................................", "GBK");
                                    }
                                } else {
                                    JSONObject jsonObject = new JSONObject();
                                    if (Globals.strContact_Code.equals("")) {
                                        mService.sendMessage("**\n", "GBK");
                                    } else {
                                        String curAmount = "";
                                        try {
                                            strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
                                            cursor1 = database.rawQuery(strTableQry, null);
                                            if (cursor1.moveToFirst()) {
                                                do {
                                                    curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                } while (cursor1.moveToNext());
                                            }
                                        } catch (Exception ex) {
                                            curAmount = "0";
                                        }
                                        double ab1 = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
                                        double abs1 = Math.abs(ab1);
                                        if (ab1 > 0) {
                                            mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "CR" + "\n", "GBK");
                                        } else {
                                            mService.sendMessage("Old Amt  :" + Globals.myNumberFormat2Price(abs1, decimal_check) + "DR" + "\n", "GBK");
                                        }
                                        try {
                                            jsonObject.put("Old Amt", curAmount + "");
                                        } catch (Exception ex) {

                                        }
                                        String strCur = "";

                                        try {
                                            strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) {
                                                strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
                                                mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                            }
                                        } catch (Exception ex) {
                                            strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                            mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                        }
                                        if (strCur.equals("")) {
                                            strCur = Globals.myNumberFormat2Price(0, decimal_check);
                                            mService.sendMessage("Current Amt  :" + strCur + "" + "\n", "GBK");
                                        }
                                        try {
                                            jsonObject.put("Current Amt", strCur + "");
                                        } catch (Exception ex) {

                                        }
                                        Double strBalance = ab1 + Double.parseDouble(strCur);
                                        try {
                                            jsonObject.put("Balance Amt", strBalance + "");
                                        } catch (Exception ex) {

                                        }
                                        String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
                                        db.executeDML(strUpdatePayment, database);

                                        mService.sendMessage("Balance Amount  :" + Globals.myNumberFormat2Price(strBalance, decimal_check) + "" + "\n", "GBK");
                                        mService.sendMessage("................................", "GBK");
                                    }
                                }
                            }

                            if (!settings.get_Footer_Text().equals("")) {
                                mService.sendMessage(settings.get_Footer_Text(), "GBK");
                            }
                            mService.sendMessage("      " + settings.get_Copy_Right() + "\n\n", "GBK");
                            cmd[2] &= 0xEF;
                            mService.write(cmd);
                            byte[] print = {0x1b, 0x0c};
                            mService.write(print);

                        }
                        Globals.strContact_Code = "";
                        Globals.strResvContact_Code = "";
                        Globals.DiscountPer = "";
                        Globals.strOldCrAmt = "0";

                        flag = "1";
                        Globals.setEmpty();
                    }
                } catch (Exception ex) {
                    String ab = ex.getMessage();
                    ab = ab;
                }
            }
        }*/
        return flag;
    }


    private void performOperationEn() {
        noofPrint = Integer.parseInt(Globals.objsettings.get_No_Of_Print());
        if (mylist.size() > 0) {
            try {
                String bill = "";
                for (String data : mylist) {
                    bill = bill + data;
                }
                for (int k = 0; k < noofPrint; k++) {
                    WifiPrintDriver.Begin();
                    WifiPrintDriver.ImportData(bill);
                    WifiPrintDriver.ImportData("\r");
                    WifiPrintDriver.excute();
                    WifiPrintDriver.ClearData();
                    String str = "\r\n\r\n\r\n\r\n";
                    byte[] feed = str.getBytes();
                    WifiPrintDriver.SPPWrite(feed);
                    byte[] paramString1 = new byte[]{27, 109, 2};
                    WifiPrintDriver.SPPWrite(paramString1);
                    WifiPrintDriver.excute();
                    WifiPrintDriver.ClearData();
                    PrintLayout.this.finish();
                }
            } catch (Exception e) {
            }
        }
    }

    protected void performOperation() {

        for (int k = 1; k <= noofPrint; k++) {
            Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
            PRN_PrintBitmap(bitmap, 80, 120);
            for (int i = 0; i < mylist.size(); i++) {
                PRN_PrintText(mylist.get(i), ALIGNMENT_LEFT, FT_DEFAULT,
                        TS_0WIDTH | TS_0HEIGHT);
                PRN_PrintText(mylist.get(i), ALIGNMENT_LEFT, FT_DEFAULT,
                        TS_0WIDTH | TS_0HEIGHT);
            }
            PRN_LineFeed(4);
            PRN_CutPaper();
        }
    }

    private void mobile_pos(final Orders orders, final ArrayList<Order_Detail> order_detail) {



                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            String strString = "";

                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                String Print_type = "0";
                                woyouService.setAlignment(1, callback);
                                Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                if (bitmap != null) {
                                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                    bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                    bitmap = getResizedBitmap(bitmap, 80, 120);
                                    woyouService.printBitmap(bitmap, callback);
                                }

                                woyouService.printTextWithFont(" \n", "", 24, callback);
                                woyouService.setAlignment(1, callback);
                                if(Globals.objLPR.getShort_companyname().isEmpty()){
                                    woyouService.printTextWithFont("" + Globals.objLPR.getCompany_Name() + "\n", "", 28, callback);

                                }
                                else{
                                    woyouService.printTextWithFont("" + Globals.objLPR.getShort_companyname() + "\n", "", 28, callback);

                                }
                               if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                   if (Globals.objLPR.getAddress().equals("") || Globals.objLPR.getAddress().equals("null") || Globals.objLPR.getAddress().length() == 0 || Globals.objLPR.getAddress().isEmpty()) {

                                   } else {
                                       woyouService.printTextWithFont("" + Globals.objLPR.getAddress() + "\n", "", 28, callback);
                                   }
                                   if (Globals.objLPR.getMobile_No().equals("") || Globals.objLPR.getMobile_No().equals("null") || Globals.objLPR.getMobile_No().length() == 0 || Globals.objLPR.getMobile_No().isEmpty()) {

                                   } else {
                                       woyouService.printTextWithFont("" + Globals.objLPR.getMobile_No() + "\n", "", 28, callback);
                                   }
                                   try {
                                       if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().isEmpty()) {

                                       } else {
                                           woyouService.printTextWithFont("" + Globals.objLPR.getService_code_tariff() + "\n", "", 28, callback);
                                       }
                                   } catch (Exception ex) {

                                   }
                                   woyouService.setFontSize(28, callback);
                                   if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().isEmpty()) {

                                   } else {
                                       woyouService.printColumnsText(new String[]{Globals.GSTLbl, ":", Globals.objLPR.getLicense_No()}, new int[]{6, 1, 20}, new int[]{0, 0, 0}, callback);
                                   }
                                   // woyouService.setAlignment(1, callback);
                                   woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);
                                   woyouService.printTextWithFont(Globals.PrintOrder + "\n", "", 28, callback);
                                   woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);
                                   //woyouService.setAlignment(1, callback);
                                   if (Globals.strIsBarcodePrint.equals("true")) {
                                       woyouService.printBarCode(strOrderNo, 8, 60, 120, 0, callback);
                                       woyouService.printTextWithFont(" \n", "", 24, callback);
                                   }
                               }
                                woyouService.setAlignment(0, callback);
                                woyouService.setFontSize(30, callback);
                                int strLength = 14;
                                strString = Globals.myRequiredString(Globals.PrintInvNo , strLength);
                                woyouService.printTextWithFont(strString+ ":"+ strOrderNo +"\n","", 28, callback);
                                strString = Globals.myRequiredString(Globals.PrintInvDate , strLength);
                                woyouService.printTextWithFont(strString+ ":"+ DateUtill.PaternDate1(orders.get_order_date()).substring(0,11)+"\n","", 28, callback);

                                    strString = Globals.myRequiredString("Invoice Time", strLength);
                                    woyouService.printTextWithFont(strString + ":" + DateUtill.PaternDate1(orders.get_order_date()).substring(12, 20) + "\n", "", 28, callback);
                                if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString(Globals.PrintDeviceID, strLength);

                                    woyouService.printTextWithFont(strString + ":" + Globals.objLPD.getDevice_Name() + "\n", "", 28, callback);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    strString = Globals.myRequiredString(Globals.PrintCashier, strLength);

                                    woyouService.printTextWithFont(strString + ":" + user.get_name() + "\n", "", 28, callback);

                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                        strString = Globals.myRequiredString("Customer", strLength);

                                        woyouService.printTextWithFont(strString + ":" + contact.get_name() + "\n", "", 28, callback);
                                        if (contact.get_gstin().length() > 0) {
                                            strString = Globals.myRequiredString("Customer GST No.", strLength);

                                            woyouService.printTextWithFont(strString + ":" + contact.get_gstin() + "\n", "", 28, callback);
                                        }
                                    } else {


                                            if (orders.get_contact_code().equals("") || orders.get_contact_code().equals("0")) {

                                            } else {
                                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                                strString = Globals.myRequiredString("Customer", strLength);

                                                woyouService.printTextWithFont(strString + ":" + contact.get_name() + "\n", "", 28, callback);
                                                if (contact.get_gstin().length() > 0) {
                                                    strString = Globals.myRequiredString("Customer GST No.", strLength);

                                                    woyouService.printTextWithFont(strString + ":" + contact.get_gstin() + "\n", "", 28, callback);

                                                }
                                            }


                       /*                 if (orders.get_contact_code().equals("") || orders.get_contact_code().equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                            strString = Globals.myRequiredString("Customer", strLength);

                     CheckprinterConnection                       woyouService.printTextWithFont(strString + ":" + contact.get_name() + "\n", "", 28, callback);
                                            if (contact.get_gstin().length() > 0) {
                                                strString = Globals.myRequiredString("Customer GST No.", strLength);

                                                woyouService.printTextWithFont(strString + ":" + contact.get_gstin() + "\n", "", 28, callback);

                                            }
                                        }*/
                                    }
                                }

                                if(Globals.strorderType.equals("")){

                                    if(orders.get_order_type_id().equals("5")) {
                                        Globals.strorderType = "Dine-In";
                                        strString = Globals.myRequiredString("Order Type", strLength);
                                        woyouService.printTextWithFont(strString + " : " + Globals.strorderType + "\n", "", 28, callback);
                                    }
                                }
                                else {
                                    strString = Globals.myRequiredString("Order Type", strLength);
                                    woyouService.printTextWithFont(strString + ":" + Globals.strorderType + "\n", "", 28, callback);
                                }

                                if(Globals.objLPR.getproject_id().equals("cloud")) {
                                    if (Globals.strorderType.equals("Dine-In")) {
                                        Table table = Table.getTable(getApplicationContext(), database, db, " WHERE table_code='" + orders.get_table_code() + "'");
                                        if(table!=null) {

                                            Globals.table_code = table.get_table_code();
                                            Globals.table_name = table.get_table_name();
                                            Globals.strZoneName = table.getZone_name();

                                        strString = Globals.myRequiredString("Table No", strLength);
                                        woyouService.printTextWithFont(strString + ":" + Globals.table_name + "\n", "", 28, callback);

                                        strString = Globals.myRequiredString("Zone", strLength);
                                        woyouService.printTextWithFont(strString + ":" + Globals.strZoneName + "\n", "", 28, callback);
                                        }
                                    }
                                }

                                woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);
                                woyouService.printTextWithFont("Item Name\n", "", 28, callback);
                                woyouService.printColumnsText(new String[]{"Qty", "Price", "Total"}, new int[]{7, 9, 15}, new int[]{0, 0, 0}, callback);
                                woyouService.setAlignment(0, callback);
                                woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);
                                int count = 0;
                                Double itemFinalTax = 0d;
                                double finalitemTax=0d;
                                while (count < order_detail.size()) {

                                    String strItemCode = order_detail.get(count).get_item_code();
                                    item = Item.getItem(getApplicationContext(),"where item_code ='"+ strItemCode+"'",database,db);
                                    String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");


                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;

//                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);
                                    Double dDisAfter = 0d;
                                    dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                    dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                    sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                    String line_total;
                                    line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);

                                    item=Item.getItem(getApplicationContext(),"WHERE item_code='"+ strItemCode +"' ",database,db);
                                    if(item!=null) {
                                        String ismodifier= item.getIs_modifier();
                                        if(ismodifier.equals("1")) {
                                            woyouService.printTextWithFont(strItemName +  " (M)"+"\n", "", 28, callback);

                                        }
                                        else{
                                            woyouService.printTextWithFont(strItemName + "\n", "", 28, callback);

                                        }
                                    }

                                        woyouService.printColumnsText(new String[]{Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check), sale_price, line_total}, new int[]{8, 8, 8}, new int[]{0, 0, 0}, callback);

                                    if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                        String discnt = "";
                                        String disLbl = "";
                                        String strHSNLbl = "", HSNValue = "", strLBlDis = "";

                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {

                                            if (Globals.strIsDiscountPrint.equals("true")) {

                                                if(item.get_is_inclusive_tax().equals("1")) {

                                                    double saleprice=Double.parseDouble(order_detail.get(count).get_sale_price())-Double.parseDouble(order_detail.get(count).get_tax());
                                                    Double dis = saleprice - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    strLBlDis = "Dis ";
                                                }
                                                else{
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    strLBlDis = "Dis ";
                                                }
                                            }
                                           /* if(!discnt.equals("")) {
                                                strString = Globals.myRequiredString(disLbl, strLength);

                                                woyouService.printTextWithFont(strString + discnt + "\n", "", 30, callback);
                                            }*/
                                        }

                                        if (Globals.objsettings.get_HSN_print().equals("true")) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            HSNValue = item.get_hsn_sac_code();
                                            strHSNLbl = "HSN Code :";
                                            Globals.AppLogWrite("HSN " + HSNValue);

                                        }




                                        if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("false")) {

                                        } else if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("true")) {
                                            if(!HSNValue.equals("")) {
                                                strString = Globals.myRequiredString(strHSNLbl, strLength);
                                                woyouService.printTextWithFont(strString + "        :" + HSNValue + "\n", "", 30, callback);
                                            }

                                        } else if (Globals.strIsDiscountPrint.equals("true") && Globals.objsettings.get_HSN_print().equals("false")) {
                                            String strdiscount;
                                            //strLength = 23;
                                            if(!discnt.equals("")) {
                                                strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                                woyouService.printTextWithFont(strdiscount + discnt + "\n", "", 30, callback);
                                            }
                                        } else {
                                            // HSN Code : A34455  Discount :
                                            if(HSNValue!="" || discnt!="") {
                                                strString = Globals.myRequiredString(strHSNLbl, strLength);
                                                String strdiscount;
                                                strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                                woyouService.printTextWithFont(strString + ":" + HSNValue + "  " + strdiscount + ":" + discnt + "\n", "", 30, callback);
                                            }
                                        }





//                                woyouService.printTextWithFont("" + line_total + "\n", "", 30, callback);

                                       /* if (Globals.objsettings.get_HSN_print().equals("true") || (!Globals.objsettings.get_HSN_print().isEmpty())) {
                                            item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                            strString = Globals.myRequiredString("HSN Code", strLength);
                                            if(!item.get_hsn_sac_code().equals("")){
                                            woyouService.printTextWithFont(strString + item.get_hsn_sac_code() + "\n", "", 28, callback);
                                            }
                                        }*/
                                        Globals.AppLogWrite("IteM tAX " + Globals.objsettings.get_ItemTax().toString());
                                        if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                    /*        if(item.get_is_inclusive_tax().equals("0")) {
                                                Tax_Master tax_master = null;
                                                ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                for (int i = 0; i < order_detail_tax.size(); i++) {
                                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                    double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                    itemFinalTax += valueFinal;


                                                    strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);
                                                    Globals.AppLogWrite("IteM tAX Name" + strString);
                                                    woyouService.printTextWithFont(strString + Globals.myNumberFormat2Price(valueFinal, decimal_check) + "\n", "", 28, callback);
                                                }
                                            }*/
                                                            //   if(item.get_is_inclusive_tax().equals("0")) {
                                                Tax_Master tax_master = null;
                                                try {
                                                    ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                    for (int i = 0; i < order_detail_tax.size(); i++) {
                                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                        //
                                                        //strLength = 14;

                                                        String strTaxName = tax_master.get_tax_name();
                                                        String tax_rate;
//                        tax_rate = Globals.myNumberFormat2Price(Double.parseDouble(order_detail_tax.get(i).get_tax_value()), decimal_check);
                                                        double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));

                                                        tax_rate = Globals.myNumberFormat2Price(valueFinal, decimal_check) + "";
                                                        itemFinalTax += valueFinal;

                                                        strString = Globals.myRequiredString(strTaxName, strLength);

                                                        woyouService.printTextWithFont(strString + tax_rate + "\n", "", 28, callback);

                                                    }
                                                } catch (Exception e) {
                                                    System.out.println(e.getMessage());
                                                }
                                            //}
                                            }

                                    }
                   /*                 Tax_Master tax_master = null;
                                    ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                    for (int i = 0; i < order_detail_tax.size(); i++) {
                                        if(item.get_is_inclusive_tax().equals("0")) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                            itemFinalTax += valueFinal;
                                            finalitemTax += valueFinal;
                                        }
                                    }*/

                                    count++;
                                }



                                woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);
                                if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString("Total Item", strLength);

                                    woyouService.printTextWithFont(strString + ":" + orders.get_total_item() + "\n", "", 28, callback);
                                    strString = Globals.myRequiredString("Item Quantity", strLength);

                                    woyouService.printTextWithFont(strString + ":" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "", 28, callback);

                                    String discount = "0";

                                    String strLine1  = "";
                                    String strLine2  = "";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {
                                        double disct=0d;
                                        if (Globals.strIsDenominationPrint.equals("true")) {
                                            disct = Globals.Denomination(Double.parseDouble(orders.get_total_discount() + ""), scale, decimal_check);
                                        }
                                        else{
                                            disct=Double.parseDouble(orders.get_total_discount() + "");
                                        }
                                        discount=String.valueOf(disct);
                                      //  discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            //   woyouService.printColumnsText(new String[]{"Discount", ":", Globals.DiscountPer + "%"}, new int[]{14, 1, 20}, new int[]{0, 0, 0}, callback);
                                            strString = Globals.myRequiredString("Discount", strLength);


                                            strLine2=strString + ":" + discount;

                                           // woyouService.printTextWithFont(strString + ":" + discount + "\n", "", 28, callback);
                                        }
                                    }

                                    String subtotal = "";
                                    String subLinetotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master = null;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                        subLinetotal=cursor1.getString(0);
                                    }

                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);


                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {

                                            double disct=0d;
                                            if (Globals.strIsDenominationPrint.equals("true")) {
                                                disct = Globals.Denomination(Double.parseDouble(orders.get_total_discount() + ""), scale, decimal_check);
                                            }
                                            else{
                                                disct=Double.parseDouble(orders.get_total_discount() + "");
                                            }
                                            discount=String.valueOf(disct);
                                       // discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {

                                            strLine1 = Globals.myNumberFormat2Price((Double.parseDouble(subtotal))+ Double.parseDouble(discount), decimal_check);

                                            strString = Globals.myRequiredString("Line Total", strLength);

                                            woyouService.printTextWithFont(strString + ":" + strLine1 + "\n", "", 28, callback);

                                            woyouService.printTextWithFont(strLine2 + "\n", "", 28, callback);
                                        }
                                    }

                                    strString = Globals.myRequiredString("Subtotal", strLength);

                                    woyouService.printTextWithFont(strString + ":" + subtotal + "\n", "", 28, callback);
                                    woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);

                                    if (Globals.objsettings.get_ItemTax() != "null") {
                                        if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                            strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                    "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                    "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                            cursor1 = database.rawQuery(strTableQry, null);

                                            while (cursor1.moveToNext()) { 

                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
//                                            woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check)}, new int[]{14, 10}, new int[]{0, 0}, callback);
                                                strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                                woyouService.printTextWithFont(strString + ":" + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + " \n", "", 28, callback);
                                                // woyouService.printTextWithFont();
                                            }
                                            if (tax_master != null) {
                                                woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);
                                            }
                                        }

                                    }


                                    String ttl_aftr_dis = (Double.parseDouble(subtotal)) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                    strString = Globals.myRequiredString("Total", strLength);

                                    woyouService.printTextWithFont(strString + ":" + tatalAftrDis + "\n", "", 28, callback);
                                    String total_tax;
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        strString = Globals.myRequiredString("Order Tax", strLength);

                                        woyouService.printTextWithFont(strString + ":" + total_tax + "\n", "", 28, callback);
                                       woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);
                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                strString = Globals.myRequiredString(name, strLength);

                                                woyouService.printTextWithFont(strString + ":" + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "", 28, callback);
                                            } while (cursor.moveToNext());
                                        }
                                    }
                                    woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);
                                }
                                String net_amount;
                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strCurrency;
                                if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                    strCurrency = "";
                                } else {
                                    strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                }
                                strString = Globals.myRequiredString("Net Amt" , strLength);

                                woyouService.printTextWithFont(strString+ ":"+ net_amount + "" + strCurrency +"\n","" ,28,callback);
                                woyouService.printTextWithFont("--------------------------------\n", "", 24, callback);

                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                strString = Globals.myRequiredString("Tender" , strLength);

                                woyouService.printTextWithFont(strString+ ":"+ tender +"\n","",28, callback);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                strString = Globals.myRequiredString("Change" , strLength);

                                woyouService.printTextWithFont(strString+ ":"+ change_amount +"\n","",28, callback);
                                woyouService.printTextWithFont("--------------------------------", "", 24, callback);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                if (order_payment_array.size() > 0) {
                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                        String name = "";
                                        if (payment != null) {
                                            name = payment.get_payment_name();
                                            if(payment.get_payment_name().equals("CUSTOMER ACCOUNT")){
                                                strString = Globals.myRequiredString("Customer ACC." , strLength);
                                            }
                                            else {
                                                strString = Globals.myRequiredString(name, strLength);
                                            }
                                            woyouService.printTextWithFont("\n"+strString + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check), "", 28, callback);
                                          //  woyouService.printTextWithFont(Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + " \n", "", 24, callback);
//                                                woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{16, 1, 20}, new int[]{0, 0, 0}, callback);
                                        }

                                    }
                                    woyouService.printTextWithFont("\n--------------------------------\n", "", 24, callback);
                                }

                                woyouService.setAlignment(1, callback);
                                woyouService.printTextWithFont(" \n", "", 24, callback);
                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    woyouService.printTextWithFont(Globals.objsettings.get_Footer_Text(), "", 28, callback);
                                    woyouService.printTextWithFont("\n", "", 24, callback);
                                }

                                woyouService.printTextWithFont("" + Globals.objsettings.get_Copy_Right() + "\n", "", 28, callback);
                                if (Globals.PrinterType.equals("9")) {
                                    woyouService.printTextWithFont(" \n", "", 24, callback);
                                    woyouService.printTextWithFont(" \n", "", 24, callback);
                                    woyouService.printTextWithFont(" \n", "", 24, callback);
                                    woyouService.printTextWithFont(" \n", "", 24, callback);
                                }

                                woyouService.printTextWithFont(" \n", "", 24, callback);
                                woyouService.printTextWithFont(" \n", "", 24, callback);
                                woyouService.printTextWithFont(" \n", "", 24, callback);

                                // woyouService.cutPaper(callback);
                            }
                            Globals.strContact_Code = "";
                            Globals.strResvContact_Code = "";
                            Globals.DiscountPer = 0;
                            Globals.strOldCrAmt = "0";
                            Globals.strZoneName="";
                            Globals.table_name="";
                            Globals.strorderType="";
                            Globals.setEmpty();
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                });



    }


    private void PHAPOS(final Orders orders, final ArrayList<Order_Detail> order_detail) {

            if (Globals.objsettings.get_Print_Lang().equals("0")) {

                    ThreadPoolManager.getInstance().executeTask(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                String strString = "";

                                for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                    String Print_type = "0";
                                    woyouService.setAlignment(1, callback);
                                    Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                    if (bitmap != null) {
                                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                        bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                        bitmap = getResizedBitmap(bitmap, 80, 120);
                                        woyouService.printBitmap(bitmap, callback);
                                    }

                                    woyouService.printTextWithFont(" \n", "", 24, callback);
                                    woyouService.setAlignment(1, callback);
                                   if(Globals.objLPR.getShort_companyname().isEmpty()){
                                       woyouService.printTextWithFont("" + Globals.objLPR.getCompany_Name() + "\n", "", 28, callback);

                                   }
                                   else{
                                       woyouService.printTextWithFont("" + Globals.objLPR.getShort_companyname() + "\n", "", 28, callback);

                                   }
                                    if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                        if (Globals.objLPR.getAddress().equals("") || Globals.objLPR.getAddress().equals("null") || Globals.objLPR.getAddress().length() == 0 || Globals.objLPR.getAddress().isEmpty()) {

                                        } else {
                                            woyouService.printTextWithFont("" + Globals.objLPR.getAddress() + "\n", "", 28, callback);
                                        }
                                        if (Globals.objLPR.getMobile_No().equals("") || Globals.objLPR.getMobile_No().equals("null") || Globals.objLPR.getMobile_No().length() == 0 || Globals.objLPR.getMobile_No().isEmpty()) {

                                        } else {
                                            woyouService.printTextWithFont("" + Globals.objLPR.getMobile_No() + "\n", "", 28, callback);
                                        }
                                        try {
                                            if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().isEmpty()) {

                                            } else {
                                                woyouService.printTextWithFont("" + Globals.objLPR.getService_code_tariff() + "\n", "", 28, callback);
                                            }
                                        } catch (Exception ex) {

                                        }
                                        woyouService.setFontSize(28, callback);
                                        if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().isEmpty()) {

                                        } else {
                                            woyouService.printColumnsText(new String[]{Globals.GSTLbl, ":", Globals.objLPR.getLicense_No()}, new int[]{6, 1, 20}, new int[]{0, 0, 0}, callback);
                                        }
                                        // woyouService.setAlignment(1, callback);
                                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                        woyouService.printTextWithFont(Globals.PrintOrder + "\n", "", 28, callback);
                                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                        //woyouService.setAlignment(1, callback);
                                        if (Globals.strIsBarcodePrint.equals("true")) {
                                            woyouService.printBarCode(strOrderNo, 8, 60, 120, 0, callback);
                                            woyouService.printTextWithFont(" \n", "", 24, callback);
                                        }
                                    }
                                    woyouService.setAlignment(0, callback);
                                    woyouService.setFontSize(28, callback);
                                    int strLength = 20;
                                    strString = Globals.myRequiredString(Globals.PrintInvNo , strLength);
                                    woyouService.printTextWithFont(strString+ ":"+ strOrderNo +"\n","", 28, callback);
                                    strString = Globals.myRequiredString(Globals.PrintInvDate , strLength);
                                    woyouService.printTextWithFont(strString+ ":"+ DateUtill.PaternDate1(orders.get_order_date()).substring(0,11)+"\n","", 28, callback);

                                        strString = Globals.myRequiredString("Invoice Time", strLength);
                                        woyouService.printTextWithFont(strString + ":" + DateUtill.PaternDate1(orders.get_order_date()).substring(12, 20) + "\n", "", 28, callback);
                                    if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                        strString = Globals.myRequiredString(Globals.PrintDeviceID, strLength);

                                        woyouService.printTextWithFont(strString + ":" + Globals.objLPD.getDevice_Name() + "\n", "", 28, callback);
                                        user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                        strString = Globals.myRequiredString(Globals.PrintCashier, strLength);

                                        woyouService.printTextWithFont(strString + ":" + user.get_name() + "\n", "", 28, callback);

                                        if (Globals.ModeResrv.equals("Resv")) {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.CustomerResrv + "'");
                                            strString = Globals.myRequiredString("Customer", strLength);

                                            woyouService.printTextWithFont(strString + ":" + contact.get_name() + "\n", "", 28, callback);
                                            if (contact.get_gstin().length() > 0) {
                                                strString = Globals.myRequiredString("Customer GST No.", strLength);

                                                woyouService.printTextWithFont(strString + ":" + contact.get_gstin() + "\n", "", 28, callback);
                                            }
                                        } else {
                                            if (orders.get_contact_code().equals("") || orders.get_contact_code().equals("0")) {

                                            } else {
                                                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                                                strString = Globals.myRequiredString("Customer", strLength);

                                                woyouService.printTextWithFont(strString + ":" + contact.get_name() + "\n", "", 28, callback);
                                                if (contact.get_gstin().length() > 0) {
                                                    strString = Globals.myRequiredString("Customer GST No.", strLength);

                                                    woyouService.printTextWithFont(strString + ":" + contact.get_gstin() + "\n", "", 28, callback);

                                                }
                                            }
                                        }
                                    }
                                    if(Globals.strorderType.equals("")){

                                        if(orders.get_order_type_id().equals("5")) {
                                            Globals.strorderType = "Dine-In";
                                            strString = Globals.myRequiredString("OrderType", strLength);
                                            woyouService.printTextWithFont(strString + " : " + Globals.strorderType + "\n", "", 28, callback);
                                        }
                                    }
                                    else {
                                        strString = Globals.myRequiredString("OrderType", strLength);
                                        woyouService.printTextWithFont(strString + " : " + Globals.strorderType + "\n", "", 28, callback);

                                    }
                                    if(Globals.objLPR.getproject_id().equals("cloud")) {
                                       if( Globals.strorderType.equals("Dine-In")) {

                                           Table table = Table.getTable(getApplicationContext(), database, db, " WHERE table_code='" + orders.get_table_code() + "'");

                                           if(table!=null) {
                                               Globals.table_code = table.get_table_code();
                                               Globals.table_name = table.get_table_name();
                                               Globals.strZoneName = table.getZone_name();

                                               strString = Globals.myRequiredString("Table No", strLength);
                                               woyouService.printTextWithFont(strString + " : " + Globals.table_name + "\n", "", 28, callback);
                                               strString = Globals.myRequiredString("Zone", strLength);
                                               woyouService.printTextWithFont(strString + " : " + Globals.strZoneName + "\n", "", 28, callback);
                                           }
                                           }
                                   }
                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                    woyouService.printTextWithFont("Item Name\n", "", 28, callback);
                                    woyouService.printColumnsText(new String[]{"Qty", "Price", "Total"}, new int[]{15, 17, 15}, new int[]{0, 0, 0}, callback);
                                    woyouService.setAlignment(0, callback);
                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                    int count = 0;
                                    Double itemFinalTax = 0d;
                                    Double finalitemTax= 0d;
                                    while (count < order_detail.size()) {

                                        String strItemCode = order_detail.get(count).get_item_code();

                                        item = Item.getItem(getApplicationContext(), "where item_code ='" + strItemCode + "'", database, db);
                                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                                + strItemCode + "'  GROUP By order_detail.item_Code");


                                        String sale_price;
                                        Double dDisAfterSalePrice = 0d;

//                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);

                                        String line_total;
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                        item = Item.getItem(getApplicationContext(), "WHERE item_code='" + strItemCode + "' ", database, db);
                                        if (item != null) {
                                            String ismodifier = item.getIs_modifier();
                                            if (ismodifier.equals("1")) {

                                                woyouService.printTextWithFont(strItemName + " (M)" + "\n", "", 28, callback);
                                            } else {
                                                woyouService.printTextWithFont(strItemName + "\n", "", 28, callback);

                                            }
                                        }

                                        woyouService.printColumnsText(new String[]{Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check), sale_price, line_total}, new int[]{15, 17, 15}, new int[]{0, 0, 0}, callback);
       /*                                 if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                            String discnt = "";
                                            String disLbl = "";
                                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                            } else {

                                                if (Globals.strIsDiscountPrint.equals("true")) {
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    disLbl = "Dis ";
                                                }
                                                if(!discnt.equals("")) {
                                                    strString = Globals.myRequiredString(disLbl, strLength);

                                                    woyouService.printTextWithFont(strString + discnt + "\n", "", 30, callback);
                                                }
                                            }

//                                woyouService.printTextWithFont("" + line_total + "\n", "", 30, callback);

                                            if (Globals.objsettings.get_HSN_print().equals("true") || (!Globals.objsettings.get_HSN_print().isEmpty())) {
                                                item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                                strString = Globals.myRequiredString("HSN Code", strLength);
                                                if(!item.get_hsn_sac_code().equals("")) {
                                                    woyouService.printTextWithFont(strString + item.get_hsn_sac_code() + "\n", "", 28, callback);
                                                }
                                            }*/


                                        if (Globals.objsettings.get_Print_Memo().equals("0")) {
                                            String discnt = "";
                                            String disLbl = "";
                                            String strHSNLbl = "", HSNValue = "", strLBlDis = "";

                                            if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                            } else {

                                                if (Globals.strIsDiscountPrint.equals("true")) {
                                                    Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                                    discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                                    strLBlDis = "Dis ";
                                                }
                                           /* if(!discnt.equals("")) {
                                                strString = Globals.myRequiredString(disLbl, strLength);

                                                woyouService.printTextWithFont(strString + discnt + "\n", "", 30, callback);
                                            }*/
                                            }

                                            if (Globals.objsettings.get_HSN_print().equals("true")) {
                                                item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                                                HSNValue = item.get_hsn_sac_code();
                                                strHSNLbl = "HSN Code :";

                                            }


                                            if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("false")) {

                                            } else if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("true")) {
                                                if (!HSNValue.equals("")) {
                                                    strString = Globals.myRequiredString(strHSNLbl, strLength);
                                                    woyouService.printTextWithFont(strString + "         " + HSNValue + "\n", "", 28, callback);
                                                }

                                            } else if (Globals.strIsDiscountPrint.equals("true") && Globals.objsettings.get_HSN_print().equals("false")) {
                                                String strdiscount;
                                                //strLength = 23;
                                                if (!discnt.equals("")) {
                                                    strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                                    woyouService.printTextWithFont(strdiscount + discnt + "\n", "", 28, callback);
                                                }
                                            } else {
                                                // HSN Code : A34455  Discount :
                                                if (HSNValue != "" || discnt != "") {
                                                    strString = Globals.myRequiredString(strHSNLbl, strLength);
                                                    String strdiscount;
                                                    strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                                                    woyouService.printTextWithFont(strString + " " + HSNValue + "  " + strdiscount + ":" + discnt + "\n", "", 28, callback);
                                                }
                                            }


                                            if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                                // if(item.get_is_inclusive_tax().equals("0")) {
                                                Tax_Master tax_master = null;
                                                try {
                                                    ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                                    for (int i = 0; i < order_detail_tax.size(); i++) {
                                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                        //
                                                        //strLength = 14;

                                                        String strTaxName = tax_master.get_tax_name();
                                                        String tax_rate;
//                        tax_rate = Globals.myNumberFormat2Price(Double.parseDouble(order_detail_tax.get(i).get_tax_value()), decimal_check);
                                                        double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));

                                                        tax_rate = Globals.myNumberFormat2Price(valueFinal, decimal_check) + "";
                                                        itemFinalTax += valueFinal;

                                                        strString = Globals.myRequiredString(strTaxName, strLength);

                                                        woyouService.printTextWithFont(strString + tax_rate + "\n", "", 28, callback);

                                                    }
                                                    // }
                                                } catch (Exception e) {
                                                }
                                            }


                           /*             Tax_Master tax_master = null;
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            if(item.get_is_inclusive_tax().equals("0")) {
                                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                                itemFinalTax += valueFinal;
                                                finalitemTax += valueFinal;
                                            }
                                        }*/

                                            count++;
                                        }
                                    }

                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                    if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                        strString = Globals.myRequiredString("Total Item", strLength);

                                        woyouService.printTextWithFont(strString + ":" + orders.get_total_item() + "\n", "", 28, callback);
                                        strString = Globals.myRequiredString("Item Quantity", strLength);

                                        woyouService.printTextWithFont(strString + ":" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + "\n", "", 28, callback);
                                        String subtotal = "";
                                        String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                        Cursor cursor1 = database.rawQuery(strTableQry, null);
                                        Tax_Master tax_master = null;
                                        while (cursor1.moveToNext()) {
                                            subtotal = cursor1.getString(0);
                                        }

                                        subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        strString = Globals.myRequiredString("Subtotal", strLength);

                                        woyouService.printTextWithFont(strString + ":" + subtotal + "\n", "", 28, callback);
                                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);

                                        if (Globals.objsettings.get_ItemTax() != "null") {
                                            if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3") || (!Globals.objsettings.get_ItemTax().isEmpty()) || (!Globals.objsettings.get_ItemTax().equals("Select"))) {

                                                strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                        "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                        "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                                cursor1 = database.rawQuery(strTableQry, null);

                                                while (cursor1.moveToNext()) {
                                                    tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
//                                            woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check)}, new int[]{14, 10}, new int[]{0, 0}, callback);
                                                    strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);

                                                    woyouService.printTextWithFont(strString + ":" + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + " \n", "", 28, callback);
                                                    // woyouService.printTextWithFont();
                                                }
                                                if (tax_master != null) {
                                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                                }
                                            }

                                        }
                                        String discount = "0";
                                        if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                        } else {
                                            double disct=0d;
                                            if (Globals.strIsDenominationPrint.equals("true")) {
                                                disct = Globals.Denomination(Double.parseDouble(orders.get_total_discount() + ""), scale, decimal_check);
                                            }
                                            else{
                                                disct=Double.parseDouble(orders.get_total_discount() + "");
                                            }
                                            discount=String.valueOf(disct);
                                            //discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                            if (Globals.strIsDiscountPrint.equals("true")) {
                                                //   woyouService.printColumnsText(new String[]{"Discount", ":", Globals.DiscountPer + "%"}, new int[]{14, 1, 20}, new int[]{0, 0, 0}, callback);
                                                strString = Globals.myRequiredString("Discount", strLength);

                                                woyouService.printTextWithFont(strString + ":" + discount + "\n", "", 28, callback);
                                            }
                                        }
                                        String ttl_aftr_dis = (Double.parseDouble(subtotal) ) + "";
                                        String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
                                        strString = Globals.myRequiredString("Total", strLength);

                                        woyouService.printTextWithFont(strString + ":" + tatalAftrDis + "\n", "", 28, callback);
                                        String total_tax;
                                        total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
                                        if (Double.parseDouble(total_tax) > 0d) {
                                            strString = Globals.myRequiredString("Total Tax", strLength);

                                            woyouService.printTextWithFont(strString + ":" + total_tax + "\n", "", 28, callback);
                                            woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                            Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                            String name = "", value = "";
                                            if (cursor.moveToFirst()) {
                                                do {
                                                    name = cursor.getString(0);
                                                    value = cursor.getString(1);
                                                    strString = Globals.myRequiredString(name, strLength);

                                                    woyouService.printTextWithFont(strString + ":" + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + "\n", "", 28, callback);
                                                } while (cursor.moveToNext());
                                            }
                                        }
                                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                    }
                                    String net_amount;
                                    net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                    String strCurrency;
                                    if (Globals.objLPD.getCurreny_Symbol().equals("")) {
                                        strCurrency = "";
                                    } else {
                                        strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
                                    }
                                    strString = Globals.myRequiredString("Net Amt" , strLength);

                                    woyouService.printTextWithFont(strString+ ":"+ net_amount + "" + strCurrency +"\n","" ,28,callback);
                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);

                                    String tender;
                                    tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                    strString = Globals.myRequiredString("Tender" , strLength);

                                    woyouService.printTextWithFont(strString+ ":"+ tender +"\n","",28, callback);
                                    String change_amount;
                                    change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                    strString = Globals.myRequiredString("Change" , strLength);

                                    woyouService.printTextWithFont(strString+ ":"+ change_amount +"\n","",28, callback);
                                    woyouService.printTextWithFont("------------------------------------------------", "", 24, callback);
                                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                if (order_payment_array.size() > 0) {
                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                        String name = "";
                                        if (payment != null) {
                                            name = payment.get_payment_name();
                                            if(payment.get_payment_name().equals("CUSTOMER ACCOUNT")){
                                                strString = Globals.myRequiredString("Customer ACC." , strLength);
                                            }
                                            else {
                                                strString = Globals.myRequiredString(name, strLength);
                                            }
                                            woyouService.printTextWithFont("\n"+strString + ":"+ Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check), "", 28, callback);
                                            //woyouService.printTextWithFont(Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + " \n", "", 24, callback);
//                                                woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{16, 1, 20}, new int[]{0, 0, 0}, callback);
                                        }

                                    }
                                    woyouService.printTextWithFont("\n------------------------------------------------", "", 24, callback);
                                }

                                    woyouService.setAlignment(1, callback);
                                    woyouService.printTextWithFont(" \n", "", 24, callback);
                                    if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                        woyouService.printTextWithFont(Globals.objsettings.get_Footer_Text(), "", 28, callback);
                                        woyouService.printTextWithFont("\n", "", 24, callback);
                                    }

                                    woyouService.printTextWithFont("" + Globals.objsettings.get_Copy_Right() + "\n", "", 28, callback);
                                    woyouService.printTextWithFont(" \n", "", 24, callback);
                                    woyouService.printTextWithFont(" \n", "", 24, callback);
                                    woyouService.printTextWithFont(" \n", "", 24, callback);
                                    woyouService.cutPaper(callback);
                                }

                                if(Globals.objsettings.getIs_selfpos_KOT().equals("true")){
                                    if(!pos_flag.equals("1")) {
                                        PHAPOS_KOT(orders, order_detail);
                                    }
                                }
                                else {
                                    Globals.strContact_Code = "";
                                    Globals.strResvContact_Code = "";
                                    Globals.DiscountPer = 0;
                                    Globals.strOldCrAmt = "0";
                                    Globals.strZoneName = "";
                                    Globals.table_name = "";
                                    Globals.strorderType = "";
                                    Globals.setEmpty();
                                }
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        }
                    });

            } else if (Globals.objsettings.get_Print_Lang().equals("1")) {

                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            String strString = "";
                            int strLength=20;
                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                String strPOSNo = "لحم.";
                                String strGSTNo = "رقم ضريبة السلع والخدمات";
                                String strOrderNum = "رقم الطلب";
                                String strOrderDate = "تاريخ الطلب";
                                String strCashier = "أمين الصندوق" ;


                                woyouService.setAlignment(1, callback);
                                Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                if (bitmap != null) {
                                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                    bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                    bitmap = getResizedBitmap(bitmap, 80, 120);
                                    woyouService.printBitmap(bitmap, callback);
                                }

                                woyouService.printTextWithFont(" \n", "", 28, callback);
                                woyouService.setAlignment(1, callback);
                                user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                if(Globals.objLPR.getShort_companyname().isEmpty()){
                                    woyouService.printTextWithFont("" + Globals.objLPR.getCompany_Name() + "\n", "", 28, callback);

                                }
                                else{
                                    woyouService.printTextWithFont("" + Globals.objLPR.getShort_companyname() + "\n", "", 28, callback);

                                }
                                if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                    if (Globals.objLPR.getAddress().equals("") || Globals.objLPR.getAddress().equals("null") || Globals.objLPR.getAddress().length() == 0 || Globals.objLPR.getAddress().isEmpty()) {

                                    } else {
                                        woyouService.printTextWithFont("" + Globals.objLPR.getAddress() + "\n", "", 28, callback);
                                    }
                                    if (Globals.objLPR.getMobile_No().equals("") || Globals.objLPR.getMobile_No().equals("null") || Globals.objLPR.getMobile_No().length() == 0 || Globals.objLPR.getMobile_No().isEmpty()) {

                                    } else {
                                        woyouService.printTextWithFont("" + Globals.objLPR.getMobile_No() + "\n", "", 28, callback);
                                    }
                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().isEmpty()) {

                                        } else {
                                            woyouService.printTextWithFont("" + Globals.objLPR.getService_code_tariff() + "\n", "", 28, callback);
                                        }
                                    } catch (Exception ex) {

                                    }
                                    woyouService.setFontSize(28, callback);
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().isEmpty()) {

                                    } else {
                                        woyouService.printColumnsText(new String[]{Globals.GSTLbl, ":", Globals.objLPR.getLicense_No()}, new int[]{6, 1, 20}, new int[]{0, 0, 0}, callback);
                                    }
                                    // woyouService.setAlignment(1, callback);
                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                    woyouService.printTextWithFont(Globals.PrintOrder + "\n", "", 28, callback);
                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                    //woyouService.setAlignment(1, callback);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        woyouService.printBarCode(strOrderNo, 8, 60, 120, 0, callback);
                                        woyouService.printTextWithFont(" \n", "", 28, callback);
                                    }
                                }
                                woyouService.setAlignment(0, callback);
                                woyouService.setFontSize(28, callback);

//                            woyouService.setAlignment(2, callback);


                                strString = Globals.myRequiredString(strOrderNum , strLength);
                                woyouService.printTextWithFont(strString+ ":"+ orders.get_order_code() +"\n","", 28, callback);

                                strString = Globals.myRequiredString(strOrderDate , strLength);
                                woyouService.printTextWithFont(strString+ ":"+ DateUtill.PaternDate1(orders.get_order_date()).substring(0,11)+"\n","", 28, callback);

                                    strString = Globals.myRequiredString("وقت الفاتورة", strLength);
                                    woyouService.printTextWithFont(strString + ":" + DateUtill.PaternDate1(orders.get_order_date()).substring(12, 20) + "\n", "", 28, callback);
                                if(Globals.objsettings.get_Print_Memo().equals("0")) {

                                    strString = Globals.myRequiredString(strPOSNo, strLength);
                                    woyouService.printTextWithFont(strString + ":" + Globals.objLPD.getDevice_Name() + "\n", "", 28, callback);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    strString = Globals.myRequiredString(strCashier, strLength);

                                    woyouService.printTextWithFont(strString + ":" + user.get_name() + "\n", "", 28, callback);



                                if (Globals.ModeResrv.equals("Resv")) {
                                    Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code ='" + Globals.strContact_Code + "'");
                                    String strCustomerName = "Customer/زبون";
                                    strString = Globals.myRequiredString(strCustomerName, strLength);
                                    woyouService.printTextWithFont(strString + contact.get_name() + "\n", "", 28, callback);
                                    if (contact.get_gstin().length() > 0) {
                                        strString = Globals.myRequiredString(strGSTNo, strLength);
                                        woyouService.printTextWithFont(strString + contact.get_gstin() + " \n", "", 28, callback);
                                    }
                                } else {
                                    if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                    } else {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                        String strCustomerName = "زبون";
                                        strString = Globals.myRequiredString(strCustomerName, strLength);
                                        woyouService.printTextWithFont(strString + contact.get_name() + "\n", "", 28, callback);
                                     //   woyouService.printTextWithFont(contact.get_name() + "\n", "", 28, callback);
                                        if (contact.get_gstin().length() > 0) {
                                            strString = Globals.myRequiredString(strGSTNo, strLength);
                                            woyouService.printTextWithFont(strString + contact.get_gstin() + " \n", "", 28, callback);
                                            //woyouService.printTextWithFont(contact.get_gstin() + " \n", "", 28, callback);

                                        }
                                    }
                                }
                                }
                                if(Globals.strorderType.equals("")){


                                    if(orders.get_order_type_id().equals("5")) {
                                        Globals.strorderType = "Dine-In";
                                        strString = Globals.myRequiredString("OrderType", strLength);
                                        woyouService.printTextWithFont(strString + " : " + Globals.strorderType + "\n", "", 28, callback);
                                    }
                                }
                                else {
                                    strString = Globals.myRequiredString("نوع الطلب", strLength);
                                    woyouService.printTextWithFont(strString + " : " + Globals.strorderType + "\n", "", 28, callback);
                                }
                                if(Globals.objLPR.getproject_id().equals("cloud")) {
                                    if( Globals.strorderType.equals("Dine-In")) {
                                        Table table = Table.getTable(getApplicationContext(), database, db, " WHERE table_code='" + orders.get_table_code() + "'");

                                        if(table!=null) {
                                            Globals.table_code = table.get_table_code();
                                            Globals.table_name = table.get_table_name();
                                            Globals.strZoneName = table.getZone_name();

                                            strString = Globals.myRequiredString("رقم الجدول", strLength);
                                        woyouService.printTextWithFont(strString + " : " + Globals.table_name + "\n", "", 28, callback);
                                        strString = Globals.myRequiredString("منطقة", strLength);
                                        woyouService.printTextWithFont(strString + " : " + Globals.strZoneName + "\n", "", 28, callback);
                                    }}
                                }

                                woyouService.setAlignment(0, callback);
                                woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                woyouService.printTextWithFont("اسم العنصر\n", "", 28, callback);
                                woyouService.printTextWithFont("الكمية           السعر            مجموع\n", "", 28, callback);
                        // woyouService.printColumnsText(new String[]{"Qty/الكمية","Price/السعر","Total/مجموع"}, new int[]{15,17,15}, new int[]{0,0,0}, callback);
                                woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);

                                int count = 0;
                                Double itemFinalTax = 0d;
                                woyouService.setAlignment(0, callback);
                                while (count < order_detail.size()) {
                                    String strItemCode = order_detail.get(count).get_item_code();

                                    String strItemName = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");

                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;

                                   /* int len = 15;
                                    if (strItemName.length() > len) {
                                        strItemName = strItemName.substring(0, len);
                                    } else {
                                        for (int sLen = strItemName.length(); sLen < len; sLen++) {
                                            strItemName = strItemName + " ";
                                        }
                                    }*/

                                    try {
//                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);
                                    } catch (Exception ex) {
                                        dDisAfterSalePrice = 0d;
                                        sale_price = "Error";
                                    }

                                    String line_total = "";
                                    try {
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                    } catch (Exception ex) {
                                        line_total = "error";
                                    }

                                    item=Item.getItem(getApplicationContext(),"WHERE item_code='"+ strItemCode +"' ",database,db);
                                    if(item!=null) {
                                        String ismodifier = item.getIs_modifier();
                                        if (ismodifier.equals("1")) {

                                            woyouService.printTextWithFont(strItemName  + " (M)"+ "\n", "", 28, callback);

                                        }
                                        else{
                                            woyouService.printTextWithFont(strItemName + "\n", "", 28, callback);

                                        }
                                    }
                                    woyouService.printColumnsText(new String[]{Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check), sale_price, line_total}, new int[]{15, 17, 15}, new int[]{0, 0, 0}, callback);
                                    //woyouService.printTextWithFont( " : Line No 4074 \n", "", 24, callback);
                                    String discnt = "";
                                    String disLbl = "";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {

                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            Double dis = 0d;
                                            try {
                                                dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                            } catch (Exception ex) {
                                                dis = 0d;
                                            }

                                            discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                            disLbl = "Dis :";
                                        }
                                        strString = Globals.myRequiredString(disLbl, strLength);
                                        //woyouService.printTextWithFont( " : Line No 4096 \n", "", 24, callback);
                                        woyouService.printTextWithFont(strString +  ":" + discnt +"\n", "", 28, callback);

                                      //  woyouService.printColumnsText(new String[]{disLbl, discnt}, new int[]{5, 11}, new int[]{0, 0}, callback);
                                    }

                                    if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                        Tax_Master tax_master = null;
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                            itemFinalTax += valueFinal;
                                            strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);
                                            //woyouService.printTextWithFont( " : Line No 4107 \n", "", 24, callback);
                                            woyouService.printTextWithFont(strString +  ":" +Globals.myNumberFormat2Price(valueFinal, decimal_check) +"\n", "", 28, callback);

                                          //  woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(valueFinal, decimal_check)}, new int[]{15, 6}, new int[]{0, 0}, callback);
                                        }
                                    }

                                    count++;
                                }


                                woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString("البند الكلي" , strLength);
                                woyouService.printTextWithFont(strString + orders.get_total_item() + " \n", "", 28, callback);
                               /// woyouService.printTextWithFont(orders.get_total_item() + " \n", "", 28, callback);
                                    strString = Globals.myRequiredString("البند الكمية" , strLength);
                                    woyouService.printTextWithFont(strString + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + " \n", "", 28, callback);
                               // woyouService.printTextWithFont(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + " \n", "", 28, callback);


                                String subtotal = "";
                                String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                Cursor cursor1 = database.rawQuery(strTableQry, null);
                                Tax_Master tax_master;
                                while (cursor1.moveToNext()) {
                                    subtotal = cursor1.getString(0);
                                }
                                try {
                                    subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                                } catch (Exception ex) {
                                    //subtotal = "0";
                                }

                                String strSbtotal = "حاصل الجمع";
                               strString = Globals.myRequiredString(strSbtotal , strLength);
                                woyouService.printTextWithFont(strString + ": "+ subtotal + " \n", "", 28, callback);
                              //  woyouService.printTextWithFont(subtotal + " \n", "", 28, callback);
                                woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
//
                                if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                    strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                            "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                            "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                    cursor1 = database.rawQuery(strTableQry, null);

                                    while (cursor1.moveToNext()) {
                                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
//                                  woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check)}, new int[]{20, 10}, new int[]{0, 0}, callback);
                                        strString = Globals.myRequiredString(tax_master.get_tax_name() , strLength);
                                        woyouService.printTextWithFont(strString + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + " \n", "", 28, callback);
                                       // woyouService.printTextWithFont(Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + " \n", "", 28, callback);
//                                    woyouService.printTextWithFont( + ":" +  + " \n", "", 24, callback);
                                    }
                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                }

                                String discount = "0";
                                if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                } else {
                                    discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    if (Globals.strIsDiscountPrint.equals("true")) {
                                        String strdiscnt = "خصم";
                                        strString = Globals.myRequiredString(strdiscnt , strLength);
                                        woyouService.printTextWithFont(strString + ":" + Globals.DiscountPer + "%" + " \n", "", 28, callback);
                                       // woyouService.printTextWithFont(Globals.DiscountPer + "%" + " \n", "", 28, callback);

                                        strdiscnt = "خصم";
                                        strString = Globals.myRequiredString(strdiscnt , strLength);
                                        woyouService.printTextWithFont(strString + ":" +discount + " \n", "", 28, callback);
                                        //woyouService.printTextWithFont(discount + " \n", "", 28, callback);
                                        //woyouService.printColumnsText(new String[]{"Discount", ":", discount}, new int[]{14, 1, 20}, new int[]{0, 0, 0}, callback);
                                    }
                                }
                                String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);

                                String strAftrDis = "مجموع";
                                    strString = Globals.myRequiredString(strAftrDis , strLength);
                                woyouService.printTextWithFont(strString + ":" + tatalAftrDis + " \n", "", 28, callback);
                               // woyouService.printTextWithFont(tatalAftrDis + " \n", "", 28, callback);
//
//
                                String total_tax = "0";
////
                                total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
////
                                if (Double.parseDouble(total_tax) > 0d) {
                                    String strTotal_tax = "ضريبة";
                                    strString = Globals.myRequiredString(strTotal_tax , strLength);
                                    woyouService.printTextWithFont(strString + ":" +total_tax + " \n", "", 28, callback);
                                   // woyouService.printTextWithFont(total_tax + " \n", "", 28, callback);

                                    woyouService.printTextWithFont("--------------------------------------------\n", "", 24, callback);

                                    Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                    String name = "", value = "";
                                    if (cursor.moveToFirst()) {
                                        do {
                                            name = cursor.getString(0);
                                            value = cursor.getString(1);
                                            //woyouService.printColumnsText(new String[]{name,":", Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check)}, new int[]{20, 2, 10}, new int[]{0, 0, 0}, callback);
                                            //woyouService.printTextWithFont(name + "        " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + " \n", "", 24, callback);
                                            strString = Globals.myRequiredString(name , strLength);
                                            woyouService.printTextWithFont(strString + ":" + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + " \n", "", 28, callback);
                                            //woyouService.printTextWithFont(Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + " \n", "", 28, callback);
                                        } while (cursor.moveToNext());
                                    }
                                }

                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                }
                                String net_amount;

                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strNet_amount = "كمية الشبكة";
                                strString = Globals.myRequiredString(strNet_amount , strLength);
                                woyouService.printTextWithFont(strString + ":" + net_amount + " \n", "", 28, callback);
                                //woyouService.printTextWithFont(net_amount + " \n", "", 28, callback);
                                String tender;
                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                String strTender = "مناقصة";
                                strString = Globals.myRequiredString(strTender , strLength);
                                woyouService.printTextWithFont(strString + ":" + tender + " \n", "", 28, callback);
                               // woyouService.printTextWithFont(tender + " \n", "", 28, callback);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                String strChange_amount = "يتغيرون";
                                strString = Globals.myRequiredString(strChange_amount , strLength);
                                woyouService.printTextWithFont(strString + ":" +change_amount + " \n", "", 28, callback);
                              //  woyouService.printTextWithFont(change_amount + " \n", "", 28, callback);

                                woyouService.printTextWithFont("--------------------------------------------\n", "", 24, callback);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                if (order_payment_array.size() > 0) {
                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                        String name = "";
                                        if (payment != null) {
                                            name = payment.get_payment_name();
                                            if(payment.get_payment_name().equals("CUSTOMER ACCOUNT")){
                                                strString = Globals.myRequiredString("Customer ACC." , strLength);
                                            }
                                            else {
                                                strString = Globals.myRequiredString(name, strLength);
                                            }
                                            woyouService.printTextWithFont("\n"+strString + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check), "", 28, callback);
                                           // woyouService.printTextWithFont(Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + " \n", "", 28, callback);
//                                        woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{16, 1, 20}, new int[]{0, 0, 0}, callback);
                                        }

                                    }
                                    woyouService.printTextWithFont("\n------------------------------------------------", "", 24, callback);
                                }
                                woyouService.setAlignment(1, callback);
                                woyouService.printTextWithFont(" \n", "", 28, callback);
                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    woyouService.printTextWithFont(Globals.objsettings.get_Footer_Text(), "", 28, callback);
                                    woyouService.printTextWithFont("\n", "", 28, callback);
                                }

                                woyouService.printTextWithFont("" + Globals.objsettings.get_Copy_Right() + "\n", "", 28, callback);
                                woyouService.printTextWithFont(" \n", "", 28, callback);
                                woyouService.printTextWithFont(" \n", "", 28, callback);
                                woyouService.printTextWithFont(" \n", "", 28, callback);

                                //woyouService.printColumnsText(new String[]{orders.get_total_item(),":","Tender/مناقصة"}, new int[]{14, 1, 20}, new int[]{0, 0, 0}, callback);
                            }
                            woyouService.cutPaper(callback);

                            if(Globals.objsettings.getIs_selfpos_KOT().equals("true")){
                                if(!pos_flag.equals("1")) {
                                    PHAPOS_KOT(orders, order_detail);
                                }
                            }
                            else {
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.strorderType = "";
                                Globals.strZoneName = "";
                                Globals.table_name = "";
                                Globals.setEmpty();
                            }
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }

                });
            } else if (Globals.objsettings.get_Print_Lang().equals("2")) {
                ThreadPoolManager.getInstance().executeTask(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            String strString = "";
                            int strLength=20;
                            for (int k = 0; k < Integer.parseInt(Globals.objsettings.get_No_Of_Print()); k++) {
                                String strPOSNo = "Device ID/لحم." + " ";
                                String strGSTNo = Globals.GSTLbl + " ";
                                String strOrderNum = "Invoice Number/رقم الطلب" + "  ";
                                String strOrderDate = "Invoice Date/تاريخ الطلب" + "  ";
                                String strCashier = "Salesperson/أمين الصندوق" + " ";

                                woyouService.setAlignment(1, callback);
                                Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
                                if (bitmap != null) {
                                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                                    bitmap.compress(Bitmap.CompressFormat.PNG, 50, stream);
                                    bitmap = getResizedBitmap(bitmap, 80, 120);
                                    woyouService.printBitmap(bitmap, callback);
                                }

                                woyouService.printTextWithFont(" \n", "", 24, callback);
                                woyouService.setAlignment(1, callback);
                                user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                if(Globals.objLPR.getShort_companyname().isEmpty()){
                                    woyouService.printTextWithFont("" + Globals.objLPR.getCompany_Name() + "\n", "", 28, callback);

                                }
                                else{
                                    woyouService.printTextWithFont("" + Globals.objLPR.getShort_companyname() + "\n", "", 28, callback);

                                }
                                if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                    if (Globals.objLPR.getAddress().equals("") || Globals.objLPR.getAddress().equals("null") || Globals.objLPR.getAddress().length() == 0 || Globals.objLPR.getAddress().isEmpty()) {

                                    } else {
                                        woyouService.printTextWithFont("" + Globals.objLPR.getAddress() + "\n", "", 28, callback);
                                    }
                                    if (Globals.objLPR.getMobile_No().equals("") || Globals.objLPR.getMobile_No().equals("null") || Globals.objLPR.getMobile_No().length() == 0 || Globals.objLPR.getMobile_No().isEmpty()) {

                                    } else {
                                        woyouService.printTextWithFont("" + Globals.objLPR.getMobile_No() + "\n", "", 28, callback);
                                    }
                                    try {
                                        if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().isEmpty()) {

                                        } else {
                                            woyouService.printTextWithFont("" + Globals.objLPR.getService_code_tariff() + "\n", "", 28, callback);
                                        }
                                    } catch (Exception ex) {

                                    }
                                    woyouService.setFontSize(28, callback);
                                    if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().isEmpty()) {

                                    } else {
                                        woyouService.printColumnsText(new String[]{Globals.GSTLbl, ":", Globals.objLPR.getLicense_No()}, new int[]{6, 1, 20}, new int[]{0, 0, 0}, callback);
                                    }
                                    // woyouService.setAlignment(1, callback);
                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                    woyouService.printTextWithFont(Globals.PrintOrder + "\n", "", 28, callback);
                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                    //woyouService.setAlignment(1, callback);
                                    if (Globals.strIsBarcodePrint.equals("true")) {
                                        woyouService.printBarCode(strOrderNo, 8, 60, 120, 0, callback);
                                        woyouService.printTextWithFont(" \n", "", 28, callback);
                                    }
                                }
                                woyouService.setAlignment(0, callback);
                                woyouService.setFontSize(28, callback);
//                            woyouService.setAlignment(2, callback);


                                    strString = Globals.myRequiredString("وقت الفاتورة", strLength);
                                    woyouService.printTextWithFont(strString + ":" + DateUtill.PaternDate1(orders.get_order_date()).substring(12, 20) + "\n", "", 28, callback);
                                    if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString = Globals.myRequiredString(strPOSNo, strLength);
                                    woyouService.printTextWithFont(strString + ":" + Globals.objLPD.getDevice_Name() + "\n", "", 28, callback);
                                    user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
                                    strString = Globals.myRequiredString(strCashier, strLength);

                                    woyouService.printTextWithFont(strString + ":" + user.get_name() + "\n", "", 28, callback);



                                    if (Globals.ModeResrv.equals("Resv")) {
                                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code ='" + Globals.strContact_Code + "'");
                                        String strCustomerName = "Customer/زبون";
                                        woyouService.printTextWithFont(strCustomerName + "\n", "", 28, callback);
                                        woyouService.printTextWithFont(contact.get_name() + "\n", "", 28, callback);
                                        if (contact.get_gstin().length() > 0) {
                                            woyouService.printTextWithFont(strGSTNo + " \n", "", 28, callback);
                                            woyouService.printTextWithFont(contact.get_gstin() + " \n", "", 28, callback);
                                        }
                                    } else {
                                        if (Globals.strContact_Code.equals("") || Globals.strContact_Code.equals("0")) {

                                        } else {
                                            Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + Globals.strContact_Code + "'");
                                            String strCustomerName = "زبون" + "  ";
                                            woyouService.printTextWithFont(strCustomerName + "\n", "", 28, callback);
                                            woyouService.printTextWithFont(contact.get_name() + "\n", "", 28, callback);
                                            if (contact.get_gstin().length() > 0) {
                                                woyouService.printTextWithFont(strGSTNo + " \n", "", 28, callback);
                                                woyouService.printTextWithFont(contact.get_gstin() + " \n", "", 28, callback);

                                            }
                                        }
                                    }
                                }

                                if(Globals.strorderType.equals("")){


                                    if(orders.get_order_type_id().equals("5")) {
                                        Globals.strorderType = "Dine-In";
                                        strString = Globals.myRequiredString("نوع الطلب/Order Type", strLength);
                                        woyouService.printTextWithFont(strString + " : " + Globals.strorderType + "\n", "", 28, callback);
                                    }
                                }
                                else {
                                    strString = Globals.myRequiredString("نوع الطلب/Order Type", strLength);
                                    woyouService.printTextWithFont(strString + " : " + Globals.strorderType + "\n", "", 28, callback);
                                }
                                if(Globals.objLPR.getproject_id().equals("cloud")) {
                                    if( Globals.strorderType.equals("Dine-In")) {

                                        Table table = Table.getTable(getApplicationContext(), database, db, " WHERE table_code='" + orders.get_table_code() + "'");

                                        if (table != null) {
                                            Globals.table_code = table.get_table_code();
                                            Globals.table_name = table.get_table_name();
                                            Globals.strZoneName = table.getZone_name();

                                            strString = Globals.myRequiredString("رقم الجدول/Table No", strLength);
                                            woyouService.printTextWithFont(strString + " : " + Globals.table_name + "\n", "", 28, callback);
                                            strString = Globals.myRequiredString("منطقة/Zone", strLength);
                                            woyouService.printTextWithFont(strString + " : " + Globals.strZoneName + "\n", "", 28, callback);
                                        }
                                    }
                                }
                                woyouService.setAlignment(0, callback);
                                woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                woyouService.printTextWithFont("Item Name/اسم العنصر\n", "", 28, callback);
                                woyouService.printTextWithFont("Qty/الكمية     Price/السعر     Total/مجموع\n", "", 28, callback);
//                          woyouService.printColumnsText(new String[]{"Qty/الكمية","Price/السعر","Total/مجموع"}, new int[]{10,10,10}, new int[]{0,0,0}, callback);
                                woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);

                                int count = 0;
                                Double itemFinalTax = 0d;
                                woyouService.setAlignment(0, callback);
                                while (count < order_detail.size()) {
                                    String strItemCode = order_detail.get(count).get_item_code();

                                    String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");
                                    String strItemNameL = Order_Detail.getItemName_L(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                                            + strItemCode + "'  GROUP By order_detail.item_Code");
                                    String sale_price;
                                    Double dDisAfterSalePrice = 0d;

                                 /*   int len = 15;
                                    if (strItemName.length() > len) {
                                        strItemName = strItemName.substring(0, len);
                                    } else {
                                        for (int sLen = strItemName.length(); sLen < len; sLen++) {
                                            strItemName = strItemName + " ";
                                        }
                                    }*/

                                    try {
//                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);
                                        Double dDisAfter = 0d;
                                        dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
                                        dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
                                        sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);
                                    } catch (Exception ex) {
                                        dDisAfterSalePrice = 0d;
                                        sale_price = "Error";
                                    }

                                    String line_total = "";
                                    try {
                                        line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);
                                    } catch (Exception ex) {
                                        line_total = "error";
                                    }

                                    item=Item.getItem(getApplicationContext(),"WHERE item_code='"+ strItemCode +"' ",database,db);
                                    if(item!=null) {
                                        String ismodifier = item.getIs_modifier();
                                        if (ismodifier.equals("1")) {
                                            woyouService.printTextWithFont(strItemName +  " (M)" + "\n", "", 28, callback);
                                            woyouService.printTextWithFont(strItemNameL +  " (M)"+ "\n", "", 28, callback);

                                        }
                                        else{
                                            woyouService.printTextWithFont(strItemName + "\n", "", 28, callback);
                                            woyouService.printTextWithFont(strItemNameL + "\n", "", 28, callback);

                                        }
                                    }


                                    woyouService.printColumnsText(new String[]{Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check), sale_price, line_total}, new int[]{15, 17, 15}, new int[]{0, 0, 0}, callback);
                                    //woyouService.printTextWithFont( " : Line No 4074 \n", "", 24, callback);
                                    String discnt = "";
                                    String disLbl = "";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {

                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            Double dis = 0d;
                                            try {
                                                dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                                            } catch (Exception ex) {
                                                dis = 0d;
                                            }

                                            discnt = Globals.myNumberFormat2Price(dis, decimal_check);
                                            disLbl = "Dis :";
                                        }
                                        //woyouService.printTextWithFont( " : Line No 4096 \n", "", 24, callback);
                                        woyouService.printColumnsText(new String[]{disLbl, discnt}, new int[]{5, 11}, new int[]{0, 0}, callback);
                                    }

                                    if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                                        Tax_Master tax_master = null;
                                        ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                                        for (int i = 0; i < order_detail_tax.size(); i++) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                            double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));
                                            itemFinalTax += valueFinal;
                                            //woyouService.printTextWithFont( " : Line No 4107 \n", "", 24, callback);
                                            woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(valueFinal, decimal_check)}, new int[]{15, 6}, new int[]{0, 0}, callback);
                                        }
                                    }

                                    count++;
                                }


                                woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                if(Globals.objsettings.get_Print_Memo().equals("0")) {
                                    strString=Globals.myRequiredString("Total Item/البند الكلي",strLength);
                                    woyouService.printTextWithFont(strString + orders.get_total_item() + " \n", "", 28, callback);
                                   // woyouService.printTextWithFont(orders.get_total_item() + " \n", "", 24, callback);
                                    strString=Globals.myRequiredString("Item Quantity/البند الكمية",strLength);
                                    woyouService.printTextWithFont(strString + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + " \n", "", 28, callback);
                                   // woyouService.printTextWithFont(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check) + " \n", "", 24, callback);


                                    String subtotal = "";
                                    String strTableQry = "Select SUM(order_detail.sale_price*order_detail.quantity) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
                                    Cursor cursor1 = database.rawQuery(strTableQry, null);
                                    Tax_Master tax_master;
                                    while (cursor1.moveToNext()) {
                                        subtotal = cursor1.getString(0);
                                    }
                                    try {
                                        subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)) - Double.parseDouble(orders.get_total_discount()), decimal_check);
                                    } catch (Exception ex) {
                                        //subtotal = "0";
                                    }

                                   // String strSbtotal = "Subtotal/حاصل الجمع" + " ";
                                    strString=Globals.myRequiredString("Subtotal/حاصل الجمع",strLength);
                                    woyouService.printTextWithFont(strString + subtotal + " \n", "", 28, callback);
                                   // woyouService.printTextWithFont(subtotal + " \n", "", 24, callback);
                                    woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
//
                                    if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                                        strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax \n" +
                                                "inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code\n" +
                                                "where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";
                                        cursor1 = database.rawQuery(strTableQry, null);

                                        while (cursor1.moveToNext()) {
                                            tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);
//                                  woyouService.printColumnsText(new String[]{tax_master.get_tax_name(), Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check)}, new int[]{20, 10}, new int[]{0, 0}, callback);
                                            strString=Globals.myRequiredString(tax_master.get_tax_name(),strLength);
                                            woyouService.printTextWithFont(strString + Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + " \n", "", 28, callback);
                                           // woyouService.printTextWithFont(Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check) + " \n", "", 24, callback);
//                                    woyouService.printTextWithFont( + ":" +  + " \n", "", 24, callback);
                                        }
                                        woyouService.printTextWithFont("------------------------------------------------\n", "", 24, callback);
                                    }

                                    String discount = "0";
                                    if (Double.parseDouble(orders.get_total_discount()) == 0) {
                                    } else {
                                        discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                                        if (Globals.strIsDiscountPrint.equals("true")) {
                                            String strdiscnt = "Discount/خصم";
                                            strString=Globals.myRequiredString(strdiscnt,strLength);
                                            woyouService.printTextWithFont(strString +Globals.DiscountPer + "%" + " \n", "", 28, callback);
                                           // woyouService.printTextWithFont(Globals.DiscountPer + "%" + " \n", "", 24, callback);

                                            strdiscnt = "Discount/خصم";
                                            strString=Globals.myRequiredString(strdiscnt,strLength);
                                            woyouService.printTextWithFont(strString + discount + " \n", "", 28, callback);
                                          //  woyouService.printTextWithFont(discount + " \n", "", 24, callback);
                                            //woyouService.printColumnsText(new String[]{"Discount", ":", discount}, new int[]{14, 1, 20}, new int[]{0, 0, 0}, callback);
                                        }
                                    }
                                    String ttl_aftr_dis = (Double.parseDouble(subtotal) + itemFinalTax) + "";
                                    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
//
//                            String discount;
//                            discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
//                            String strdiscnt = "Discount/خصم" + "  ";
//                            woyouService.printTextWithFont(strdiscnt + " \n", "", 24, callback);
//                            woyouService.printTextWithFont(discount + " \n", "", 24, callback);
//
                                    //woyouService.printTextWithFont("--------------------------------------------\n", "", 26, callback);
//
//
//                            String ttl_aftr_dis = "";
//                            try {
//                                ttl_aftr_dis = (Double.parseDouble(subtotal) - Double.parseDouble(discount)) + "";
//                            } catch (Exception ex) {
//
//                            }
//                            String tatalAftrDis = "";
//                            try {
//                                tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);
//                            } catch (Exception ex) {
//
//                            }


                                    String strAftrDis = "Total/مجموع";
                                    strString=Globals.myRequiredString(strAftrDis,strLength);
                                    woyouService.printTextWithFont(strString + tatalAftrDis + " \n", "", 28, callback);
                                   // woyouService.printTextWithFont(tatalAftrDis + " \n", "", 24, callback);
//
//
                                    String total_tax = "0";
////
                                    total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
////
                                    if (Double.parseDouble(total_tax) > 0d) {
                                        String strTotal_tax = "Tax/ضريبة";
                                        strString=Globals.myRequiredString(strTotal_tax,strLength);
                                        woyouService.printTextWithFont(strString +total_tax + " \n", "", 28, callback);
                                       // woyouService.printTextWithFont(total_tax + " \n", "", 24, callback);

                                        woyouService.printTextWithFont("--------------------------------------------\n", "", 24, callback);

                                        Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                                        String name = "", value = "";
                                        if (cursor.moveToFirst()) {
                                            do {
                                                name = cursor.getString(0);
                                                value = cursor.getString(1);
                                                //woyouService.printColumnsText(new String[]{name,":", Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check)}, new int[]{20, 2, 10}, new int[]{0, 0, 0}, callback);
                                                //woyouService.printTextWithFont(name + "        " + Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + " \n", "", 24, callback);
                                                strString=Globals.myRequiredString(name,strLength);
                                                woyouService.printTextWithFont(strString +Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + " \n", "", 28, callback);
                                              //  woyouService.printTextWithFont(Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check) + " \n", "", 24, callback);
                                            } while (cursor.moveToNext());
                                        }
                                    }

                                    woyouService.printTextWithFont("--------------------------------------------\n", "", 24, callback);
                                }
                                String net_amount;

                                net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);
                                String strNet_amount = "Net Amount/كمية الشبكة";
                                strString=Globals.myRequiredString(strNet_amount,strLength);
                                woyouService.printTextWithFont(strString +net_amount + " \n", "", 28, callback);
                                //woyouService.printTextWithFont(net_amount + " \n", "", 24, callback);
                                String tender;

                                tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);
                                String strTender = "Tender/مناقصة" ;
                                strString=Globals.myRequiredString(strTender,strLength);
                                woyouService.printTextWithFont(strString + tender + " \n", "", 28, callback);
                               // woyouService.printTextWithFont(tender + " \n", "", 24, callback);
                                String change_amount;
                                change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);
                                String strChange_amount = "Change/يتغيرون";
                                strString=Globals.myRequiredString(strChange_amount,strLength);
                                woyouService.printTextWithFont(strString + change_amount + " \n", "", 28, callback);
                               // woyouService.printTextWithFont(change_amount + " \n", "", 24, callback);

                                woyouService.printTextWithFont("--------------------------------------------\n", "", 24, callback);
                                ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                                if (order_payment_array.size() > 0) {
                                    for (int i = 0; i < order_payment_array.size(); i++) {
                                        Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                        String name = "";
                                        if (payment != null) {
                                            name = payment.get_payment_name();
                                            if(payment.get_payment_name().equals("CUSTOMER ACCOUNT")){
                                                strString = Globals.myRequiredString("Customer ACC." , strLength);
                                            }
                                            else {
                                                strString = Globals.myRequiredString(name, strLength);
                                            }                                            woyouService.printTextWithFont("\n"+strString + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) , "", 28, callback);
                                           // woyouService.printTextWithFont(Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check) + " \n", "", 24, callback);
//                                        woyouService.printColumnsText(new String[]{name, ":", Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check)}, new int[]{16, 1, 20}, new int[]{0, 0, 0}, callback);
                                        }
                                    }
                                    woyouService.printTextWithFont("\n------------------------------------------------\n", "", 24, callback);
                                }
                                woyouService.setAlignment(1, callback);
                                woyouService.printTextWithFont(" \n", "", 28, callback);
                                if (!Globals.objsettings.get_Footer_Text().equals("")) {
                                    woyouService.printTextWithFont(Globals.objsettings.get_Footer_Text(), "", 28, callback);
                                    woyouService.printTextWithFont("\n", "", 28, callback);
                                }

                                woyouService.printTextWithFont("" + Globals.objsettings.get_Copy_Right() + "\n", "", 28, callback);
                                woyouService.printTextWithFont(" \n", "", 28, callback);
                                woyouService.printTextWithFont(" \n", "", 28, callback);
                                woyouService.printTextWithFont(" \n", "", 28, callback);

                                //woyouService.printColumnsText(new String[]{orders.get_total_item(),":","Tender/مناقصة"}, new int[]{14, 1, 20}, new int[]{0, 0, 0}, callback);
                            }
                            woyouService.cutPaper(callback);
                            if(Globals.objsettings.getIs_selfpos_KOT().equals("true")){
                                if(!pos_flag.equals("1")) {
                                    PHAPOS_KOT(orders, order_detail);
                                }
                            }
                            else {
                                Globals.strContact_Code = "";
                                Globals.strResvContact_Code = "";
                                Globals.DiscountPer = 0;
                                Globals.strOldCrAmt = "0";
                                Globals.table_name = "";
                                Globals.strZoneName = "";
                                Globals.strorderType = "";
                                Globals.setEmpty();
                            }
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                });
            }

    }


    private ArrayList<String> getlist(Orders orders, ArrayList<Order_Detail> order_detail) {
        ArrayList<String> mylist = new ArrayList<String>();
        String strString = "";
        int strLength = 14;
        String lbl;
        String tt = "", tt1 = "";
        if (Globals.objLPR.getShort_companyname().equals("") || Globals.objLPR.getShort_companyname().equals("null") || Globals.objLPR.getShort_companyname().length() == 0 || Globals.objLPR.getShort_companyname().isEmpty()) {
            lbl = LableCentre(Globals.objLPR.getCompany_Name());
            mylist.add("\n" + lbl);
        } else {
            lbl = LableCentre(Globals.objLPR.getShort_companyname());
            mylist.add("\n" + lbl);
        }
        if (Globals.objsettings.get_Print_Memo().equals("0")) {
            if (Globals.objLPR.getAddress().equals("") || Globals.objLPR.getAddress().equals("null") || Globals.objLPR.getAddress().length() == 0 || Globals.objLPR.getAddress().isEmpty()) {

            } else {
                lbl = LableCentre(Globals.objLPR.getAddress());
                mylist.add("\n" + lbl);
            }
            if (Globals.objLPR.getMobile_No().equals("") || Globals.objLPR.getMobile_No().equals("null") || Globals.objLPR.getMobile_No().length() == 0 || Globals.objLPR.getMobile_No().isEmpty()) {

            } else {
                lbl = LableCentre(Globals.objLPR.getMobile_No());
                mylist.add("\n" + lbl);
            }

            try {
                if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("")) {

                } else {
                    lbl = LableCentre(Globals.objLPR.getService_code_tariff());
                    mylist.add("\n" + lbl);
//                    mylist.add("\n" + "Tariff Code");
                }
            } catch (Exception ex) {

            }
            if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("")) {
            } else {
                mylist.add("\n" + Globals.GSTNo + ":" + Globals.objLPR.getLicense_No());
            }
            mylist.add("\n------------------------------------------------");
            lbl = LableCentre(Globals.PrintOrder);
            mylist.add("\n" + lbl);
            mylist.add("\n------------------------------------------------");
        }
        strString = Globals.myRequiredString(Globals.PrintInvNo , strLength);
        mylist.add("\n"+strString + "        :" + orders.get_order_code());
        strString = Globals.myRequiredString(Globals.PrintInvDate , strLength);

        mylist.add("\n"+strString+ "        :" + orders.get_order_date().substring(0,10));

            strString = Globals.myRequiredString("Invoice Time", strLength);

            mylist.add("\n" + strString + "        :" + orders.get_order_date().substring(11, 19));
        if (Globals.objsettings.get_Print_Memo().equals("0")) {
            strString = Globals.myRequiredString(Globals.PrintDeviceID, strLength);

            mylist.add("\n" + strString + "        :" + Globals.objLPD.getDevice_Name());

            user = User.getUser(getApplicationContext(), " Where user_code='" + Globals.user + "'", database);
            strString = Globals.myRequiredString(Globals.PrintCashier, strLength);

            mylist.add("\n" + strString + "        :" + user.get_name());

            if (Globals.ModeResrv.equals("Resv")) {
                Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                strString = Globals.myRequiredString("Customer", strLength);

                mylist.add("\n" + strString + "        :" + contact.get_name());
                if (contact.get_gstin().length() > 0) {
                    strString = Globals.myRequiredString("Customer GST No.", strLength);

                    mylist.add("\n" + strString + "        :" + contact.get_gstin());
                }
                Globals.strContact_Name = contact.get_name();
            } else {
                if (orders.get_contact_code().equals("")) {
                    Globals.strContact_Name = "";
                } else {
                    try {
                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                        strString = Globals.myRequiredString("Customer", strLength);

                        mylist.add("\n" + strString + "        :" + contact.get_name());
                        if (contact.get_gstin().length() > 0) {

                            strString = Globals.myRequiredString("Customer GST No.", strLength);

                            mylist.add("\n" + strString + "        :" + contact.get_gstin());
                        }
                        Globals.strContact_Name = contact.get_name();
                    } catch (Exception ex) {

                    }

                }
            }
        }

        if(Globals.strorderType.equals("")){
            Table table = Table.getTable(getApplicationContext(), database, db, " WHERE table_code='" + orders.get_table_code() + "'");
if(table!=null) {

    Globals.table_code = table.get_table_code();
    Globals.table_name = table.get_table_name();
    Globals.strZoneName = table.getZone_name();
}
            if(orders.get_order_type_id().equals("5")) {

                Globals.strorderType = "Dine-In";
                strString = Globals.myRequiredString("Order Type", strLength);
                mylist.add("\n"+strString + " : " + Globals.strorderType + "\n");
            }
        }
        else {
            strString = Globals.myRequiredString("Order Type", strLength);
            mylist.add("\n" + strString + "        :" + Globals.strorderType + "\n");
        }
        if(Globals.objLPR.getproject_id().equals("cloud")) {
            if( Globals.strorderType.equals("Dine-In")) {
                strString = Globals.myRequiredString("Table No", strLength);
                mylist.add(strString + "        :" +  Globals.table_name + "\n");
                strString = Globals.myRequiredString("Zone", strLength);
               mylist.add(strString + "        :" + Globals.strZoneName + "\n");
            }
        }
        mylist.add("\n------------------------------------------------\n");
        mylist.add("Item Name\n");
        mylist.add("Qty             Price           Total\n");
        mylist.add("------------------------------------------------\n");
        Double itemFinalTax = 0d;
        Double dDisAfterSalePrice = 0d;
        int count = 0;   String linetotal="0";

        while (count < order_detail.size()) {

            String strItemCode = order_detail.get(count).get_item_code();
            item = Item.getItem(getApplicationContext(),"where item_code ='"+ strItemCode+"'",database,db);

//                        String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_code  = '"
//                                + strItemCode + "'  GROUP By order_detail.item_Code");

            String strItemName = Order_Detail.getItemName(getApplicationContext(), " WHERE order_detail.item_Code  = '"
                    + strItemCode + "'  GROUP By order_detail.item_Code");




            String sale_price;

//                                dDisAfterSalePrice = (((Double.parseDouble(order_detail.get(count).get_line_total()) / Double.parseDouble(order_detail.get(count).get_quantity()))) - Double.parseDouble(order_detail.get(count).get_tax()));
//                                sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfterSalePrice + ""), decimal_check);

            Double dDisAfter = 0d;

         /*   if(item.get_is_inclusive_tax().equals("1")) {

              double saleprice=Double.parseDouble(order_detail.get(count).get_sale_price()) - Double.parseDouble(order_detail.get(count).get_tax());
                dDisAfterSalePrice = (saleprice) / Double.parseDouble(order_detail.get(count).get_quantity()) - Double.parseDouble(order_detail.get(count).get_tax());
            }

            else{*/
                dDisAfterSalePrice = (Double.parseDouble(order_detail.get(count).get_line_total())) / Double.parseDouble(order_detail.get(count).get_quantity()) - Double.parseDouble(order_detail.get(count).get_tax());


            //}

            dDisAfter = (Double.parseDouble(order_detail.get(count).get_sale_price()));
            sale_price = Globals.myNumberFormat2Price(Double.parseDouble(dDisAfter + ""), decimal_check);
            String line_total;
            line_total = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_line_total()), decimal_check);



            item=Item.getItem(getApplicationContext(),"WHERE item_code='"+ strItemCode +"' ",database,db);
            if(item!=null) {
              String ismodifier= item.getIs_modifier();
              if(ismodifier.equals("1")) {
                  mylist.add("" + strItemName + "  (M)" + "\n");
              }
              else{
                  mylist.add("" + strItemName +  "\n");
              }
          }
            String strItemQty,strItemPrice,strItemTotal;
            //strString = Globals.myRequiredString(Globals.PrintInvNo, strLength);
            strLength = 15;
            strItemQty = Globals.myRequiredString(Globals.myNumberFormat2QtyDecimal(Double.parseDouble(order_detail.get(count).get_quantity()), qty_decimal_check), strLength);

            strItemPrice = Globals.myRequiredString(sale_price, 17);
            strItemTotal = Globals.myRequiredString(line_total, 15);

            mylist.add(strItemQty
                    + strItemPrice + strItemTotal+"\n");




            if (Globals.objsettings.get_Print_Memo().equals("0")) {

                String strHSNLbl = "", HSNValue = "", strLBlDis = "";
                if (Globals.objsettings.get_HSN_print().equals("true"))
                {
                    item = Item.getItem(getApplicationContext(), "WHERE item_code = '" + order_detail.get(count).get_item_code() + "'", database, db);
                    HSNValue = item.get_hsn_sac_code();
                    strHSNLbl = "HSN Code :";

                }


                String discnt = "";

                if (Double.parseDouble(orders.get_total_discount()) == 0) {
                    strLBlDis = "";
                } else {
                    if (Globals.strIsDiscountPrint.equals("true")) {
                        if(item.get_is_inclusive_tax().equals("1")) {
                            double saleprice= Double.parseDouble(order_detail.get(count).get_sale_price()) - Double.parseDouble(order_detail.get(count).get_tax());
                            Double dis = saleprice - dDisAfterSalePrice;
                            discnt = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_discount()), decimal_check);
                            strLBlDis = "Discount";
                        }
                        else{
                            Double dis = Double.parseDouble(order_detail.get(count).get_sale_price()) - dDisAfterSalePrice;
                            discnt = Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get(count).get_discount()), decimal_check);
                            strLBlDis = "Discount";
                        }

                    } else {
                        strLBlDis = "";
                    }

                }
                if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("false")) {

                } else if (Globals.strIsDiscountPrint.equals("false") && Globals.objsettings.get_HSN_print().equals("true")) {
                    if(HSNValue!="") {
                        strString = Globals.myRequiredString(strHSNLbl, strLength);
                        mylist.add(strString + "         " + HSNValue + "\n");
                    }

                } else if (Globals.strIsDiscountPrint.equals("true") && Globals.objsettings.get_HSN_print().equals("false")) {
                    String strdiscount;
                    strLength = 23;
                    if(discnt!="") {
                        strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                        mylist.add(strdiscount + discnt + "\n");
                    }
                } else {
                    // HSN Code : A34455  Discount :
                    if(HSNValue!="" || discnt!="") {
                        strString = Globals.myRequiredString(strHSNLbl, strLength);
                        String strdiscount;
                        strdiscount = Globals.myRequiredString(strLBlDis, strLength);
                        mylist.add(strString + " " + HSNValue + "  " + strdiscount + ":" + discnt + "\n");
                    }
                }


                if (Globals.objsettings.get_ItemTax().equals("1") || Globals.objsettings.get_ItemTax().equals("3")) {
                  //  if(item.get_is_inclusive_tax().equals("0")) {
                        Tax_Master tax_master = null;
                        try {
                            ArrayList<Order_Detail_Tax> order_detail_tax = Order_Detail_Tax.getAllOrder_Detail_Tax(getApplicationContext(), "WHERE item_code='" + order_detail.get(count).get_item_code() + "' And order_code = '" + order_detail.get(count).get_order_code() + "'", database);
                            for (int i = 0; i < order_detail_tax.size(); i++) {
                                tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + order_detail_tax.get(i).get_tax_id() + "'", database, db);
                                //
                                //strLength = 14;

                                String strTaxName = tax_master.get_tax_name();
                                String tax_rate;
//                        tax_rate = Globals.myNumberFormat2Price(Double.parseDouble(order_detail_tax.get(i).get_tax_value()), decimal_check);
                                double valueFinal = Double.parseDouble(order_detail_tax.get(i).get_tax_value()) * (Double.parseDouble(order_detail.get(count).get_quantity()));

                                tax_rate = Globals.myNumberFormat2Price(valueFinal, decimal_check) + "";
                                itemFinalTax += valueFinal;
                                strLength = 23;
                                strString = Globals.myRequiredString(strTaxName, strLength);

                                mylist.add(strString + tax_rate + "\n");

                            }
                        } catch (Exception e) {
                            System.out.println(e.getMessage());
                        }
                    }
              //  }
            }
    linetotal=order_detail.get(count).get_line_total();
            count++;





        }
           // count++;
       // }

        mylist.add("------------------------------------------------");
        if (Globals.objsettings.get_Print_Memo().equals("0")) {
            strLength = 14;
            strString = Globals.myRequiredString("Total Item", strLength);

            mylist.add("\n" + strString + "        :" + orders.get_total_item());
            strString = Globals.myRequiredString("Item Quantity ", strLength);

            mylist.add("\n" + strString + "        :" + Globals.myNumberFormat2QtyDecimal(Double.parseDouble(orders.get_total_quantity()), qty_decimal_check));
            String discount = "0";

            String strLine1="" ;
            String strLine2="" ;
            if (Double.parseDouble(orders.get_total_discount()) == 0) {
            } else {
                double disct=0d;
                if (Globals.strIsDenominationPrint.equals("true")) {
                    disct = Globals.Denomination(Double.parseDouble(orders.get_total_discount() + ""), scale, decimal_check);
                }
                else{
                    disct=Double.parseDouble(orders.get_total_discount() + "");
                }
                discount=String.valueOf(disct);
                if (Globals.strIsDiscountPrint.equals("true")) {
                    //   woyouService.printColumnsText(new String[]{"Discount", ":", Globals.DiscountPer + "%"}, new int[]{14, 1, 20}, new int[]{0, 0, 0}, callback);
                    strString = Globals.myRequiredString("Discount", strLength);


                    strLine2=strString + "        :" + Globals.myNumberFormat2Price(Double.parseDouble(discount),decimal_check);

                    // woyouService.printTextWithFont(strString + ":" + discount + "\n", "", 28, callback);
                }
            }

            String subtotal = "0";
            String strTableQry = "Select SUM(order_detail.line_total) From order_detail where order_detail.order_code ='" + strOrderNo + "' ";
            Cursor cursor1 = database.rawQuery(strTableQry, null);
            Tax_Master tax_master = null;
            while (cursor1.moveToNext()) {
                subtotal = cursor1.getString(0);

            }
try {
    //if (orders.get_total_discount().length() > 0) {
        subtotal = Globals.myNumberFormat2Price((Double.parseDouble(subtotal)), decimal_check);
   // }
}
catch(Exception e){

}


            if (Double.parseDouble(orders.get_total_discount()) == 0) {
            } else {
                double disct=0d;
                if (Globals.strIsDenominationPrint.equals("true")) {
                    disct = Globals.Denomination(Double.parseDouble(orders.get_total_discount() + ""), scale, decimal_check);
                }
                else{
                   disct=Double.parseDouble(orders.get_total_discount() + "");
                }
                discount=String.valueOf(disct);
                if (Globals.strIsDiscountPrint.equals("true")) {

                    strLine1 = Globals.myNumberFormat2Price((Double.parseDouble(linetotal)), decimal_check);

                    strString = Globals.myRequiredString("Line Total", strLength);

                    mylist.add("\n"+strString + "        :" + strLine1 + "\n");

                    mylist.add(strLine2 + "\n");
                }
            }

            strString = Globals.myRequiredString("Subtotal ", strLength);

            mylist.add("\n" + strString + "        :" + subtotal);



            mylist.add("\n------------------------------------------------");
            if (Globals.objsettings.get_ItemTax().equals("2") || Globals.objsettings.get_ItemTax().equals("3")) {

                strTableQry = "select order_detail_tax.tax_id,SUM(order_detail_tax.tax_value * order_detail.quantity) As Amt from order_detail_tax " +
                        " inner join order_detail on order_detail.order_code = order_detail_tax.order_code and  order_detail.item_code = order_detail_tax.item_code " +
                        " where order_detail.order_code ='" + strOrderNo + "' group by  order_detail_tax.tax_id";

                cursor1 = database.rawQuery(strTableQry, null);

                if (cursor1.moveToFirst()) {
                    do {
                        tax_master = Tax_Master.getTax_Master(getApplicationContext(), "WHERE tax_id='" + cursor1.getString(0) + "'", database, db);


                        String tax_value;
                        tax_value = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(1)), decimal_check);


                        strString = Globals.myRequiredString(tax_master.get_tax_name(), strLength);
                        //String strtaxvalue;
                        // strtaxvalue= Globals.myRequiredString(tax_master.get_tax_name(), strLength);
                        mylist.add("\n" + strString + "        :" + tax_value);
                    } while (cursor1.moveToNext());

                    mylist.add("\n------------------------------------------------");

                    tt = "\n";

                    cursor1.close();

                }

            }


  /*          String discount = "0";
            if (Double.parseDouble(orders.get_total_discount()) == 0) {

            } else {
                discount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_discount()), decimal_check);
                if (Globals.strIsDiscountPrint.equals("true")) {
                    tt = "";
                   *//* ln = 0;
                    ln = discount.length();
                    space = 9 - ln;
                    for (int v = 0; v < space; v++) {
                        tt = tt + " ";
                    }
                    tt = tt + discount;*//*
                    strString = Globals.myRequiredString("Discount", strLength);

                    //   mylist.add("\n"+strString +"        :"+ Globals.DiscountPer + "%");
                    mylist.add("\n" + strString + "        :" + discount);
                }
            }*/
try {
    String ttl_aftr_dis = (Double.parseDouble(subtotal)) + "";
    String tatalAftrDis = Globals.myNumberFormat2Price(Double.parseDouble(ttl_aftr_dis), decimal_check);


    strString = Globals.myRequiredString("Total", strLength);

    mylist.add("\n" + strString + "        :" + tatalAftrDis);
}catch(Exception e){}
            String total_tax;

            total_tax = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total_tax()), decimal_check);
            if (Double.parseDouble(total_tax) > 0d) {


                strString = Globals.myRequiredString("Order Tax", strLength);

                mylist.add("\n" + strString + "        :" + total_tax);


                mylist.add("\n------------------------------------------------");


                Cursor cursor = Order_Tax.getOrderTaxValue(getApplicationContext(), " Where order_tax.order_code = '" + strOrderNo + "'");
                String name = "", value = "";
                if (cursor.moveToFirst()) {
                    do {
                        name = cursor.getString(0);
                        value = cursor.getString(1);

                        String tax_value;
                        tax_value = Globals.myNumberFormat2Price(Double.parseDouble(value), decimal_check);

                        tt1 = "";
                       /* ln = 0;
                        ln = name.length();
                        space = 4 - ln;
                        for (int v = 0; v < space; v++) {
                            tt1 = tt1 + " ";
                        }
                        tt1 = tt1 + name;

                        tt = "";
                        ln = 0;
                        ln = tax_value.length();
                        space = 7 - ln;
                        for (int v = 0; v < space; v++) {
                            tt = tt + " ";
                        }*/
                        tt = tt + tax_value;
                        strString = Globals.myRequiredString(name, strLength);

                        mylist.add("\n" + strString + "        :" + tax_value);
                    } while (cursor.moveToNext());
                }

            }

            mylist.add("\n------------------------------------------------");
        }
        String net_amount;

        net_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check);

        String strCurrency;
        if (Globals.objLPD.getCurreny_Symbol().equals("")) {
            strCurrency = "";
        } else {
            strCurrency = "(" + Globals.objLPD.getCurreny_Symbol() + ")";
        }
        strString = Globals.myRequiredString("Net Amount", strLength);

        mylist.add("\n"+strString+ "        :"+ net_amount + strCurrency);

        String tender;

        tender = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_tender()), decimal_check);

        strString = Globals.myRequiredString("Tender", strLength);

        mylist.add("\n"+strString+ "        :"+ tender);


        String change_amount;

        change_amount = Globals.myNumberFormat2Price(Double.parseDouble(orders.get_change_amount()), decimal_check);



        strString = Globals.myRequiredString("Change", strLength);

        mylist.add("\n"+strString+ "        :"+ change_amount);
        mylist.add("\n------------------------------------------------");

                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                    if (order_payment_array.size() > 0) {
                        for (int i = 0; i < order_payment_array.size(); i++) {
                            Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                            String name = "";
                            if (payment != null) {
                                name = payment.get_payment_name();
                                if(payment.get_payment_name().equals("CUSTOMER ACCOUNT")){
                                    strString = Globals.myRequiredString("Customer ACC." , strLength);
                                }
                                else {
                                    strString = Globals.myRequiredString(name, strLength);
                                }
                                mylist.add("\n" + strString+ "        :"+ Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check));
                            }
                        }
                        mylist.add("\n-----------------------------------------------");
                    }



//                    ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
//                    if (order_payment_array.size() > 0) {
//                        for (int i = 0; i < order_payment_array.size(); i++) {
//                            Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
//                            String name = "";
//                            if (payment != null) {
//                                name = payment.get_payment_name();
//                                mylist.add("\n" + name + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment_array.get(i).get_pay_amount()), decimal_check));
//                            }
//                        }
//                        mylist.add("\n-----------------------------------------------");
//                    }
//                    if (settings.get_Is_Accounts().equals("true")) {
//                        if (ck_project_type.equals("standalone")) {
//                            JSONObject jsonObject = new JSONObject();
//                            if (Globals.strContact_Code.equals("")) {
//                                mylist.add("\n**");
//                            } else {
//                                Double showAmount = 0d;
//                                try {
//                                    String strCreditAmt = "", strDeditAmount = "";
//                                    Double creditAmount = 0d,
//                                            debitAmount = 0d;
//                                    Cursor cursor = null;
//
//                                    String strQry1 = "Select SUM(paid_amount - cr_amount) FROM Acc_Customer_Credit where contact_code ='" + Globals.strContact_Code + "'";
//                                    cursor = database.rawQuery(strQry1, null);
//                                    while (cursor.moveToNext()) {
//                                        strCreditAmt = cursor.getString(0);
//
//                                    }
//                                    creditAmount = Double.parseDouble(strCreditAmt);
//
//                                    String strQry2 = "Select SUM(amount) from acc_customer_dedit Where order_code IN (Select Order_code from orders where contact_code ='" + Globals.strContact_Code + "')";
//                                    cursor = database.rawQuery(strQry2, null);
//                                    while (cursor.moveToNext()) {
//                                        strDeditAmount = cursor.getString(0);
//                                    }
//                                    debitAmount = Double.parseDouble(strDeditAmount);
//                                    showAmount = debitAmount + creditAmount;
//                                } catch (Exception ex) {
//                                }
//
//                                double abs1 = Math.abs(showAmount);
//                                if (showAmount > 0) {
//                                    mylist.add("\nOld Amount      :  " + Globals.myNumberFormat2Price(abs1, decimal_check) + " DR");
//                                } else {
//                                    mylist.add("\nOld Amount      :  " + Globals.myNumberFormat2Price(abs1, decimal_check) + " CR");
//                                }
//                                try {
//                                    jsonObject.put("Old Amt", abs1 + "");
//                                } catch (Exception ex) {
//
//                                }
//                                String strCur = "";
//                                tt = "";
//                                ln = 0;
//                                ln = change_amount.length();
//                                space = 9 - ln;
//                                for (int v = 0; v < space; v++) {
//                                    tt = tt + " ";
//                                }
//                                tt = tt + change_amount;
//
//                                try {
//                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
//                                    cursor1 = database.rawQuery(strTableQry, null);
//                                    if (cursor1.moveToFirst()) {
//                                        do {
//                                            strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
//                                            mylist.add("\nCurrent Amount      :  " + strCur);
//                                        } while (cursor1.moveToNext());
//                                    }
//                                } catch (Exception ex) {
//                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
//                                    mylist.add("\nCurrent Amount      :  " + strCur);
//                                }
//
//                                if (strCur.equals("")) {
//                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
//                                    mylist.add("\nCurrent Amount      :  " + strCur);
//                                }
//
//                                try {
//                                    jsonObject.put("Current Amt", strCur + "");
//                                } catch (Exception ex) {
//
//                                }
//
//                                Double strBalance = abs1 - Double.parseDouble(strCur);
//                                try {
//                                    jsonObject.put("Balance Amt", strBalance + "");
//                                } catch (Exception ex) {
//
//                                }
//                                tt = "";
//                                ln = 0;
//                                ln = change_amount.length();
//                                space = 9 - ln;
//                                for (int v = 0; v < space; v++) {
//                                    tt = tt + " ";
//                                }
//                                tt = tt + change_amount;
//
//                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
//                                db.executeDML(strUpdatePayment, database);
//
//                                mylist.add("\nBalance Amount      :  " + Globals.myNumberFormat2Price(strBalance, decimal_check));
//                            }
//                        } else {
//                            JSONObject jsonObject = new JSONObject();
//                            if (Globals.strContact_Code.equals("")) {
//                                mylist.add("\n**");
//                            } else {
//                                double abs2 = 0d;
//                                String curAmount = "";
//                                strTableQry = "Select sum(pay_amount) from order_payment left join orders on orders.order_code = order_payment.order_code where orders.order_code In(select orders.order_code from orders where orders.contact_code = '" + Globals.strContact_Code + "' and orders.z_code='0' and orders.order_code !='" + strOrderNo + "') and order_payment.payment_id='5'";
//                                try {
//                                    cursor1 = database.rawQuery(strTableQry, null);
//                                    if (cursor1.moveToFirst()) {
//                                        do {
//                                            curAmount = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
//
//                                        } while (cursor1.moveToNext());
//                                    }
//                                } catch (Exception ex) {
//                                    curAmount = "0";
//                                }
//
//                                double ab1 = Double.parseDouble(Globals.strOldCrAmt) + Double.parseDouble(curAmount);
//                                double abs1 = Math.abs(ab1);
//                                if (ab1 > 0) {
//                                    mylist.add("\nOld Amount      :  " + Globals.myNumberFormat2Price(abs1, decimal_check) + " CR");
//                                } else {
//                                    mylist.add("\nOld Amount      :  " + Globals.myNumberFormat2Price(abs1, decimal_check) + " DR");
//                                }
//                                try {
//                                    jsonObject.put("Old Amt", abs1 + "");
//                                } catch (Exception ex) {
//
//                                }
//
//                                String strCur = "";
//                                tt = "";
//                                ln = 0;
//                                ln = change_amount.length();
//                                space = 9 - ln;
//                                for (int v = 0; v < space; v++) {
//                                    tt = tt + " ";
//                                }
//                                tt = tt + change_amount;
//
//                                try {
//                                    strTableQry = "Select pay_amount from order_payment where order_code = '" + strOrderNo + "' and payment_id='5'";
//                                    cursor1 = database.rawQuery(strTableQry, null);
//                                    if (cursor1.moveToFirst()) {
//                                        do {
//                                            strCur = Globals.myNumberFormat2Price(Double.parseDouble(cursor1.getString(0)), decimal_check);
//                                            mylist.add("\nCurrent Amount      :  " + strCur);
//                                        } while (cursor1.moveToNext());
//                                    }
//                                } catch (Exception ex) {
//                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
//                                    mylist.add("\nCurrent Amount      :  " + strCur);
//                                }
//
//                                if (strCur.equals("")) {
//                                    strCur = Globals.myNumberFormat2Price(0, decimal_check);
//                                    mylist.add("\nCurrent Amount      :  " + strCur);
//                                }
//                                try {
//                                    jsonObject.put("Current Amt", strCur + "");
//                                } catch (Exception ex) {
//
//                                }
//                                Double strBalance = abs1 + abs2 + Double.parseDouble(strCur);
//                                try {
//                                    jsonObject.put("Balance Amt", strBalance + "");
//                                } catch (Exception ex) {
//
//                                }
////                        String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
////                        db.executeDML(strUpdatePayment, database);
//                                tt = "";
//                                ln = 0;
//                                ln = change_amount.length();
//                                space = 9 - ln;
//                                for (int v = 0; v < space; v++) {
//                                    tt = tt + " ";
//                                }
//                                tt = tt + change_amount;
//
//                                String strUpdatePayment = " Update order_payment set field2 = '" + jsonObject.toString() + "' where order_payment_id = '" + order_payment_array.get(0).get_order_payment_id() + "'";
//                                db.executeDML(strUpdatePayment, database);
//
//                                mylist.add("\nBalance Amount      :  " + Globals.myNumberFormat2Price(strBalance, decimal_check));
//                            }
//                        }
//                    }

        if (!Globals.objsettings.get_Footer_Text().equals("")) {
            mylist.add("\n    " + Globals.objsettings.get_Footer_Text());
        }
        mylist.add("\n            " + Globals.objsettings.get_Copy_Right());
        mylist.add("\n");
        mylist.add("\n");



        return mylist;
    }

    private void DisplayError(int nError) {
        AlertDialog.Builder b = new AlertDialog.Builder(this);
        b.setTitle("Information");
        String strMsg = "Getting Request!";
        switch (nError) {
            case ZQ_USBERROR:
                // strMsg = "USB Error or printer is busy?";
                break;
            case ZQ_NOPRNPORT:
                // strMsg = "the port is not existed";
                break;
            case ZQ_NODSPPORT:
                // strMsg = "the port is not existed";
                break;
            case ZQ_NOCOMPORT:
                // strMsg = "the port is not existed";
                break;
            case ZQ_SENDERROR:
                // strMsg = "Send Data error";
                break;
            case ZQ_ERRPARAM:
                // strMsg = "Invalidate param";
                break;
            case ZQ_NOPERMISSION:
                strMsg = "Invalidate Permission";
                break;
            case ZQ_WRONGFILE:
                // strMsg = "Can not open the file";
                break;
            case ZQ_WRONGDATA:
                // strMsg = "Data format is wrong";
                break;
            case ZQ_READERROR:
                // strMsg = "Read data failed";
                break;
            case ZQ_CONTEXTNULL:
                // strMsg = "Contex is null";
                break;
            case ZQ_PORTISCLOSE:
                // strMsg = "The port is closed";
                break;
        }

        b.setPositiveButton("Enter", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                performOperation();
            }
        });

        b.setMessage(strMsg);
        b.show();
    }

    private void ppt8555_parking(Orders orders,  Order_Detail order_detail,Order_Payment order_payment) {


        if (Globals.objsettings.get_Print_Lang().equals("0")) {
          //  String Time = java.text.DateFormat.getTimeInstance().format(new Date());

            ThreadPoolManager.getInstance().executeTask(new Runnable() {
                @Override
                public void run() {
                    try {
                        String strString = "";
                        int strLength = 14;

                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                        if(Globals.objLPR.getShort_companyname().isEmpty()) {
                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getCompany_Name() + "\n", "ST", 24, 1, callbackPPT8555);

                        }
                        else{
                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getShort_companyname() + "\n", "ST", 24, 1, callbackPPT8555);
                        }

                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getAddress() + "\n", "ST", 24, 1, callbackPPT8555);

                            mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getMobile_No() + "\n", "ST", 24, 1, callbackPPT8555);
                        try {
                            if (Globals.objLPR.getService_code_tariff().equals("null") || Globals.objLPR.getService_code_tariff().equals("") || Globals.objLPR.getService_code_tariff().equals("0")) {
                            } else {
                                mIPosPrinterService.PrintSpecFormatText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, 1, callbackPPT8555);

                                // mIPosPrinterService.printSpecifiedTypeText("" + Globals.objLPR.getService_code_tariff() + "\n", "ST", 24, callbackPPT8555);
                            }
                        } catch (Exception ex) {
                        }
                        if (Globals.objLPR.getLicense_No().equals("null") || Globals.objLPR.getLicense_No().equals("") || Globals.objLPR.getLicense_No().equals("0")) {
                        } else {
                            mIPosPrinterService.printSpecifiedTypeText(Globals.GSTNo + ":" + Globals.objLPR.getLicense_No(), "ST", 24, callbackPPT8555);
                        }

                            mIPosPrinterService.PrintSpecFormatText("--------------------------------" + "\n", "ST", 24, 1, callbackPPT8555);


                        strString = Globals.myRequiredString("Slip No" , strLength);
                            mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + strOrderNo + "\n", "ST", 24, callbackPPT8555);
                            if(orders.get_table_code().length()>0) {
                                strString = Globals.myRequiredString("Vehicle No", strLength);
                                mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_table_code() + "\n", "ST", 24, callbackPPT8555);
                            }
                        Contact contact = Contact.getContact(getApplicationContext(), database, db, " WHERE contact_code='" + orders.get_contact_code() + "'");
                         if(contact.get_contact_1().length()>0) {
                             strString = Globals.myRequiredString("Mobile No", strLength);
                             mIPosPrinterService.printSpecifiedTypeText(strString + " : " + contact.get_contact_1() + "\n", "ST", 24, callbackPPT8555);
                         }
                         if(orders.getRFID()!=null){
                             strString = Globals.myRequiredString("NFC", strLength);
                             mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.getRFID() + "\n", "ST", 24, callbackPPT8555);
                         }
                        strString = Globals.myRequiredString("Vehicle Type", strLength);
                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_remarks() + "\n", "ST", 24, callbackPPT8555);
                            strString = Globals.myRequiredString("In Date" , strLength);
                        mIPosPrinterService.printSpecifiedTypeText(strString  + " : " + DateUtill.PaternDate1(orders.get_order_date()).substring(0,11).toString() + "\n", "ST", 24, callbackPPT8555);

                        if(strflagbtn.equals("VehicleIn")) {
    if (orders.get_order_status().equals("CLOSE")) {
        strString = Globals.myRequiredString("In Time", strLength);

        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_order_date().substring(11, 19).toString() + "\n", "ST", 24, callbackPPT8555);

        strString = Globals.myRequiredString("OUT Time", strLength);

        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_delivery_date().substring(11, 19) + "\n", "ST", 24, callbackPPT8555);

    } else {
        strString = Globals.myRequiredString("In Time", strLength);

        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_order_date().substring(11, 19) + "\n", "ST", 24, callbackPPT8555);
    }
    strString = Globals.myRequiredString("Adv. AMT", strLength);
    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_detail.get_discount()), decimal_check) + "\n", "ST", 24, callbackPPT8555);
}
else if(strflagbtn.equals("Checkout")){

    strString = Globals.myRequiredString("OUT Time", strLength);

    mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_delivery_date().substring(11, 19) + "\n", "ST", 24, callbackPPT8555);


}
                            strString = Globals.myRequiredString("Fare Amount", strLength);
                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " +Globals.myNumberFormat2Price(Double.parseDouble(orders.get_total()), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                        if(orders.get_order_status().equals("CLOSE")) {
                            strString = Globals.myRequiredString("Collected Amt.", strLength);
                            mIPosPrinterService.printSpecifiedTypeText(strString + " : " + Globals.myNumberFormat2Price(Double.parseDouble(order_payment.get_pay_amount()), decimal_check) + "\n", "ST", 24, callbackPPT8555);
                        }
                        ArrayList<Order_Payment> order_payment_array = Order_Payment.getAllOrder_Payment(getApplicationContext(), " where order_code='" + strOrderNo + "'");
                        if (order_payment_array.size() > 0) {
                            for (int i = 0; i < order_payment_array.size(); i++) {
                                Payment payment = Payment.getPayment(getApplicationContext(), " where payment_id = '" + order_payment_array.get(i).get_payment_id() + "'");
                                String name = "";
                                if (payment != null) {
                                    name = payment.get_payment_name();
                                    strString = Globals.myRequiredString("Payment Mode", strLength);
                                    mIPosPrinterService.printSpecifiedTypeText("\n"+strString + " : " + name, "ST", 24, callbackPPT8555);
                                }
                            }
                        }
                        strString = Globals.myRequiredString("Vehicle Status", strLength);
                        mIPosPrinterService.printSpecifiedTypeText(strString + " : " + orders.get_order_status() + "\n", "ST", 24, callbackPPT8555);
                        mIPosPrinterService.PrintSpecFormatText("--------------------------------" + "\n", "ST", 24, 1, callbackPPT8555);
                        mIPosPrinterService.PrintSpecFormatText("" + Globals.objsettings.get_Copy_Right() + "\n", "ST", 24, 1, callbackPPT8555);
                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                        mIPosPrinterService.printBlankLines(1, 1, callbackPPT8555);
                        //bitmapRecycle(bitmap);
                        mIPosPrinterService.printerPerformPrint(160, callbackPPT8555);
                        } catch (Exception e) {

                    }
                }
            });

        }
    }

    @Override
    public void onBackPressed() {
        Globals.strContact_Code = "";
        Globals.strResvContact_Code = "";
        Globals.DiscountPer = 0;
        Globals.strOldCrAmt = "0";
        Globals.strZoneName="";
        Globals.strorderType="";
        Globals.table_name="";
        Globals.setEmpty();

        if(Globals.objLPR.getIndustry_Type().equals("4")){
          //  Intent intent = new Intent(PrintLayout.this, ParkingIndustryActivity.class);
           // startActivity(intent);
            finish();
        }
       else if(Globals.objLPR.getIndustry_Type().equals("2")){
            Intent intent = new Intent(PrintLayout.this, Retail_IndustryActivity.class);
            startActivity(intent);
            finish();
        }
        else {
            if (Globals.objsettings.get_Home_Layout().equals("0")) {
                Intent intent = new Intent(PrintLayout.this, MainActivity.class);
                startActivity(intent);
                finish();
            } else {
                Intent intent = new Intent(PrintLayout.this, Main2Activity.class);
                startActivity(intent);
                finish();
            }
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
    }

    public Boolean CheckprinterConnection() {
        if (Globals.objsettings != null) {

            if (Globals.objsettings.getPrinterId().equals("2")) {
                String tmpStr = Globals.objsettings.getPrinterIp().trim();
                String ipAddress = "";
                String tmpPort = "";
                int port = 9100;
                String[] strings = Globals.StringSplit(tmpStr, ":");
                ipAddress = strings[0];
                tmpPort = strings[1];
                port = Integer.parseInt(tmpPort);
                if (!WifiPrintDriver.WIFISocket(ipAddress, port)) {
                    WifiPrintDriver.Close();
                    return false;
                } else {
                    if (WifiPrintDriver.IsNoConnection()) {
                        return false;
                    }
                    return true;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    private class LongOperation extends AsyncTask<String, Void, Boolean> {
        @Override
        protected Boolean doInBackground(String... params) {
            Boolean iswifi = CheckprinterConnection();
            return iswifi;
        }

        @Override
        protected void onPostExecute(Boolean result) {
            if (dialog.isShowing()) {
                dialog.dismiss();
            }
            if (result != null) {
                iswifi = result;
            }

        }

        @Override
        protected void onPreExecute() {
            dialog = new ProgressDialog(PrintLayout.this);
            dialog.setCancelable(false);
            dialog.show();
        }

    }


    private final Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case BluetoothService.MESSAGE_STATE_CHANGE:
                    switch (msg.arg1) {
                        case BluetoothService.STATE_CONNECTED:   //������
                            Toast.makeText(getApplicationContext(), "Connect successful",
                                    Toast.LENGTH_SHORT).show();
                            break;
                        case BluetoothService.STATE_CONNECTING:  //��������
                            Log.d("��������", "��������.....");
                            break;
                        case BluetoothService.STATE_LISTEN:     //�������ӵĵ���
                        case BluetoothService.STATE_NONE:
                            Log.d("��������", "�ȴ�����.....");
                            break;
                    }
                    break;
                case BluetoothService.MESSAGE_CONNECTION_LOST:    //�����ѶϿ�����
                    Toast.makeText(getApplicationContext(), "Device connection was lost",
                            Toast.LENGTH_SHORT).show();

                    break;
                case BluetoothService.MESSAGE_UNABLE_CONNECT:     //�޷������豸
                    Toast.makeText(getApplicationContext(), "Unable to connect device",
                            Toast.LENGTH_SHORT).show();
                    break;
            }
        }

    };


    //��ӡͼ��
    @SuppressLint("SdCardPath")
    private void printImagebluetooth() {
        byte[] sendData = null;
        PrintPic pg = new PrintPic();
        pg.initCanvas(576);
        pg.initPaint();
//        pg.drawImage(0, 0, "/mnt/sdcard/icon.jpg");
        //
        sendData = pg.printDraw();
        mService.write(sendData);   //��ӡbyte������
        Log.d("��������", "" + sendData.length);
    }

    //��ӡͼ��
    @SuppressLint("SdCardPath")
    private void printbluetoothBarcode(String strOrderNo) {
        byte[] sendData = null;
        sendData = BytesUtil.getPrintBarCode(strOrderNo, 8, 50, 80, 1);
        sendData = BytesUtil.getPrintBarCode(strOrderNo, 8, 50, 80, 1);
        mService.write(sendData);
    }


    //��ӡͼ��
    @SuppressLint("SdCardPath")
    private void printImage() {
        byte[] sendData = null;
        PrintPic pg = new PrintPic();
        pg.initCanvas(576);
        pg.initPaint();

        Bitmap bitmap = StringToBitMap(Globals.objsettings.get_Logo());
        bitmap = getResizedBitmap(bitmap, 80, 120);
        Uri selectedImageURI = getImageUri(getApplicationContext(), bitmap);
        String path = getRealPathFromURI(selectedImageURI);
        if (bitmap != null) {
            bitmap = getResizedBitmap(bitmap, 120, 120);
            //            path = MediaStore.Images.Media.insertImage(getContentResolver(), bitmap, "Title", null);
            //            Uri.parse(path);
            pg.drawImage(130, 0, path);
            sendData = pg.printDraw();
            mService.write(sendData);

        }
    }

    public Uri getImageUri(Context inContext, Bitmap inImage) {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
        String path = MediaStore.Images.Media.insertImage(inContext.getContentResolver(), inImage, "Title", null);
        return Uri.parse(path);
    }

    private String getRealPathFromURI(Uri contentURI) {
        String result;
        Cursor cursor = getContentResolver().query(contentURI, null, null, null, null);
        if (cursor == null) { // Source is Dropbox or other similar local file path
            result = contentURI.getPath();
        } else {
            cursor.moveToFirst();
            int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
            result = cursor.getString(idx);
            cursor.close();
        }
        return result;
    }


    public static String BitmapToString(Bitmap bitmap) {
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
            byte[] b = baos.toByteArray();
            String temp = Base64.encodeBytes(b, Base64.ENCODE);
            return temp;
        } catch (NullPointerException e) {
            return null;
        } catch (OutOfMemoryError e) {
            return null;
        }
    }


    private boolean isNetworkStatusAvialable(Context applicationContext) {
        // TODO Auto-generated method stub
        ConnectivityManager connectivityManager = (ConnectivityManager) getBaseContext().getSystemService(Context.CONNECTIVITY_SERVICE);
        if (connectivityManager != null) {
            NetworkInfo netInfos = connectivityManager.getActiveNetworkInfo();
            if (netInfos != null)
                if (netInfos.isConnected())
                    return true;
        }

        return false;
    }

    public Bitmap StringToBitMap(String encodedString) {
        try {
            byte[] encodeByte = Base64.decode(encodedString, Base64.DECODE);
            Bitmap bitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);
            return bitmap;
        } catch (Exception e) {
            e.getMessage();
            return null;
        }
    }

    public Bitmap getResizedBitmap(Bitmap bm, int newHeight, int newWidth) {
        // GET CURRENT SIZE
        int width = bm.getWidth();
        int height = bm.getHeight();
        // GET SCALE SIZE
        float scaleWidth = ((float) newWidth) / width;
        float scaleHeight = ((float) newHeight) / height;
        // CREATE A MATRIX FOR THE MANIPULATION
        Matrix matrix = new Matrix();
        // RESIZE THE BIT MAP
        matrix.postScale(scaleWidth, scaleHeight);
        // "RECREATE" THE NEW BITMAP
        Bitmap resizedBitmap = Bitmap.createBitmap(bm, 0, 0, width, height, matrix, false);
        return resizedBitmap;
    }

    public String LableCentre(String InvoiceLabel) {

        int ln = InvoiceLabel.trim().length();
        int rem = 42 - ln;
        int part = rem / 2;
        String tt1 = "";
        for (int i = 0; i < part; i++) {
            tt1 = tt1 + " ";
        }
        tt1 = tt1 + InvoiceLabel;
        for (int i = 0; i < part; i++) {
            tt1 = tt1 + " ";
        }
        return tt1;
    }


    private JSONObject getPrintObject(String test) {
        JSONObject json = new JSONObject();
        try {
            json.put("content-type", "txt");
            json.put("content", test);
            json.put("size", "1");
            json.put("position", "left");
            json.put("offset", "0");
            json.put("bold", "0");
            json.put("italic", "0");
            json.put("height", "-1");
        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return json;
    }

    private JSONObject getPrintObject(String test, String size, String aline) {
        JSONObject json = new JSONObject();
        try {
            json.put("content-type", "txt");
            json.put("content", test);
            json.put("size", size);
            json.put("position", aline);
            json.put("offset", "0");
            json.put("bold", "0");
            json.put("italic", "0");
            json.put("height", "-1");
        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return json;
    }


    class PrinterListener implements OnPrinterListener {
        private final String TAG = "Print";

        @Override
        public void onStart() {
            // TODO 打印开始
            // Print start
            Log.d("start print","START");
        }

        @Override
        public void onFinish() {
            // TODO 打印结束
            // End of the print
//            LOGD("pint success");
            timeTools.stop();
//            LOGD("time cost：" + timeTools.getProcessTime());
        }

        @Override
        public void onError(int errorCode, String detail) {
            // TODO 打印出错
            // print error
//            LOGD("print error" + " errorcode = " + errorCode + " detail = " + detail);
            if (errorCode == PrinterBinder.PRINTER_ERROR_NO_PAPER) {
                Toast.makeText(PrintLayout.this, "paper runs out during printing", Toast.LENGTH_SHORT).show();
            }
            if (errorCode == PrinterBinder.PRINTER_ERROR_OVER_HEAT) {
                Toast.makeText(PrintLayout.this, "over heat during printing", Toast.LENGTH_SHORT).show();
            }
            if (errorCode == PrinterBinder.PRINTER_ERROR_OTHER) {
                Toast.makeText(PrintLayout.this, "other error happen during printing", Toast.LENGTH_SHORT).show();
            }
        }
    }

    public void printerInit() {
        ThreadPoolManager.getInstance().executeTask(new Runnable() {
            @Override
            public void run() {
                try {
                    mIPosPrinterService.printerInit(callbackPPT8555);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public int getPrinterStatus() {

        Log.i(TAG, "***** printerStatus" + printerStatus);
        try {
            printerStatus = mIPosPrinterService.getPrinterStatus();
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        Log.i(TAG, "#### printerStatus" + printerStatus);
        return printerStatus;
    }

    /*加快bitmap回收，减少内存占用*/
    public static void bitmapRecycle(Bitmap bitmap) {
        if (bitmap != null && !bitmap.isRecycled()) {
            bitmap.recycle();
        }
    }

}
